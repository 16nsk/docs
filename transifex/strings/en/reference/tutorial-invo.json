{
    "tutorial-invo_7f678843ac2d35108253ef04bcf88ddb": "Tutorial 2: Explaining INVO",
    "tutorial-invo_28c87f3f9c6f429bc7d90c5c7ede0254": "In this second tutorial, we'll explain a more complete application in order to deepen the development with Phalcon. INVO is one of the applications we have created as samples. INVO is a small website that allows their users to generate invoices, and do other tasks such as manage their customers and products. You can clone its code from Github_.",
    "tutorial-invo_ed36a879763a72ad2eee0265880afedc": "Also, INVO was made with `Bootstrap`_ as client-side framework. Although the application does not generate invoices, it still serves as an example to understand how the framework works.",
    "tutorial-invo_3709570c902e1a2ffa6c5fba641e54c6": "Project Structure",
    "tutorial-invo_3595f28c91fe068a1929221da9da0b1f": "Once you clone the project in your document root you'll see the following structure:",
    "tutorial-invo_75908b9dde1d89de02a927f9f76ffa2d": "As you know, Phalcon does not impose a particular file structure for application development. This project provides a simple MVC structure and a public document root.",
    "tutorial-invo_6e14d8418b95f3a464b13f043e60823c": "Once you open the application in your browser http:\/\/localhost\/invo you'll see something like this:",
    "tutorial-invo_fa6a84822536f4cbe05b457b2cc3889e": "The application is divided into two parts, a frontend, that is a public part where visitors can receive information about INVO and request contact information. The second part is the backend, an administrative area where a registered user can manage his\/her products and customers.",
    "tutorial-invo_476a8980062af9e778f675c1bc4f73ef": "Routing",
    "tutorial-invo_d7b7bba4cbcbb48d2596f87e32f1c450": "INVO uses the standard route that is built-in with the Router component. These routes match the following pattern: \/:controller\/:action\/:params. This means that the first part of a URI is the controller, the second the action and the rest are the parameters.",
    "tutorial-invo_5c32f015aa0d105ddec5444b5185b6b6": "The following route \/session\/register executes the controller SessionController and its action registerAction.",
    "tutorial-invo_577e542402540b811d7f352af537ba5b": "Configuration",
    "tutorial-invo_0f64b3448ec641451739dbeb43924bd0": "INVO has a configuration file that sets general parameters in the application. This file is read in the first few lines of the bootstrap file (public\/index.php):",
    "tutorial-invo_b4d7f51ad0fa394bbe43700f43672ce5": "Read the configuration",
    "tutorial-invo_cedd34fb9d17470ea65834728f1e26fd": "contains the following settings:",
    "tutorial-invo_588f03a27c4c29f99bed53ee23b0025a": "Phalcon hasn't any pre-defined convention settings. Sections help us to organize the options as appropriate. In this file there are three sections to be used later.",
    "tutorial-invo_adfc9fa0f9bf18986bec56424adfc389": "Autoloaders",
    "tutorial-invo_12beceff46c93213f99a13d60b70ac77": "The second part that appears in the bootstrap file (public\/index.php) is the autoloader. The autoloader registers a set of directories in which the application will look for the classes that it eventually will need.",
    "tutorial-invo_137ec25fc74fb514ac12ab593b829ff4": "Note that the above code has registered the directories that were defined in the configuration file. The only directory that is not registered is the viewsDir, because it contains HTML + PHP files but no classes.",
    "tutorial-invo_02b8283e2b5e81cef94cd2a9e239e791": "Handling the Request",
    "tutorial-invo_fc0446f7b7e5aadf1071f94bea6efb6f": "If we skip to the end of the file, the request is finally handled by Phalcon\\\\Mvc\\\\Application which initializes and executes all that is necessary to make the application run:",
    "tutorial-invo_e287a0208a30ff5691eec26a26f4053f": "Dependency Injection",
    "tutorial-invo_3ec6f2564704e630120e116745184575": "Look at the first line of the code block above, the Application class constructor is receiving the variable $di as an argument. What is the purpose of that variable? Phalcon is a highly decoupled framework, so we need a component that acts as glue to make everything work together. That component is Phalcon\\\\DI. It is a service container that also performs dependency injection, instantiating all components as they are needed by the application.",
    "tutorial-invo_a8fb6fc5ad16bcd173179410158ff3a1": "There are many ways of registering services in the container. In INVO, most services have been registered using anonymous functions. Thanks to this, the objects are instantiated in a lazy way, reducing the resources needed by the application.",
    "tutorial-invo_9c2337296eba2c2cc99ed9dbcb8f1d9f": "For instance, in the following excerpt the session service is registered. The anonymous function will only be called when the application requires access to the session data:",
    "tutorial-invo_a53ecd6d59ae8e71e9c509c31fad61f4": "Start the session the first time a component requests the session service",
    "tutorial-invo_91c3fc975a1658e292ecac25e55fc970": "Here, we have the freedom to change the adapter, perform additional initialization and much more. Note that the service was registered using the name \"session\". This is a convention that will allow the framework to identify the active service in the services container.",
    "tutorial-invo_708c7328d83cde6ff62a3cacc6b28de9": "A request can use many services and registering each service individually can be a cumbersome task. For that reason, the framework provides a variant of Phalcon\\\\DI called Phalcon\\\\DI\\\\FactoryDefault whose task is to register all services providing a full-stack framework.",
    "tutorial-invo_83a2afdf8653199f242fc72420d594b4": "The FactoryDefault Dependency Injector automatically registers the",
    "tutorial-invo_d1a71d84103a9d4b6d8ba6bcce6b9f93": "right services providing a full-stack framework",
    "tutorial-invo_a787ad22760b1f73e9cda20f50d5c344": "It registers the majority of services with components provided by the framework as standard. If we need to override the definition of some service we could just set it again as we did above with \"session\". This is the reason for the existence of the variable $di.",
    "tutorial-invo_5b97780299ed550071e7955b0517768a": "Log into the Application",
    "tutorial-invo_322e594cab612f0c807bacfaee7406a6": "A \"log in\" facility will allow us to work on backend controllers. The separation between backend controllers and frontend ones is only logical. All controllers are located in the same directory (app\/controllers\/).",
    "tutorial-invo_95f9d3b98ad50727cfe19a6f922de35b": "To enter the system, users must have a valid username and password. Users are stored in the table \"users\" in the database \"invo\".",
    "tutorial-invo_f36053e45a4135190a5fbe3a2e761548": "Before we can start a session, we need to configure the connection to the database in the application. A service called \"db\" is set up in the service container with the connection information. As with the autoloader, we are again taking parameters from the configuration file in order to configure a service:",
    "tutorial-invo_b93b3566ee61b9b153fb8a20c91b6bc1": "Database connection is created based on parameters defined in the configuration file",
    "tutorial-invo_e0578ace1f9cd8cacb5b476d51cafd0d": "Here, we return an instance of the MySQL connection adapter. If needed, you could do extra actions such as adding a logger, a profiler or change the adapter, setting it up as you want.",
    "tutorial-invo_abb08affd2830c36019591cee0d408e0": "The following simple form (app\/views\/session\/index.phtml) requests the login information. We've removed some HTML code to make the example more concise:",
    "tutorial-invo_b729f426196bb65221a48821be88864a": "The SessionController::startAction function (app\/controllers\/SessionController.php) has the task of validating the data entered in the form including checking for a valid user in the database:",
    "tutorial-invo_7629e660109c94f016c45e89d657ca33": "Receiving the variables sent by POST",
    "tutorial-invo_e189c36be6ca20f2b7d227aaa8761db1": "Find the user in the database",
    "tutorial-invo_63fb26bc4d9c7ab8bf81502da870e512": "Forward to the 'invoices' controller if the user is valid",
    "tutorial-invo_c33aa491286ca250046f8a93cfd687e8": "Forward to the login form again",
    "tutorial-invo_e1691ff99f6bd12634fef3d7fda85e98": "For simplicity, we have used \"sha1_\" to store the password hashes in the database, however, this algorithm is not recommended in real applications, use \":doc:`bcrypt <security>`\" instead.",
    "tutorial-invo_6dacbb6b00b1e8395f607c3934435e81": "Note that multiple public attributes are accessed in the controller like: $this->flash, $this->request or $this->session. These are services defined in the services container from earlier. When they're accessed the first time, they are injected as part of the controller.",
    "tutorial-invo_e2c9b701c0e9e94a581b2d2986ea9b74": "These services are shared, which means that we are always accessing the same instance regardless of the place where we invoke them.",
    "tutorial-invo_0ab5be587254263ea652f29c1eb8edd3": "For instance, here we invoke the \"session\" service and then we store the user identity in the variable \"auth\":",
    "tutorial-invo_aef0bb1a5d3d66a8332cef8e6a94b36b": "Securing the Backend",
    "tutorial-invo_7ff4f2f6d194c678c5b2a677ad52b0ca": "The backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you aren't logged into the application and you try to access, for example, the products controller (which is private) you will see a screen like this:",
    "tutorial-invo_4530981ad58b22a504c8538bb2ba1c1a": "Every time someone attempts to access any controller\/action, the application verifies that the current role (in session) has access to it, otherwise it displays a message like the above and forwards the flow to the home page.",
    "tutorial-invo_2c90b734d651f10cc7131ac076b7ebd3": "Now let's find out how the application accomplishes this. The first thing to know is that there is a component called :doc:`Dispatcher <dispatching>`. It is informed about the route found by the :doc:`Routing <routing>` component. Then, it is responsible for loading the appropriate controller and execute the corresponding action method.",
    "tutorial-invo_3e0157a6079d73b316fe4f72545941b8": "Normally, the framework creates the Dispatcher automatically. In our case, we want to perform a verification before executing the required action, checking if the user has access to it or not. To achieve this, we have replaced the component by creating a function in the bootstrap:",
    "tutorial-invo_5a3f2590fed451483c9290184dc1c83a": "We now have total control over the Dispatcher used in the application. Many components in the framework trigger events that allow us to modify their internal flow of operation. As the Dependency Injector component acts as glue for components, a new component called :doc:`EventsManager <events>` allows us to intercept the events produced by a component, routing the events to listeners.",
    "tutorial-invo_c9f4b22767d8d72f8d8f7c31ef2e8f39": "Events Management",
    "tutorial-invo_9cc9a9a4bdef843f9c92207a75b41875": "An :doc:`EventsManager <events>` allows us to attach listeners to a particular type of event. The type that interests us now is \"dispatch\". The following code filters all events produced by the Dispatcher:",
    "tutorial-invo_f4d9a2e02e14cc0acafaa042c1a85a33": "Obtain the standard eventsManager from the DI",
    "tutorial-invo_dfd6fe9068ad78c81e62a83693421bd8": "Instantiate the Security plugin",
    "tutorial-invo_a80818b6ed36ce329c3f05566a104c64": "Listen for events produced in the dispatcher using the Security plugin",
    "tutorial-invo_14ed8db418ae27c9461874df48e65089": "Bind the EventsManager to the Dispatcher",
    "tutorial-invo_49945e223fac5fff337e28082f473b56": "The Security plugin is a class located at (app\/plugins\/Security.php). This class implements the method \"beforeDispatch\". This is the same name as one of the events produced in the Dispatcher:",
    "tutorial-invo_abbbb05b3359e05192b20ea78670538d": "The hook events always receive a first parameter that contains contextual information of the event produced ($event) and a second one that is the object that produced the event itself ($dispatcher). It is not mandatory that plugins extend the class Phalcon\\\\Mvc\\\\User\\\\Plugin, but by doing this they gain easier access to the services available in the application.",
    "tutorial-invo_d91b1e0723209030c21df36ca0546361": "Now, we're verifying the role in the current session, checking if the user has access using the ACL list. If the user does not have access we redirect to the home screen as explained before:",
    "tutorial-invo_61890578f73112f18e21cbc1c54d5233": "Check whether the \"auth\" variable exists in session to define the active role",
    "tutorial-invo_d71df499ae6087485fdf76c17c4fe5e5": "Take the active controller\/action from the dispatcher",
    "tutorial-invo_84e64d27d45cc985b15fcfe4f4368d18": "Obtain the ACL list",
    "tutorial-invo_91e1a311fe450061f625e66a7e0e53aa": "Check if the Role have access to the controller (resource)",
    "tutorial-invo_223b2be953d2a6535350d55f547bffab": "If he doesn't have access forward him to the index controller",
    "tutorial-invo_77e7f5fb0cc4657a13957948354e36fe": "Returning \"false\" we tell to the dispatcher to stop the current operation",
    "tutorial-invo_9cea4724960c835baa2852b846dd6016": "Providing an ACL list",
    "tutorial-invo_bee07cbc99e3a264008d9ed852f41c71": "In the above example we have obtained the ACL using the method $this->_getAcl(). This method is also implemented in the Plugin. Now we are going to explain step-by-step how we built the access control list (ACL):",
    "tutorial-invo_24fdb2fe8ae69a7e3dd95739aa21609d": "Create the ACL",
    "tutorial-invo_142985241bac55e61f67b3f8df1b2d3b": "The default action is DENY access",
    "tutorial-invo_540e48a3dcfa4ad701652cdf74c37733": "Register two roles, Users is registered users",
    "tutorial-invo_1bb51fb376980fe00d07697d579e918e": "and guests are users without a defined identity",
    "tutorial-invo_7026c3b77198230256acb465f3a9c2f4": "Now we define the resources for each area respectively. Controller names are resources and their actions are accesses for the resources:",
    "tutorial-invo_db7b9266f48492d4019507f9bc43f0ef": "Private area resources (backend)",
    "tutorial-invo_cd4d3ce711c8db1b1f18a3a315420722": "Public area resources (frontend)",
    "tutorial-invo_c07226da143bc2c3f942a0848decadcc": "The ACL now have knowledge of the existing controllers and their related actions. Role \"Users\" has access to all the resources of both frontend and backend. The role \"Guests\" only has access to the public area:",
    "tutorial-invo_d7e8f62a25954bc85f63c86ed94f1be4": "Grant access to public areas to both users and guests",
    "tutorial-invo_1e19fec469d8ac4bdf7a077cd03ef0f1": "Grant access to private area only to role Users",
    "tutorial-invo_e9dbb0059898c51f12006f932f8c1dd5": "Hooray!, the ACL is now complete.",
    "tutorial-invo_344fc05aa62dcb9673334da792893b93": "User Components",
    "tutorial-invo_26c19d581f9b8adcf67e0ff5d40fa07a": "All the UI elements and visual style of the application has been achieved mostly through `Bootstrap`_. Some elements, such as the navigation bar changes according to the state of the application. For example, in the upper right corner, the link \"Log in \/ Sign Up\" changes to \"Log out\" if an user is logged into the application.",
    "tutorial-invo_ced89705bbf6110384fbd0acf9fda9c2": "This part of the application is implemented in the component \"Elements\" (app\/library\/Elements.php).",
    "tutorial-invo_9531e943076090778f9c27bde71c4471": "This class extends the Phalcon\\\\Mvc\\\\User\\\\Component, it is not imposed to extend a component with this class, but it helps to get access more quickly to the application services. Now, we register this class in the services container:",
    "tutorial-invo_97a543993153e65120d2f152d0644545": "Register an user component",
    "tutorial-invo_3298ad06f43c0854b544871881d467fb": "As controllers, plugins or components within a view, this component also has access to the services registered in the container and by just accessing an attribute with the same name as a previously registered service:",
    "tutorial-invo_f6fceb057eb0510f64c434de3c040a62": "The important part is:",
    "tutorial-invo_d6159fee9dcdb02f83a84e5963335e0c": "Working with the CRUD",
    "tutorial-invo_9ee5803894783396314a436a4cb0106a": "Most options that manipulate data (companies, products and types of products), were developed using a basic and common CRUD_ (Create, Read, Update and Delete). Each CRUD contains the following files:",
    "tutorial-invo_4acb74ee1cce36f3fbebc37e5621a553": "Each controller has the following actions:",
    "tutorial-invo_004196ab227c39c85765e52a45bbe66e": "The Search Form",
    "tutorial-invo_5227de8e3efb5114e3fc9a1d26df81bd": "Every CRUD starts with a search form. This form shows each field that has the table (products), allowing the user creating a search criteria from any field. Table \"products\" has a relationship to the table \"products_types\". In this case, we previously queried the records in this table in order to facilitate the search by that field:",
    "tutorial-invo_ba1e50925dfae3c5dd6293072ca8c965": "All the \"product types\" are queried and passed to the view as a local variable \"productTypes\". Then, in the view (app\/views\/index.phtml) we show a \"select\" tag filled with those results:",
    "tutorial-invo_c593bd8013467e104dd0642ebaaeffad": "Note that $productTypes contains the data necessary to fill the SELECT tag using Phalcon\\\\Tag::select. Once the form is submitted, the action \"search\" is executed in the controller performing the search based on the data entered by the user.",
    "tutorial-invo_878b6c9b94eecff7d42c40c0a88f17fc": "Performing a Search",
    "tutorial-invo_49e69e1a6ce42e203e7f24dd3d5cc6d2": "The action \"search\" has a dual behavior. When accessed via POST, it performs a search based on the data sent from the form. But when accessed via GET it moves the current page in the paginator. To differentiate one from another HTTP method, we check it using the :doc:`Request <request>` component:",
    "tutorial-invo_540375dd31a0814ecfd754d945897e44": "create the query conditions",
    "tutorial-invo_22c40cca3e11b36e34a4fe9d587303db": "paginate using the existing conditions",
    "tutorial-invo_638ffdc8e55f3eb959f56cd4f1d377e3": "With the help of :doc:`Phalcon\\\\Mvc\\\\Model\\\\Criteria <..\/api\/Phalcon_Mvc_Model_Criteria>`, we can create the search conditions intelligently based on the data types and values sent from the form:",
    "tutorial-invo_d1186bc6648b7a474a9cf8ec6f717938": "This method verifies which values are different from \"\" (empty string) and null and takes them into account to create the search criteria:",
    "tutorial-invo_065b4fce3559ab3603ffbcee979c4106": "* If the field data type is text or similar (char, varchar, text, etc.) It uses an SQL \"like\" operator to filter the results. * If the data type is not text or similar, it'll use the operator \"=\".",
    "tutorial-invo_f16803e5e4e4781ab80b5e3af828d753": "Additionally, \"Criteria\" ignores all the $_POST variables that do not match any field in the table. Values are automatically escaped using \"bound parameters\".",
    "tutorial-invo_6caf2bedd153027659b27aac568be957": "Now, we store the produced parameters in the controller's session bag:",
    "tutorial-invo_9bbd0c833b1acdd7298af8955b8d2a90": "A session bag, is a special attribute in a controller that persists between requests. When accessed, this attribute injects a :doc:`Phalcon\\\\Session\\\\Bag <..\/api\/Phalcon_Session_Bag>` service that is independent in each controller.",
    "tutorial-invo_c338b2537f1f16b3ca021730bbdd2a14": "Then, based on the built params we perform the query:",
    "tutorial-invo_2ac0ffc01b2e7a5127175e85f1df122a": "If the search doesn't return any product, we forward the user to the index action again. Let's pretend the search returned results, then we create a paginator to navigate easily through them:",
    "tutorial-invo_14d76d54ab3780f362707c0c1a6aa341": "Data to paginate",
    "tutorial-invo_3995e76cfbc85dea7472c8a1aa627244": "Rows per page",
    "tutorial-invo_37dda05f52e43d78e8a236067e4f3a6f": "Active page",
    "tutorial-invo_d3f60f2e030e7abb46c7b667f889dd88": "Get active page in the paginator",
    "tutorial-invo_4f82dd83f8b26b62f125100bf36329dc": "Finally we pass the returned page to view:",
    "tutorial-invo_e34ffd22274b86356c4d1be9f9683881": "In the view (app\/views\/products\/search.phtml), we traverse the results corresponding to the current page:",
    "tutorial-invo_aa52b2b622e15d091d9cc395b0f14db8": "Creating and Updating Records",
    "tutorial-invo_78e83a0627fcaf60669852c539e75834": "Now let's see how the CRUD creates and updates records. From the \"new\" and \"edit\" views the data entered by the user are sent to the actions \"create\" and \"save\" that perform actions of \"creating\" and \"updating\" products respectively.",
    "tutorial-invo_498ec53e4e2584b114f9af6eae419474": "In the creation case, we recover the data submitted and assign them to a new \"products\" instance:",
    "tutorial-invo_d100834542c3422f40ed6487d235b62c": "Data is filtered before being assigned to the object. This filtering is optional, the ORM escapes the input data and performs additional casting according to the column types.",
    "tutorial-invo_b32e8a40b7344f7cb1fe0ebb7ec3dc11": "When saving we'll know whether the data conforms to the business rules and validations implemented in the model Products:",
    "tutorial-invo_565702a96de97f534f750ff24ec7240e": "The store failed, the following messages were produced",
    "tutorial-invo_45eed66953916c4823a5a774ef5bdc14": "Now, in the case of product updating, first we must present to the user the data that is currently in the edited record:",
    "tutorial-invo_34bb04a68cd7071e63e0532e69dfd5cb": "The \"setDefault\" helper sets a default value in the form on the attribute with the same name. Thanks to this, the user can change any value and then sent it back to the database through to the \"save\" action:",
    "tutorial-invo_18d0cfa0302d0892b52b2f31cae98c00": "Find the product to update",
    "tutorial-invo_1870ec2d65eb717be0cd826df7b226fa": "... assign the values to the object and store it",
    "tutorial-invo_d3e60867c9d627bfaa7532c66363a4b4": "Changing the Title Dynamically",
    "tutorial-invo_3d8283201c2745d21e667cb1c6c849c0": "When you browse between one option and another will see that the title changes dynamically indicating where we are currently working. This is achieved in each controller initializer:",
    "tutorial-invo_e40f3f04296994421b72cd0ebe40983c": "Set the document title",
    "tutorial-invo_2a146b29effa81a28c1281d71026db93": "Note, that the method parent::initialize() is also called, it adds more data to the title:",
    "tutorial-invo_ced1d5f8a71cc3b20eb5edd43467ca9c": "Prepend the application name to the title",
    "tutorial-invo_f363a6391b33a732adff55762bd3fb44": "Finally, the title is printed in the main view (app\/views\/index.phtml):",
    "tutorial-invo_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "tutorial-invo_2e7acbb8a1808a4356beef6e2c853ba9": "This tutorial covers many more aspects of building applications with Phalcon, hope you have served to learn more and get more out of the framework."
}