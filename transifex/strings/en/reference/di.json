{
    "di_4a5b7bc627ed34135d58c67ccb674fb5": "Dependency Injection\/Service Location ************************************* The following example is a bit lengthy, but explains why use service location and dependency injection. First, let's pretend we are developing a component called SomeComponent. This performs a task that is not important now. Our component has some dependency that is a connection to a database.",
    "di_c8beb1db535d2d5d051ba217fe6c8051": "In this first example, the connection is created inside the component. This approach is impractical; due to the fact we cannot change the connection parameters or the type of database system because the component only works as created.",
    "di_574a7ed3bb5d3bb628504780fbead704": "To solve this, we have created a setter that injects the dependency externally before using it. For now, this seems to be a good solution:",
    "di_adb110eceff15d54c62d08f27fe45e68": "Create the connection",
    "di_651e15141b7a09e7ffeeaac2cc3f90f6": "Inject the connection in the component",
    "di_5b7e48880fbea53af767c7bc5056d8aa": "Now consider that we use this component in different parts of the application and then we will need to create the connection several times before passing it to the component. Using some kind of global registry where we obtain the connection instance and not have to create it again and again could solve this:",
    "di_3fdb8ae9cd4d1bd1e31040931421dde3": "Pass the connection defined in the registry",
    "di_7358d10fc368cb382d807da84444f939": "Now, let's imagine that we must implement two methods in the component, the first always need to create a new connection and the second always need to use a shared connection:",
    "di_a065ed5816bf5bdb232f63839413db93": "This injects the shared connection",
    "di_650a1e77458ec792145b424935f2d9db": "Here, we always pass a new connection as parameter",
    "di_97337be64fa7cbbf9af489790e9badb6": "So far we have seen how dependency injection solved our problems. Passing dependencies as arguments instead of creating them internally in the code makes our application more maintainable and decoupled. However, in the long-term, this form of dependency injection have some disadvantages.",
    "di_2e678291f806f4e66ec87ead48e6018a": "For instance, if the component has many dependencies, we will need to create multiple setter arguments to pass the dependencies or create a constructor that pass them with many arguments, additionally creating dependencies before using the component, every time, makes our code not as maintainable as we would like:",
    "di_a368acdb5b6af2fc77288deb033de42f": "Create the dependencies or retrieve them from the registry",
    "di_0feab19cf0dfd1c5cddfb6e12a925d39": "Pass them as constructor parameters",
    "di_b9b85c3b69718427f55faca36d345eb8": "... or using setters",
    "di_35a19665bc2a2bcddfcac04d57024568": "Think we had to create this object in many parts of our application. If you ever do not require any of the dependencies, we need to go everywhere to remove the parameter in the constructor or the setter where we injected the code. To solve this, we return again to a global registry to create the component. However, it adds a new layer of abstraction before creating the object:",
    "di_ba4b67485bd4fca58dad7b0f724aca85": "One moment, we returned to the beginning, we are again building the dependencies inside of the component! We can move on and find out a way to solve this problem every time. But it seems that time and again we fall back into bad practices.",
    "di_c131f094dbcc3b2eca85a57b141612c5": "A practical and elegant way to solve these problems is using a container for dependencies. The containers act as the global registry that we saw earlier. Using the container for dependencies as a bridge to obtain the dependencies allows us to reduce the complexity of our component:",
    "di_2bb71ae71c72d6cd711b343a8ce6ef36": "Get the connection service",
    "di_d960a3b92ab6d6e23ad9079e0d891ee0": "Always returns a new connection",
    "di_bdc30dd362e375de668fccf0b04cd514": "Get a shared connection service,",
    "di_7c1684b26c75a74b272808e93d26cfd7": "this will return the same connection everytime",
    "di_4a2e6799be4cc43397224048e1cea642": "This method also requires an input filtering service",
    "di_1f6be9f851d024f9c2255b0b45ec646c": "Register a \"db\" service in the container",
    "di_ae40a4e0eb8d4449e21cf5eed59167d6": "Register a \"filter\" service in the container",
    "di_6279275289461e2e4743b305b293e167": "Register a \"session\" service in the container",
    "di_f3de1ee1ded598164bbef9aac39254f9": "Pass the service container as unique parameter",
    "di_e6f996a5b1eac12ea2042f1938fc5c22": "The component now simply access the service it requires when it needs it, if it does not require a service that is not even initialized saving resources. The component is now highly decoupled. For example, we can replace the manner in which connections are created, their behavior or any other aspect of them and that would not affect the component.",
    "di_4df3a2adc8b97815253827b168ac9186": "Our approach",
    "di_ef4688cd63009deb66575a3205c9d639": "Phalcon\\\\DI is a component implementing Dependency Injection and Location of services and it's itself a container for them.",
    "di_3fa3eaafa26e9ffe84116c67d0fefbf1": "Since Phalcon is highly decoupled, Phalcon\\\\DI is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.",
    "di_fbb2fa5e81cfb83763e38d50f7fb41c3": "Basically, this component implements the `Inversion of Control`_ pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity since there is only one way to get the required dependencies within a component.",
    "di_99b587c85d45df1407dcd0788d9587a5": "Additionally, this pattern increases testability in the code, thus making it less prone to errors.",
    "di_986a30636ebdb00490151abb04c98bbe": "Registering services in the Container",
    "di_394e670d251c1672db1443ed55c38287": "The framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.",
    "di_c61eadc667d87fdc8772798841b75116": "This way of working gives us many advantages:",
    "di_e2b160d2fd91df6f28047de0a7438245": "* We can easily replace a component with one created by ourselves or a third party. * We have full control of the object initialization, allowing us to set these objects, as needed before delivering them to components. * We can get global instances of components in a structured and unified way",
    "di_b9902c5ec0e172db9ea3ef4a360a4772": "Services can be registered using several types of definitions:",
    "di_4a09b9a8df6b4b068531d7654fac0327": "Create the Dependency Injector Container",
    "di_0c4194c9a6a75b3f309bd1d4394a6105": "By its class name",
    "di_49ef8ef6f69770739db9af5274251b7c": "Using an anonymous function, the instance will be lazy loaded",
    "di_7edeccad7eb5d61bfbcf11c7f4223867": "Registering an instance directly",
    "di_703595dc0b8e648e923ca00db8bcf513": "Using an array definition",
    "di_d98882f481863f6da56c67fcda067893": "The array syntax is also allowed to register services:",
    "di_c0112234d77d9c9d66747da018ab1b16": "In the examples above, when the framework needs to access the request data, it will ask for the service identified as \u2018request\u2019 in the container. The container in turn will return an instance of the required service. A developer might eventually replace a component when he\/she needs.",
    "di_70f7fd5cab148f4b7101ea9f131e885c": "Each of the methods (demonstrated in the examples above) used to set\/register a service has advantages and disadvantages. It is up to the developer and the particular requirements that will designate which one is used.",
    "di_133dd51288fdbf98603194b63e11cf62": "Setting a service by a string is simple, but lacks flexibility. Setting services using an array offers a lot more flexibility, but makes the code more complicated. The lambda function is a good balance between the two, but could lead to more maintenance than one would expect.",
    "di_37f9c0bc3f3b1fd17546fe3c12fcbe71": "Phalcon\\\\DI offers lazy loading for every service it stores. Unless the developer chooses to instantiate an object directly and store it in the container, any object stored in it (via array, string, etc.) will be lazy loaded i.e. instantiated only when requested.",
    "di_694876cfdd2a46a8dcac91aa534196ad": "Simple Registration",
    "di_1392edb02b710a6e27f1249390e2f537": "As seen before, there are several ways to register services. These we call simple:",
    "di_20cdd879f4dcfb6fb4d7de18d7e464ff": "String",
    "di_9ef693cf4ecb42b512fbea01a3a35c84": "This type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:",
    "di_75df90dfe0a1dbc61cc89f9a6e6f77e9": "Object",
    "di_d9691bd1823160ec71e0f0bb30469cff": "This type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object\/value:",
    "di_0288243a357389f316e2aa112edc3664": "Closures\/Anonymous functions",
    "di_4a4d8f31d75cf986c2d00a26a48dae32": "This method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:",
    "di_c96aadc03ffb0462aa95fb4a85923011": "Some of the limitations can be overcome by passing additional variables to the closure's environment:",
    "di_9e4c85155cdc156e3e717cf30594427b": "Using the $config variable in the current scope",
    "di_2660cdeaa3179e567ddc97ea665f0317": "Complex Registration",
    "di_79ed10d961ef000241c8f7d7ce1be212": "If it is required to change the definition of a service without instantiating\/resolving the service, then, we need to define the services using the array syntax. Define a service using an array definition can be a little more verbose:",
    "di_89c6f7adda4ccce404a4dceac92a82d7": "Register a service 'logger' with a class name and its parameters",
    "di_2f1fffb20b38514cec7ec9556bcc1901": "Using an anonymous function",
    "di_9aa1de8a6cafc7bd07f737adddbb8438": "Both service registrations above produce the same result. The array definition however, allows for alteration of the service parameters if needed:",
    "di_cdb0598c01cf979f97867e5bf48dabd1": "Change the service class name",
    "di_171cc68c3687af305338dd7c0d9422b3": "Change the first parameter without instantiating the logger",
    "di_f2915c8918f43a062e3f5599e794989d": "In addition by using the array syntax you can use three types of dependency injection:",
    "di_9c0bdf48d0a98198d5490fcd17421123": "Constructor Injection",
    "di_04c13fc7ced43a12edc258ed23299840": "This injection type passes the dependencies\/arguments to the class constructor. Let's pretend we have the following component:",
    "di_d1ba10c207d7013726f7c99936b7c216": "The service can be registered this way:",
    "di_09927c30ccaac2540c35fef8dd775559": "The service \"response\" (Phalcon\\\\Http\\\\Response) is resolved to be passed as the first argument of the constructor, while the second is a boolean value (true) that is passed as it is.",
    "di_33371c87c59dd13879c03d2933b2883a": "Setter Injection",
    "di_037521458982b3a04f8a8f73e18cf0e2": "Classes may have setters to inject optional dependencies, our previous class can be changed to accept the dependencies with setters:",
    "di_b3ae449184d1b666544396372eedeccc": "A service with setter injection can be registered as follows:",
    "di_561e082121d27439298b1449dfa14f3d": "Properties Injection",
    "di_cc0e08475fea09b8e1e0faedaa904394": "A less common strategy is to inject dependencies or parameters directly into public attributes of the class:",
    "di_b415258cb72581635e1a11c818099fec": "A service with properties injection can be registered as follows:",
    "di_9556a96ea3e328a290fa0d1f5241b93b": "Supported parameter types include the following:",
    "di_c39b14a551be0865ba3861920297ee03": "Resolving a service whose definition is complex may be slightly slower than simple definitions seen previously. However, these provide a more robust approach to define and inject services.",
    "di_2cadca58ad0af8c325f305d5e775c048": "Mixing different types of definitions is allowed, everyone can decide what is the most appropriate way to register the services according to the application needs.",
    "di_ebe7f70c26148e804268cefe62123657": "Resolving Services",
    "di_55272287ce2940d0156cc9f08f4cc6a8": "Obtaining a service from the container is a matter of simply calling the \u201cget\u201d method. A new instance of the service will be returned:",
    "di_7c1737f36a6e408ba72bb5a799178da2": "Or by calling through the magic method:",
    "di_b30f368f718f146093bbf9e426bcaf6d": "Or using the array-access syntax:",
    "di_df760419f3610c317d0a8389de253bb1": "Arguments can be passed to the constructor by adding an array parameter to the method \"get\":",
    "di_945920107394b32e034f1568d6a9d758": "new MyComponent(\"some-parameter\", \"other\")",
    "di_5e95da1b79954815439137b5633640d9": "Shared services",
    "di_523da39e9a502f591f39f45be934c195": "Services can be registered as \"shared\" services this means that they always will act as singletons_. Once the service is resolved for the first time the same instance of it is returned every time a consumer retrieve the service from the container:",
    "di_bd223bfb790abb46b36c0bb9c45137d0": "Register the session service as \"always shared\"",
    "di_ab897c9c2e7e46440b6466f2d36f124e": "Locates the service for the first time",
    "di_9d15eb019aa64c75adc2a2eb51d56882": "Returns the first instantiated object",
    "di_ab7945a37fd0394ab6aa70073346689e": "An alternative way to register shared services is to pass \"true\" as third parameter of \"set\":",
    "di_a2fc89c7cf97ed772e169211e2239c2c": "If a service isn't registered as shared and you want to be sure that a shared instance will be accessed every time the service is obtained from the DI, you can use the 'getShared' method:",
    "di_a9c22033c4679a03e177418411d01888": "Manipulating services individually",
    "di_36420ae7d6f7117c9398175a25e18bfb": "Once a service is registered in the service container, you can retrieve it to manipulate it individually:",
    "di_3dccbfc975bace728b4222d239d68241": "Register the \"register\" service",
    "di_ed008be759e16fd3e75fee7914c96149": "Get the service",
    "di_192eed5fc58caf31cd16710dfd023934": "Change its definition",
    "di_41da7327626545a050418aedcfdb4d2c": "Change it to shared",
    "di_5a6f307a548f6f9f8793612e2f16f52f": "Resolve the service (return a Phalcon\\Http\\Request instance)",
    "di_11205d8363eee750e219f2142a69f6cc": "Instantiating classes via the Service Container",
    "di_9ec7bab8213c10730a15e14a83bf8eca": "When you request a service to the service container, if it can't find out a service with the same name it'll try to load a class with the same name. With this behavior we can replace any class by another simply by registering a service with its name:",
    "di_488248aa224f04bf34e44796a2a8c3f9": "Register a controller as a service",
    "di_9d551646f920cbebf936f0e2e5fe8e1e": "Actually returns another component",
    "di_0a981d32b627f0c9ed8f523d9fdd914e": "Create an instance via the service container",
    "di_85beb28ee3f83ae99cc759a92dd8034f": "You can take advantage of this, always instantiating your classes via the service container (even if they aren't registered as services). The DI will fallback to a valid autoloader to finally load the class. By doing this, you can easily replace any class in the future by implementing a definition for it.",
    "di_f490448655b0bd4ef0ac8da57a753c8e": "Automatic Injecting of the DI itself",
    "di_f82822663c272f5d23969e02e67203db": "If a class or component requires the DI itself to locate services, the DI can automatically inject itself to the instances it creates, to do this, you need to implement the :doc:`Phalcon\\\\DI\\\\InjectionAwareInterface <..\/api\/Phalcon_DI_InjectionAwareInterface>` in your classes:",
    "di_6fc810bd74ec71922209d7143f7ccf7d": "Then once the service is resolved, the $di will be passed to setDi automatically:",
    "di_7ac0b9f44dc8d0e8ccae26e1649cbe95": "Register the service",
    "di_17a5c5092cbcd30c2143d48dee095d01": "Resolve the service (NOTE: $myClass->setDi($di) is automatically called)",
    "di_718a4aef623ce8b43b3b6e573948839b": "Avoiding service resolution",
    "di_e6b5036b404972f413cc53cc18341336": "Some services are used in each of the requests made to the application, eliminate the process of resolving the service could add some small improvement in performance.",
    "di_a2e7edcb5aaefca2b15a87f1a5834393": "Resolve the object externally instead of using a definition for it:",
    "di_f3008f164f57066b43613e1aaffa98b6": "Pass the resolved object to the service registration",
    "di_4f001400cf0edf3b340d6e85965045ee": "Organizing services in files",
    "di_70f16f940b677929f1bb8f1d27a08918": "You can better organize your application by moving the service registration to individual files instead of doing everything in the application's bootstrap:",
    "di_dff5e52a906d54857347dee1fe5cadf7": "Then in the file (\"..\/app\/config\/routes.php\") return the object resolved:",
    "di_009d636bc5ba7d3c807ad2171952c475": "Accessing the DI in a static way",
    "di_3686f852ccc9494199407f0f5c8a333f": "If needed you can access the latest DI created in a static function in the following way:",
    "di_c13c8c8ed70c91d9a0bafe5c87f4351e": "Get the session service",
    "di_ab8dffcd5daaff4344d575991cd0f12a": "Factory Default DI",
    "di_029caf1fc063b7ffdda35adf1e2ff47d": "Although the decoupled character of Phalcon offers us great freedom and flexibility, maybe we just simply want to use it as a full-stack framework. To achieve this, the framework provides a variant of Phalcon\\\\DI called Phalcon\\\\DI\\\\FactoryDefault. This class automatically registers the appropriate services bundled with the framework to act as full-stack.",
    "di_0e74f12e67a950d157dc6477fd91d5ab": "Service Name Conventions",
    "di_873e69b82630ed0e18cfce537a6d384e": "Although you can register services with the names you want, Phalcon has a several naming conventions that allow it to get the the correct (built-in) service when you need it.",
    "di_fbd70cc43e51089bc8589a32fe15143f": "Implementing your own DI",
    "di_7a91b02925ab6cdbaa40291e51a1f94e": "The :doc:`Phalcon\\\\DiInterface <..\/api\/Phalcon_DiInterface>` interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one."
}