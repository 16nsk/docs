{
    "models_34315da4fc43fd95809ef78d65f1b018": "Working with Models",
    "models_8f0e1f8b78c2a43f902d3f235a635750": "A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models.",
    "models_fda8f2e4669b60c323af927eb41204c6": ":doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` is the base for all models in a Phalcon application. It provides database independence, basic CRUD functionality, advanced finding capabilities, and the ability to relate models to one another, among other services. :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` avoids the need of having to use SQL statements because it translates methods dynamically to the respective database engine operations.",
    "models_6fe6eff5591f581f3c7a8b8db8748e2d": "Creating Models",
    "models_d135e1d450a6ca13fa8c9bd4d3a24f1d": "A model is a class that extends from :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>`. It must be placed in the models directory. A model file must contain a single class; its class name should be in camel case notation:",
    "models_c6eeed8dc109d973af70ae10efb30dc7": "The above example shows the implementation of the \"Robots\" model. Note that the class Robots inherits from :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>`. This component provides a great deal of functionality to models that inherit it, including basic database CRUD (Create, Read, Update, Delete) operations, data validation, as well as sophisticated search support and the ability to relate multiple models with each other.",
    "models_05e5dc99584f680738cd051b39df365b": "By default model \"Robots\" will refer to the table \"robots\". If you want to manually specify another name for the mapping table, you can use the getSource() method:",
    "models_8f3415d39ec51500d37f9ea2ea3dd208": "The model Robots now maps to \"the_robots\" table. In addition to the above method the 'initialize' method is available. This method aids in setting up the model with a custom behavior i.e. a different table:",
    "models_d9eddcbb0d3e0a61317e98124dcce918": "The initialize() method is only called once during the request, it's intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can 'onConstruct':",
    "models_1e97aa8d4dac7771bfc41fdd1894aef2": "Public properties vs. Setters\/Getters",
    "models_8f39f4de8a4468ca1841f16ca911e887": "Models can be implemented with properties of public scope, meaning that each property can be read\/updated from any part of the code that has instantiated that model class without any restrictions:",
    "models_4b84c28ff8c3a142e1ad871b64c58147": "By using getters and setters you can control which properties are visible publicly perform various transformations to the data (which would be impossible otherwise) and also add validation rules to the data stored in the object:",
    "models_9abd55be91e01075efab1307692d6146": "The name is too short?",
    "models_8d86bc9aa53ea8fff3895ce1b32f0d45": "Negative prices aren't allowed",
    "models_ffeb5a31ddd260dbc773168ae6f4513f": "Convert the value to double before be used",
    "models_9cf07cd93f23ce62d9699d5b32fbd557": "Public properties provide less complexity in development. However getters\/setters can heavily increase the testability, extensibility and maintainability of applications. Developers can decide which strategy is more appropriate for the application they are creating. The ORM is compatible with both schemes of defining properties.",
    "models_edc8f4356afdd63c106c2e25e75e3a4a": "Models in Namespaces",
    "models_88ac463f7dbfa7bdbca9de455e37429b": "Namespaces can be used to avoid class name collision. The mapped table is taken from the class name, in this case 'Robots':",
    "models_0041176d3d251a7208621f2d87b1cb93": "Understanding Records To Objects",
    "models_d33935c04822b910b774c26ef3232937": "Every instance of a model represents a row in the table. You can easily access record data by reading object properties. For example, for a table \"robots\" with the records:",
    "models_a0af819e2255934cda03b3f923860f88": "You could find a certain record by its primary key and then print its name:",
    "models_f148d3c6d723babc42a5f764f131694c": "Find record with id = 3",
    "models_eb38e78fafe2c0c6b7f749968a4b9d97": "Prints \"Terminator\"",
    "models_5593dab00434cec6bd7ff9eb6a5e4fa8": "Once the record is in memory, you can make modifications to its data and then save changes:",
    "models_f96a615cf8822c8ecb1594128d824ad1": "As you can see, there is no need to use raw SQL statements. :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` provides high database abstraction for web applications.",
    "models_f1139dc3521d331b62f0df072477011a": "Finding Records",
    "models_a62df1bcce86e38056342166d562c27b": ":doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` also offers several methods for querying records. The following examples will show you how to query one or more records from a model:",
    "models_1499c1af63a87b3cd78713aeabe53fc5": "How many robots are there?",
    "models_87078387b9e7d1df974b6134db85d304": "How many mechanical robots are there?",
    "models_8565a9d6967f26ce0d27ddb21a21ea4e": "Get and print virtual robots ordered by name",
    "models_815bac1c09b347d15b0d2a88e4b3cacd": "Get first 100 virtual robots ordered by name",
    "models_dca37eac806548a6c68a838011d99538": "You could also use the findFirst() method to get only the first record matching the given criteria:",
    "models_757b55639cb0428356f22a0f5233a1f4": "What's the first robot in robots table?",
    "models_fa26e0247c99764efc46dcd460d4ecdd": "What's the first mechanical robot in robots table?",
    "models_d3f491a4553e16e050d7435bc9820fba": "Get first virtual robot ordered by name",
    "models_1c335b086c81eff06a897a5fbfa8161e": "Both find() and findFirst() methods accept an associative array specifying the search criteria:",
    "models_2b5aacc034cc35eb04d354e3f362416d": "The available query options are:",
    "models_5d77a6c7de18b56c1eb8342c2e92d2d5": "If you prefer, there is also available a way to create queries in an object-oriented way, instead of using an array of parameters:",
    "models_eff92fa31585b7a86f16556298c5b9ba": "The static method query() returns a :doc:`Phalcon\\\\Mvc\\\\Model\\\\Criteria <..\/api\/Phalcon_Mvc_Model_Criteria>` object that is friendly with IDE autocompleters.",
    "models_5104248a4f23183095b6a1e1bd83e503": "All the queries are internally handled as :doc:`PHQL <phql>` queries. PHQL is a high-level, object-oriented and SQL-like language. This language provide you more features to perform queries like joining other models, define groupings, add aggregations etc.",
    "models_be15026641c23ccd2162e2863a36cfa7": "Lastly, there is the findFirstBy<property-name>() method. This method expands on the \"findFirst()\" method mentioned earlier. It allows you to quickly perform a retrieval from a table by using the property name in the method itself and passing it a parameter that contains the data you want to search for in that column. An example is in order, so taking our Robots model mentioned earlier :",
    "models_c645e4e62b0b20d0f4c8ddb621caafda": "We have three properties to work with here. $id, $name and $price. So, let's say you want to retrieve the first record in the table with the name 'Terminator'. This could be written like so :",
    "models_8958e99220592664d45664886ce5861e": "Notice that we used 'Name' in the method call and passed the variable $name to it, which contains the name we are looking for in our table. Notice also that when we find a match with our query, all the other properties are available to us as well.",
    "models_21a896556ad0bf6560957107ee309ba3": "Model Resultsets",
    "models_a89d6f4cf9795b5cd99ce6ebe01324b0": "While findFirst() returns directly an instance of the called class (when there is data to be returned), the find() method returns a :doc:`Phalcon\\\\Mvc\\\\Model\\\\Resultset\\\\Simple <..\/api\/Phalcon_Mvc_Model_Resultset_Simple>`. This is an object that encapsulates all the functionality a resultset has like traversing, seeking specific records, counting, etc.",
    "models_5879a30ada37d9820f02d6bf881526b2": "These objects are more powerful than standard arrays. One of the greatest features of the :doc:`Phalcon\\\\Mvc\\\\Model\\\\Resultset <..\/api\/Phalcon_Mvc_Model_Resultset>` is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.",
    "models_7e08ae7d62fdc1b33551d43f9602812c": "Get all robots",
    "models_265d657995626c9d4f384ef11722eca8": "Traversing with a foreach",
    "models_d7da602c7908501e5ffe575acdf8f7e5": "Traversing with a while",
    "models_2c4f0d3e50ef2ca74fe3702595b073ba": "Count the resultset",
    "models_8374c526ffbe27df430472fd1f6b152d": "Alternative way to count the resultset",
    "models_03999b6dca3873a01a4b1bed75545c36": "Move the internal cursor to the third robot",
    "models_7bc4a21ddc2ad82cf1b38a888bf2b60f": "Access a robot by its position in the resultset",
    "models_61dce256ecb61e39d94f6fafab0735f2": "Check if there is a record in certain position",
    "models_f14d815df113ce11bee5066886764644": "Get the first record in the resultset",
    "models_9f3354bdfbb07b92c2feeaa0ea831464": "Get the last record",
    "models_a7eda3d33dae65bae1e3872506079451": "Phalcon's resultsets emulate scrollable cursors, you can get any row just by accessing its position, or seeking the internal pointer to a specific position. Note that some database systems don't support scrollable cursors, this forces to re-execute the query in order to rewind the cursor to the beginning and obtain the record at the requested position. Similarly, if a resultset is traversed several times, the query must be executed the same number of times.",
    "models_889722c4fb3fe2f1e51e29ccbcc6fdd8": "Storing large query results in memory could consume many resources, because of this, resultsets are obtained from the database in chunks of 32 rows reducing the need for re-execute the request in several cases also saving memory.",
    "models_04994a739d95a892e21c0460202fc507": "Note that resultsets can be serialized and stored in a cache backend. :doc:`Phalcon\\\\Cache <cache>` can help with that task. However, serializing data causes :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` to retrieve all the data from the database in an array, thus consuming more memory while this process takes place.",
    "models_a5f8f286659fba574398fbf5fdcb780e": "Query all records from model parts",
    "models_ba104fa9c42d242e1a6af55bfe40e610": "Store the resultset into a file",
    "models_4510ece94d63d9839b50bf9fd8372bec": "Get parts from file",
    "models_a0cbb885ba6e3dc7c363a116760a7f17": "Traverse the parts",
    "models_8e1663749196053db8cdfcf3c68e1dc1": "Filtering Resultsets",
    "models_86e0576c863b930319c4291189b39a6a": "The most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP using any resource that is not available in the database:",
    "models_7d19fb366e77789eb3890b49b6e2bad9": "Return only customers with a valid e-mail",
    "models_822e9e4f30d1487b43dff638b7288be9": "Binding Parameters",
    "models_a16930bc751cfe4911bc9b8184ca4fdc": "Bound parameters are also supported in :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>`. Although there is a minimal performance impact by using bound parameters, you are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and integer placeholders are supported. Binding parameters can simply be achieved as follows:",
    "models_295356ede93fa03dad388a6197c2196b": "Query robots binding parameters with string placeholders",
    "models_f08282b4d4b0e7306d53eb5879c0f358": "Parameters whose keys are the same as placeholders",
    "models_26adb21e78d7ecdd3bb31de5537f0bc1": "Perform the query",
    "models_a1747fdc994f4f858ac8d08f10f8592b": "Query robots binding parameters with integer placeholders",
    "models_3c37368c296399eb7e88a056573aab64": "Query robots binding parameters with both string and integer placeholders",
    "models_b84a0dd9d5714b34df69484d2d568a9f": "When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case \"1\" or \"2\" are considered strings and not numbers, so the placeholder could not be successfully replaced.",
    "models_1cb6fccdb0e82654bd3c3c0a38be3797": "Strings are automatically escaped using PDO_. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.",
    "models_97a0dfe468ae9ccab829d71b5218b74d": "Additionally you can set the parameter \"bindTypes\", this allows defining how the parameters should be bound according to its data type:",
    "models_d94d15bdc1ff8b0f14b506e232f9a43e": "Bind parameters",
    "models_1d5061aa7100726f1c7aa8d9692a03c4": "Casting Types",
    "models_3b77c94021fad5966050602759289f10": "Bound parameters are available for all query methods such as find() and findFirst() but also the calculation methods like count(), sum(), average() etc.",
    "models_e3367d0cb8544964094a208970c13117": "Initializing\/Preparing fetched records",
    "models_c78c4b381ccc68e2f068e656ecb1f40a": "May be the case that after obtaining a record from the database is necessary to initialise the data before being used by the rest of the application. You can implement the method 'afterFetch' in a model, this event will be executed just after create the instance and assign the data to it:",
    "models_680f042aa8c8e6a2c2c2871e00303b41": "Convert the array into a string",
    "models_1f219c33d76e9d0facb13cfd5fe8f691": "Convert the string to an array",
    "models_57ebcfcd3b49b156d81661da7aab7c33": "If you use getters\/setters instead of\/or together with public properties, you can initialize the field once it is accessed:",
    "models_0d9e9111f6bc1e0e1dc17a2561b5064f": "Relationships between Models",
    "models_4bc54330429e293995594ada1ed43cf9": "There are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many. The relationship may be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from each record in a uniform way.",
    "models_4ea603f3ea62e73772697db5f1650fb8": "Unidirectional relationships",
    "models_107da6f7c5aa5bb8a906812d1d01e5a4": "Unidirectional relations are those that are generated in relation to one another but not vice versa.",
    "models_095247fb250888acc0b22d0143826fef": "Bidirectional relations",
    "models_5f0a1887228b0c923e22a57c7e338501": "The bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.",
    "models_863202c90ac552ca019f552d58be5afd": "Defining relationships",
    "models_c7cb02eea3259c9b6054bb64ee43bff6": "In Phalcon, relationships must be defined in the initialize() method of a model. The methods belongsTo(), hasOne(), hasMany() and hasManyToMany() define the relationship between one or more fields from the current model to fields in another model. Each of these methods requires 3 parameters: local fields, referenced model, referenced fields.",
    "models_fe5294b94b279920eac0c40225f8ed4f": "The following schema shows 3 tables whose relations will serve us as an example regarding relationships:",
    "models_63f144f582941580c09c9b2538906f56": "Check the EER diagram to understand better the relations:",
    "models_2f75e58fb7e6bc12ae5bef57b20cc968": "The models with their relations could be implemented as follows:",
    "models_93833c12540f148aabe14953a12538e4": "The first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.",
    "models_52f9d1599bbfcb7cc9ae67dafe8d7c5c": "Many to many relationships require 3 models and define the attributes involved in the relationship:",
    "models_2c2bc35a9e8125c1fe4646eb067470d3": "Taking advantage of relationships",
    "models_0ba5ccfa2677fd8a79b241b5c04e4412": "When explicitly defining the relationships between models, it is easy to find related records for a particular record.",
    "models_eaef5f5c0096ddca74ee216d9f6d5486": "Phalcon uses the magic methods __set\/__get\/__call to store or retrieve related data using relationships.",
    "models_4f0d578a33ba4d8a00c99107737b68a5": "By accessing an attribute with the same name as the relationship will retrieve all its related record(s).",
    "models_37634994dd76aceff8cc62e7660f001e": "all the related records in RobotsParts",
    "models_23ce3b5c26d63c47189e358eb6a0c062": "Also, you can use a magic getter:",
    "models_52cf0d0467fe9114e378ef9752ff0b3b": "passing parameters",
    "models_a91c13b9f41ef7d5c56349cf70da6736": "If the called method has a \"get\" prefix :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` will return a findFirst()\/find() result. The following example compares retrieving related results with using magic methods and without:",
    "models_26a9f5f5d2a48a1772f7ec1683ec9af8": "Robots model has a 1-n (hasMany)",
    "models_e8edf474f27d462948b8b18e7efe17df": "relationship to RobotsParts then",
    "models_e8b7484473dbf1ac5ca48ed7c6589c4a": "Only parts that match conditions",
    "models_5cb44bdc8c5acee60dcbeb3a84e9074b": "Or using bound parameters",
    "models_60f3a49598ad9c89724ff31d05f76158": "RobotsParts model has a n-1 (belongsTo)",
    "models_7c5cfa3c28a89beb95ee67f2167a7e52": "Getting related records manually:",
    "models_322001a415014ca8eff038bc03561680": "relationship to RobotsParts, then",
    "models_7b6b7ee99bf2d2dc7a5f9a50fe0afa42": "The prefix \"get\" is used to find()\/findFirst() related records. Depending on the type of relation it will use 'find' or 'findFirst':",
    "models_1cd1930780e738c9a6c7e46b9329ef22": "You can also use \"count\" prefix to return an integer denoting the count of the related records:",
    "models_54e332a56dc132b3e61043f709d4f3db": "Aliasing Relationships",
    "models_10f4a34f73f5d711081cd02fbea0d570": "To explain better how aliases work, let's check the following example:",
    "models_c1c8d588fd78b55da43042ea6e0e8c53": "Table \"robots_similar\" has the function to define what robots are similar to others:",
    "models_f18297cdcc691c5743187e61076b9dce": "Both \"robots_id\" and \"similar_robots_id\" have a relation to the model Robots:",
    "models_39a3c3172d2e4e1980c335914c3e6c94": "A model that maps this table and its relationships is the following:",
    "models_c271c8392737faa49a1be3302c2b8689": "Since both relations point to the same model (Robots), obtain the records related to the relationship could not be clear:",
    "models_a4324525bbbe756f7c2058b85b8c4f17": "Returns the related record based on the column (robots_id)",
    "models_bb9996cf4ee81468968550efe88c2c7d": "Also as is a belongsTo it's only returning one record",
    "models_87a4e14fab9216e42cec72af533f2c34": "but the name 'getRobots' seems to imply that return more than one",
    "models_4586e0ef082b5df78af450b4d5824a94": "but, how to get the related record based on the column (similar_robots_id)",
    "models_f7ca57241c64cb4ec7f683044043b98b": "if both relationships have the same name?",
    "models_91c8cad15d031165dc93688f915cfc98": "The aliases allow us to rename both relationships to solve these problems:",
    "models_fb44b187803a7f753798591eae2e9c34": "With the aliasing we can get the related records easily:",
    "models_39856c93a5e5156f837d90a1fc59da3d": "Returns the related record based on the column (similar_robots_id)",
    "models_c0498d367be6f00cf53866b7a15650a9": "Magic Getters vs. Explicit methods",
    "models_61ea72907fef0cf5280b43a54ce12a13": "Most IDEs and editors with auto-completion capabilities can not infer the correct types when using magic getters, instead of use the magic getters you can optionally define those methods explicitly with the corresponding docblocks helping the IDE to produce a better auto-completion:",
    "models_b8ddd6c9fa9efe7f8b22d5ee64b4e038": "Virtual Foreign Keys",
    "models_ad089347bed015a469de37c65982646d": "By default, relationships do not act like database foreign keys, that is, if you try to insert\/update a value without having a valid value in the referenced model, Phalcon will not produce a validation message. You can modify this behavior by adding a fourth parameter when defining a relationship.",
    "models_2807669f80c008114b3d11ad29bad56e": "The RobotsPart model can be changed to demonstrate this feature:",
    "models_c4769cdcd3b3ddfbef7d6179ed1815aa": "If you alter a belongsTo() relationship to act as foreign key, it will validate that the values inserted\/updated on those fields have a valid value on the referenced model. Similarly, if a hasMany()\/hasOne() is altered it will validate that the records cannot be deleted if that record is used on a referenced model.",
    "models_390f3980d9010ee42c5db1e409646b00": "Cascade\/Restrict actions",
    "models_6d74d8a3eee3d85fb1e76211926aa2fb": "Relationships that act as virtual foreign keys by default restrict the creation\/update\/deletion of records to maintain the integrity of data:",
    "models_b52c5786f39bc338ec9a3f4758cb9cbf": "The above code set up to delete all the referenced records (parts) if the master record (robot) is deleted.",
    "models_c8243703df38120bbd35d539ca33d3a9": "Generating Calculations",
    "models_8f780a02e6339acff64e3f78b1e5fcf5": "Calculations (or aggregations) are helpers for commonly used functions of database systems such as COUNT, SUM, MAX, MIN or AVG. :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` allows to use these functions directly from the exposed methods.",
    "models_960fa28a7174efaf18899956c56050cf": "Count examples:",
    "models_8eff2fb5b476538a43fc570b4fcc9f84": "How many employees are?",
    "models_cc9f6c98548a5b9c1c3e9f912478c176": "How many different areas are assigned to employees?",
    "models_7401fc0cf3f05aa51ebaf6ff1677dc89": "How many employees are in the Testing area?",
    "models_e23af7315970cf6165ac1c9a2c28e5d3": "Count employees grouping results by their area",
    "models_9653a88cc1b5ebdcf5e2b9ba4a0d89b9": "Count employees grouping by their area and ordering the result by count",
    "models_b4df7af26d49273a9bba86f5f4e88793": "Avoid SQL injections using bound parameters",
    "models_4618d74d3fe8438c957047b340d64f9f": "Sum examples:",
    "models_e03121e9c09c30c2ce778a14db69b946": "How much are the salaries of all employees?",
    "models_8238beeb9435a210dcff925cdfe8a8ac": "How much are the salaries of all employees in the Sales area?",
    "models_4099511fa6c1d6d08506e81d986bf5b0": "Generate a grouping of the salaries of each area",
    "models_44d715b56c621684b25e81885815c045": "Generate a grouping of the salaries of each area ordering",
    "models_915ae8be0b495cfda0715d746b019424": "salaries from higher to lower",
    "models_a2b38ff9b1155040734f2bf3a05212c2": "Average examples:",
    "models_6be95309d8473a9a1029c83a2f8a7fea": "What is the average salary for all employees?",
    "models_0066aa381bcf5623295b342139748eee": "What is the average salary for the Sales's area employees?",
    "models_684946bc5648c219d794240b6b7dc740": "Max\/Min examples:",
    "models_e8998c1c727a1702b25a3bd2217ebf84": "What is the oldest age of all employees?",
    "models_c1ffe08178ab27d8d93adcd8a1dc7c10": "What is the oldest of employees from the Sales area?",
    "models_2c63cde73a51a506e08d3eaa8ec2096c": "What is the lowest salary of all employees?",
    "models_da300e626c96660279800817373be665": "Hydration Modes",
    "models_6d7c6eb4758655c54dc6990ff7f19123": "As mentioned above, resultsets are collections of complete objects, this means that every returned result is an object representing a row in the database. These objects can be modified and saved again to persistence:",
    "models_ca5554acc480307928ad818e385d7549": "Manipulating a resultset of complete objects",
    "models_1eb6ffebaa894cc85477ab4658ef7574": "Sometimes records are obtained only to be presented to a user in read-only mode, in these cases it may be useful to change the way in which records are represented to facilitate their handling. The strategy used to represent objects returned in a resultset is called 'hydration mode':",
    "models_0019ccf6219cda67bed6b40af0714e39": "Return every robot as an array",
    "models_658e3f6a02b314a0fe2ae851e9b85363": "Return every robot as an stdClass",
    "models_42c0b20a1762232fe05d204ce20a52d4": "Return every robot as a Robots instance",
    "models_cb3c4cbdce1e571a507dbbb9281a4af5": "Hydration mode can also be passed as a parameter of 'find':",
    "models_a7f6efdf628627cbfb0183f461cfcd29": "Creating Updating\/Records",
    "models_62ded37b7cefd67930177b264d24a9a1": "The method Phalcon\\\\Mvc\\\\Model::save() allows you to create\/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>`. For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be updated or created.",
    "models_c7e343496bcfc784c6263a56f00b407d": "Also the method executes associated validators, virtual foreign keys and events that are defined in the model:",
    "models_e123024286ad4cb9eb2b5d92b25fd734": "An array could be passed to \"save\" to avoid assign every column manually. Phalcon\\\\Mvc\\\\Model will check if there are setters implemented for the columns passed in the array giving priority to them instead of assign directly the values of the attributes:",
    "models_76fcd45612dc70788c0ca6177fb231f7": "Values assigned directly or via the array of attributes are escaped\/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:",
    "models_45391c2973b138766ea846d6d7d85c61": "You can set an additional parameter in 'save' to set a whitelist of fields that only must taken into account when doing the mass assignment:",
    "models_7d4b758e7334c310d6b7a126d7eedbdc": "Create\/Update with Confidence",
    "models_2e0f8969e5a5cf5d5c5674faf5409f74": "When an application has a lot of competition, we could be expecting create a record but it is actually updated. This could happen if we use Phalcon\\\\Mvc\\\\Model::save() to persist the records in the database. If we want to be absolutely sure that a record is created or updated, we can change the save() call with create() or update():",
    "models_c7fefc99b5694f422d636b5a64c270a6": "This record only must be created",
    "models_9afbc94d7c87924852bb6eaec4c24f2f": "These methods \"create\" and \"update\" also accept an array of values as parameter.",
    "models_47d10dbbf95de1e4e67a5f17a81c4370": "Auto-generated identity columns",
    "models_29c7ee3bdd564bd359523f21345ff7a8": "Some models may have identity columns. These columns usually are the primary key of the mapped table. :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` can recognize the identity column omitting it in the generated SQL INSERT, so the database system can generate an auto-generated value for it. Always after creating a record, the identity field will be registered with the value generated in the database system for it:",
    "models_d55994b62e51e018089e422de3aea43e": "serial columns like in PostgreSQL or auto_increment columns in the case of MySQL.",
    "models_34e756014c1e42ff9eec737ec2e292e9": "PostgreSQL uses sequences to generate auto-numeric values, by default, Phalcon tries to obtain the generated value from the sequence \"table_field_seq\", for example: robots_id_seq, if that sequence has a different name, the method \"getSequenceName\" needs to be implemented:",
    "models_e0035a0f5ffbb4f6d432b4f70697cf78": "Storing related records",
    "models_501eac663748a2ce8ff81a0ca4077ee9": "Magic properties can be used to store a records and its related properties:",
    "models_87c4ab8d15fb6563d8be4dcbacfbb8ed": "Create an artist",
    "models_d4e71e6c320568f69f633bede4df9f5d": "Create an album",
    "models_5e64e7adb598b372ffc3d64a0a5ed89a": "Assign the artist",
    "models_aa0b953f6d350a5577ebc11cfed71a1e": "Save both records",
    "models_47f31897cd3d97d3789b57c50d7dc10e": "Saving a record and its related records in a has-many relation:",
    "models_2c79df378328e8dd2cd1d1b7bb1c7b07": "Get an existing artist",
    "models_2c7b195f3afca1886184d62caaa41191": "Create a first song",
    "models_5792f06dbb1bb6ded00d1b3ef541a484": "Create a second song",
    "models_2b4b34687271d7f155fb2dbaccf58ad3": "Assign the songs array",
    "models_c77858c47a2afaedb836fa45d116e489": "Save the album + its songs",
    "models_9482868dc98e03953151f38dd8c07038": "Saving the album and the artist at the same time implicitly makes use of a transaction so if anything goes wrong with saving the related records, the parent will not be saved either. Messages are passed back to the user for information regarding any errors.",
    "models_d939a1c7ef3aa44a932cfff1b2ee1110": "Note: Adding related entities by overloading the following methods is not possible:  - Phalcon\\Mvc\\Model::beforeSave()  - Phalcon\\Mvc\\Model::beforeCreate()  - Phalcon\\Mvc\\Model::beforeUpdate()",
    "models_14fef3e904b2f9aa6116cf7656675e02": "You need to overload Phalcon\\Mvc\\Model::save() for this to work from within a model.",
    "models_39d425478bbbd8c190c1571d56968719": "Validation Messages",
    "models_c1d232b39fe05b959dd845b2db801665": ":doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert\/update processes.",
    "models_7c9973d06444177ad84e1c25a39a6b63": "Each message consists of an instance of the class :doc:`Phalcon\\\\Mvc\\\\Model\\\\Message <..\/api\/Phalcon_Mvc_Model_Message>`. The set of messages generated can be retrieved with the method getMessages(). Each message provides extended information like the field name that generated the message or the message type:",
    "models_f958e80e660f56d42517de25c94720b1": "The method getMessages() can be overridden in a model to replace\/translate the default messages generated automatically by the ORM:",
    "models_88dc8b91807ff4ba675e3c4d5fc6b7db": "Events and Events Manager",
    "models_490378dd5616a5b5dca102f7f4ba4b09": "Models allow you to implement events that will be thrown when performing an insert\/update\/delete. They help define business rules for a certain model. The following are the events supported by :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` and their order of execution:",
    "models_ffdc056a5ad04de3bf87e0e2bfb1cdb3": "Implementing Events in the Model's class",
    "models_4fba9529bed771a750169aea7fe11c01": "The easier way to make a model react to events is implement a method with the same name of the event in the model's class:",
    "models_3fa8d189cbd898ffa9232f5519462f06": "Events can be useful to assign values before performing an operation, for example:",
    "models_49f3de45257d0e5b7096556a30c385cb": "Set the creation date",
    "models_f74e28161b504a419d70d64f43d969de": "Set the modification date",
    "models_f11eaba96f0c61a573317f0a69292340": "Using a custom Events Manager",
    "models_1269794fb5e9ed3766ac39927a2fe7fa": "Additionally, this component is integrated with :doc:`Phalcon\\\\Events\\\\Manager <..\/api\/Phalcon_Events_Manager>`, this means we can create listeners that run when an event is triggered.",
    "models_7b4ffbc5f44152ae745312315447e233": "Attach an anonymous function as a listener for \"model\" events",
    "models_c9534309ad139e07a87ea7518e861695": "Attach the events manager to the event",
    "models_bd80e1f4bd54bb03b2cc233f99866b2d": "In the example given above, EventsManager only acts as a bridge between an object and a listener (the anonymous function). Events will be fired to the listener when 'robots' are saved:",
    "models_9dba0dfb3be69611c21dd8738e27213f": "If we want all objects created in our application use the same EventsManager, then we need to assign it to the Models Manager:",
    "models_8464ec16e7658d507e31c188e524c49d": "Registering the modelsManager service",
    "models_bc14603934930fe35354e4dcecb55c75": "Catch events produced by the Robots model",
    "models_c106c4e52bc599f6fe8708497906c4aa": "Setting a default EventsManager",
    "models_a99f116006a7e6f8e0beedf2fa1f7293": "If a listener returns false that will stop the operation that is executing currently.",
    "models_a2333fe1d4949c60e0ffa88a36ec8b24": "Implementing a Business Rule",
    "models_55a005b019c6e5cffa73b951673ab855": "When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.",
    "models_58acea561b884f8775c83234389a6c67": "We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.",
    "models_cca1ae2eb8ed215dc1a1202d65c9abf9": "The following example implements an event that validates the year cannot be smaller than 0 on update or insert:",
    "models_0d590ac8cf9976147c85986c173f0475": "Some events return false as an indication to stop the current operation. If an event doesn't return anything, :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` will assume a true value.",
    "models_53c9ef435efdc751976636021ca78ae8": "Validating Data Integrity",
    "models_8484829147088674434ff98d8df7f214": ":doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` provides several events to validate data and implement business rules. The special \"validation\" event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.",
    "models_1cc9ab87bdb41eb59d0ed209160c60d8": "The following example shows how to use it:",
    "models_284e191d54feb148b504b19e86595cd5": "The above example performs a validation using the built-in validator \"InclusionIn\". It checks the value of the field \"type\" in a domain list. If the value is not included in the method then the validator will fail and return false. The following built-in validators are available:",
    "models_84bbc78bf253737de49fbc641775a65f": "In addition to the built-in validators, you can create your own validators:",
    "models_52bc5373d71ac2fdd32cbb2d8ab1facd": "Adding the validator to a model:",
    "models_21b521505501d7d235cf8c4486f015dc": "The idea of creating validators is make them reusable between several models. A validator can also be as simple as:",
    "models_a5b8ba4670620d3d0495cd4b993c2c36": "Avoiding SQL injections",
    "models_93b20b51cdce173a1a9d2feb2f37e64d": "Every value assigned to a model attribute is escaped depending of its data type. A developer doesn't need to escape manually each value before storing it on the database. Phalcon uses internally the `bound parameters <http:\/\/php.net\/manual\/en\/pdostatement.bindparam.php>`_ capability provided by PDO to automatically escape every value to be stored in the database.",
    "models_3cbc5493ec1d1fced277a1876a1d5bf6": "If we use just PDO to store a record in a secure way, we need to write the following code:",
    "models_e270c4873b9061d820db4505f1102e90": "The good news is that Phalcon do this for you automatically:",
    "models_e7d653d41a47b75951d0301d92fae13e": "Skipping Columns",
    "models_52905496ae0f50797717b9709adf5134": "To tell Phalcon\\\\Mvc\\\\Model that always omits some fields in the creation and\/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:",
    "models_a6fafe677ab3a48d278aa87829b365c3": "Skips fields\/columns on both INSERT\/UPDATE operations",
    "models_9d5a1c3994f83675016b36e4b8718cb6": "Skips only when inserting",
    "models_fe8e2b615e1244280eeb6505979a1b3b": "Skips only when updating",
    "models_dff14ed91b9e1bfba3bbfd846b13c029": "This will ignore globally these fields on each INSERT\/UPDATE operation on the whole application. Forcing a default value can be done in the following way:",
    "models_85946bc9767c0ac502ac9327d1eda99e": "A callback also can be used to create a conditional assignment of automatic default values:",
    "models_eeb5861768cb1d8e1b83f34166ba75e3": "Dynamic Update",
    "models_cae7b7f779c605b98263207fc0c50b74": "SQL UPDATE statements are by default created with every column defined in the model (full all-field SQL update). You can change specific models to make dynamic updates, in this case, just the fields that had changed are used to create the final SQL statement.",
    "models_de37cceeaaf2862d1cfebbc7e0214218": "In some cases this could improve the performance by reducing the traffic between the application and the database server, this specially helps when the table has blob\/text fields:",
    "models_0dcecd441d09452dc45fa5fb8fdf84c9": "Deleting Records",
    "models_0e75de2f191dfee5ebf610adee2f593b": "The method Phalcon\\\\Mvc\\\\Model::delete() allows to delete a record. You can use it as follows:",
    "models_76bc4e0b0f94d49a3359b7b87d0e8082": "You can also delete many records by traversing a resultset with a foreach:",
    "models_1754d4c775f9d294061fd18347afd1a0": "The following events are available to define custom business rules that can be executed when a delete operation is performed:",
    "models_46fd4a379b90cb5f6446182c62871f6f": "With the above events can also define business rules in the models:",
    "models_9b8dadaae5e0186045cc25e173cc28e3": "Validation Failed Events",
    "models_1c5941aa841724d5c5c3b19995195e7b": "Another type of events are available when the data validation process finds any inconsistency:",
    "models_b9d973fddd00b0e7a636cdc2488b97c2": "Behaviors",
    "models_ba55633b90ce74fe56a1f26bc2caa70c": "Behaviors are shared conducts that several models may adopt in order to re-use code, the ORM provides an API to implement behaviors in your models. Also, you can use the events and callbacks as seen before as an alternative to implement Behaviors with more freedom.",
    "models_a4ae958a2c79dbebf8a92d103bddf65f": "A behavior must be added in the model initializer, a model can have zero or more behaviors:",
    "models_0eb0b021dd27e2aa85dba6af77dfbcf3": "The following built-in behaviors are provided by the framework:",
    "models_e7809539aa252eae6a52c0e6ae502cb6": "Timestampable",
    "models_bb8b7c604e76018faa85a3e26939e787": "This behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:",
    "models_4a76abb3c06b31460f75d83a5e479f77": "Each event can have its own options, 'field' is the name of the column that must be updated, if 'format' is a string it will be used as format of the PHP's function date_, format can also be an anonymous function providing you the free to generate any kind timestamp:",
    "models_46ad3d1c14e7ffc25f0de5834a23d3fc": "If the option 'format' is omitted a timestamp using the PHP's function time_, will be used.",
    "models_af281cbd0128f9b889a08e8e6a23414d": "SoftDelete",
    "models_0141a60aa91a8b35e1b87ed208a7cf3e": "This behavior can be used in the following way:",
    "models_125217bbbd6bc34b9459e8b4a85c4085": "This behavior accepts two options: 'field' and 'value', 'field' determines what field must be updated and 'value' the value to be deleted. Let's pretend the table 'users' has the following data:",
    "models_41be3c2f9af2dde83473639a1bd8743e": "If we delete any of the two records the status will be updated instead of delete the record:",
    "models_ca12e23cdec236f897708b9d47dda460": "The operation will result in the following data in the table:",
    "models_6cdd8eeb2c674a7ca7d8f638e3908bf5": "Note that you need to specify the deleted condition in your queries to effectively ignore them as deleted records, this behavior doesn't support that.",
    "models_0387f5f8f86514fd76635c5b996298a7": "Creating your own behaviors",
    "models_e524ed516361608aad5f4a6b0b2a3b29": "The ORM provides an API to create your own behaviors. A behavior must be a class implementing the :doc:`Phalcon\\\\Mvc\\\\Model\\\\BehaviorInterface <..\/api\/Phalcon_Mvc_Model_BehaviorInterface>` Also, Phalon\\\\Mvc\\\\Model\\\\Behavior provides most of the methods needed to ease the implementation of behaviors.",
    "models_fbefc8402833e62596c10cc8fd57186b": "The following behavior is an example, it implements the Blamable behavior which helps identify the user that is performed operations over a model:",
    "models_8b6993d9acf4981ac8565639dd87f7ba": "... get the current user from session",
    "models_af04cd320ff5f0ea264a3121bc535e71": "Store in a log the username - event type and primary key",
    "models_019293c46f20180b538e4829b6b2bc3f": "The former is a very simple behavior, but it illustrates how to create a behavior, now let's add this behavior to a model:",
    "models_e0cf9ab962c4202ec86581e7ab5d8a50": "A behavior is also capable of intercept missing methods on your models:",
    "models_3127822a2aeb877c75788660804e7791": "if the method is 'getSlug' convert the title",
    "models_0e6c82a5255904cf8a06e50df659fee6": "Call that method on a model that implements Sluggable returns a SEO friendly title:",
    "models_86902028f578be3733203f273cf005f9": "Using Traits as behaviors",
    "models_15225e9a2356f6a977351d29714d8c55": "Starting from PHP 5.4 you can use Traits_ to re-use code in your classes, this is another way to implement custom behaviors. The following trait implements a simple version of the Timestampable behavior:",
    "models_a2114c4340289628297fd7fe404775e0": "Then you can use it in your model as follows:",
    "models_70f40070204552b5f24220685f1af1d5": "Transactions",
    "models_523caad38dca5a70a0f0df8adfa5392b": "When a process performs multiple database operations, it is often that each step is completed successfully so that data integrity can be maintained. Transactions offer the ability to ensure that all database operations have been executed successfully before the data are committed to the database.",
    "models_e3bf59100a4c3abaa191650a6f5136e7": "Transactions in Phalcon allow you to commit all operations if they have been executed successfully or rollback all operations if something went wrong.",
    "models_088212b633bc7551876ebcd09049afd5": "Manual Transactions",
    "models_1baaab4adfb83d440c5b42201356136b": "If an application only uses one connection and the transactions aren't very complex, a transaction can be created by just moving the current connection to transaction mode, doing a rollback or commit if the operation is successfully or not:",
    "models_40fbff140ccf45a6aebbd09ef8b19fdf": "Implicit Transactions",
    "models_4a388701aafbd80f2477b8eeef2d0e8b": "Existing relationships can be used to store records and their related instances, this kind of operation implicitly creates a transaction to ensure that data are correctly stored:",
    "models_d6eb181c63ee8d0d3e27606f53733df5": "Creates an implicit transaction to store both records",
    "models_b343a6effee4b8a33a6d3cd345196c36": "Isolated Transactions",
    "models_cde7e7a38238e1e4337277766e8d4882": "Isolated transactions are executed in a new connection ensuring that all the generated SQL, virtual foreign key checks and business rules are isolated from the main connection. This kind of transaction requires a transaction manager that globally manages each transaction created ensuring that they are correctly rolled back\/committed before ending the request:",
    "models_6b0527dc3798bd2c93b12c0a6fcc6bf1": "Create a transaction manager",
    "models_8730d34bec19e8e359d185f197e47aae": "Request a transaction",
    "models_6d85bdbbb75057a7a08583e805395628": "Everything goes fine, let's commit the transaction",
    "models_684fdc9b8b05dee0da51a3d679f5a2f2": "Transactions can be used to delete many records in a consistent way:",
    "models_9c6ea68e7c35029ab8340fc9f2ba420a": "Get the robots will be deleted",
    "models_a58a68df43013bf991dfe4e4b223fe63": "Something goes wrong, we should to rollback the transaction",
    "models_8d689b69315df96ae544989ca3c68823": "Transactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a commit() or rollback() is performed. You can use the service container to create the global transaction manager for the entire application:",
    "models_e9fa44065ffbf68c6b093ede30a4e5fe": "Then access it from a controller or view:",
    "models_6ecfae4116e66dc373c485de06019744": "Obtain the TransactionsManager from the services container",
    "models_3a2d5fe857d8f9541136a124c2edec6c": "Or",
    "models_fa2202eae95bafde3a1d0f80d04c9ea0": "While a transaction is active, the transaction manager will always return the same transaction across the application.",
    "models_b06efa6d21e5b000c6aa2d0359cf548b": "Independent Column Mapping",
    "models_42bf3fa32fab55ab4a3ff67d1d6c7c68": "The ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. A change in the column map in the model will take care of the rest. For example:",
    "models_f3d1188d844ee3313ca095f96e2687af": "Keys are the real names in the table and",
    "models_25fd88df9256c457036b8c6ccf511e95": "the values their names in the application",
    "models_c64de284c082a2c913bd581410a8a31a": "Then you can use the new names naturally in your code:",
    "models_2986e6244ae5248fc2da3f6c053ab4d0": "Find a robot by its name",
    "models_c529a0ae3d36266db59f3c829f010f00": "Get robots ordered by type",
    "models_c57e823383479b57ac39125241d808e8": "Create a robot",
    "models_528e38143ba42116d5e4ec6c8c4ffb01": "Take into consideration the following the next when renaming your columns:",
    "models_a81d38db8ce5cca72da0e0eccfb305e5": "* References to attributes in relationships\/validators must use the new names * Refer the real column names will result in an exception by the ORM",
    "models_e5d5ce5eb3b45441404d550fba11b91b": "The independent column map allow you to:",
    "models_9236214ce4e3078457d3c40170b638f2": "* Write applications using your own conventions * Eliminate vendor prefixes\/suffixes in your code * Change column names without change your application code",
    "models_4fec5c7316082223510a448180b8dad4": "Operations over Resultsets",
    "models_1c044d7aaef440ba786bdc767bda9fd9": "If a resultset is composed of complete objects, the resultset is in the ability to perform operations on the records obtained in a simple manner:",
    "models_b77e6d4bf8411c1cc8b034cc2a02b89a": "Updating related records",
    "models_5f5266b4beb59809046580a6b9a8d954": "Instead of doing this:",
    "models_6b440a04add8ea312c29b3e07271d4d2": "you can do this:",
    "models_fb5daf83af9643f8a08851dd5131850b": "Update all the parts except these whose type is basic",
    "models_3a148cb8c3ab4930a041c5abd3aa9bdb": "Deleting related records",
    "models_0fb2d18df6dcf886494ce6de22d3c615": "Delete only whose stock is greater or equal than zero",
    "models_68ad0c2d8a1b1d369991023ff57d29b7": "Record Snapshots",
    "models_f88a41ead0b918d0234e87adadb8f2b8": "Specific models could be set to maintain a record snapshot when they\u2019re queried. You can use this feature to implement auditing or just to know what fields are changed according to the data queried from the persistence:",
    "models_d954f57ca241e469f69763172c6a9b69": "When activating this feature the application consumes a bit more of memory to keep track of the original values obtained from the persistence. In models that have this feature activated you can check what fields changed:",
    "models_af2ad94f6e64ec2420750c0b76ea5722": "Get a record from the database",
    "models_b0b01a0fefa818b1edb5bdc9770155fb": "Change a column",
    "models_4da47e07f5294b3af192e37566ca5503": "['name']",
    "models_b326b5062b2f0e69046810717534cb09": "true",
    "models_68934a3e9455fa72420237eb05902327": "false",
    "models_70374a9ca8493aae79270629e397bd00": "Models Meta-Data",
    "models_10a44ce65ee88b722fe348261f6527f9": "To speed up development :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` helps you to query fields and constraints from tables related to models. To achieve this, :doc:`Phalcon\\\\Mvc\\\\Model\\\\MetaData <..\/api\/Phalcon_Mvc_Model_MetaData>` is available to manage and cache table meta-data.",
    "models_a8a4fb9cdb3c450c510e3f24ce4f4253": "Sometimes it is necessary to get those attributes when working with models. You can get a meta-data instance as follows:",
    "models_923c421713a432036e3b787f7b957ac9": "Get Phalcon\\Mvc\\Model\\Metadata instance",
    "models_4880d88d5c6ff8820e22835d592966f7": "Get robots fields names",
    "models_7a76d480d3cafc2a67a1c4fa13b01789": "Get robots fields data types",
    "models_bfd71f3927f6c86526558f97925a5e8f": "Caching Meta-Data",
    "models_1440dbcf5f811b0cef85d8a3c4ee376a": "Once the application is in a production stage, it is not necessary to query the meta-data of the table from the database system each time you use the table. This could be done caching the meta-data using any of the following adapters:",
    "models_b6b0ff2517693e49750e1f7b648d0ba6": "As other ORM's dependencies, the metadata manager is requested from the services container:",
    "models_48c4ce1c4709155ccb67e65d2ee625ce": "Create a meta-data manager with APC",
    "models_55ca78ce00d3f2722f71be1173f6b3ce": "Meta-Data Strategies",
    "models_f8d1077a4feeb4ed05c90c606db3dc50": "As mentioned above the default strategy to obtain the model's meta-data is database introspection. In this strategy, the information schema is used to know the fields in a table, its primary key, nullable fields, data types, etc.",
    "models_b0c27aa05dcb7d1c9b7811f112ad76d8": "You can change the default meta-data introspection in the following way:",
    "models_a6e8f466f78ee591bd17ab565a03cc24": "Instantiate a meta-data adapter",
    "models_435b2b97d8852f4de4435b0662f1e971": "Set a custom meta-data introspection strategy",
    "models_fb54cb01fbccd42cd7a3b5b4b29c760f": "Database Introspection Strategy",
    "models_9d03c973b5fc84b79884ffb6e8dabef1": "This strategy doesn't require any customization and is implicitly used by all the meta-data adapters.",
    "models_ea3cffb13799871aefa54facf52160c4": "Annotations Strategy",
    "models_554bbb7c9e96dfc5bddb7298f9d0f42f": "This strategy makes use of :doc:`annotations <annotations>` to describe the columns in a model:",
    "models_2b2322672392dd3dea9fff06ede98691": "Annotations must be placed in properties that are mapped to columns in the mapped source. Properties without the @Column annotation are handled as simple class attributes.",
    "models_15b215324dfe32956e0c8e2aa256e0d9": "The following annotations are supported:",
    "models_18288132ec8f3aca3a23d0d6d61a616a": "The annotation @Column supports the following parameters:",
    "models_3fd9c7c7f0beb190f4f9394614ba70de": "The annotations strategy could be set up this way:",
    "models_6e1f5392a679a2a0f5f1116c0e86d1c6": "Set a custom meta-data database introspection",
    "models_e2245e0ad6ce4309e33f9319c2be6b9c": "Manual Meta-Data",
    "models_67cc3bdd8608baa67d5af54d1cb344e4": "Phalcon can obtain the metadata for each model automatically without the developer must set them manually using any of the introspection strategies presented above.",
    "models_16d0fb50c035c6c0bda4e4df25a95edc": "The developer also has the option of define the metadata manually. This strategy overrides any strategy set in the  meta-data manager. New columns added\/modified\/removed to\/from the mapped table must be added\/modified\/removed also for everything to work properly.",
    "models_cd5f7a9c3139a9a56bd0033b779d4cd7": "The following example shows how to define the meta-data manually:",
    "models_28dab1e1d1767233c25463a992f0b1d4": "Every column in the mapped table",
    "models_b5da62993c5209ad418f4de5e4a4df68": "Every column part of the primary key",
    "models_5d59fb8f300a540fca45964ed2531bfc": "Every column that isn't part of the primary key",
    "models_255fc2b28f319aea951b90720fe0995d": "Every column that doesn't allows null values",
    "models_4cd43e829c57883c03ee4d3d15d568f7": "Every column and their data types",
    "models_998be7a72bbf5c744723eab09c9847d1": "The columns that have numeric data types",
    "models_5f935649f26859885cb22260217a68a5": "The identity column, use boolean false if the model doesn't have",
    "models_4777c5d4a477e02489dde31350734ba2": "an identity column",
    "models_f211e4d989807e64d736aa0c4a7a08f4": "How every column must be bound\/casted",
    "models_d7f10e08f74aa352297ef297211a4775": "Fields that must be ignored from INSERT SQL statements",
    "models_5afce0b8bb54ca0aff5f871b7cf30342": "Fields that must be ignored from UPDATE SQL statements",
    "models_56d911cac7c77478592e074bfe9e0460": "Pointing to a different schema",
    "models_13738e1aa3deb47d73c26d2c1d47b25b": "If a model is mapped to a table that is in a different schemas\/databases than the default. You can use the getSchema method to define that:",
    "models_78d81576bf0a8efea929a760098c2829": "Setting multiple databases",
    "models_f762fdcf65979470be761b730b35105a": "In Phalcon, all models can belong to the same database connection or have an individual one. Actually, when :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` needs to connect to the database it requests the \"db\" service in the application's services container. You can overwrite this service setting it in the initialize method:",
    "models_719b0dc2e967ab897b04083c1a8a28a6": "This service returns a MySQL database",
    "models_a796f07dab600aaacedc16a2bc376c77": "This service returns a PostgreSQL database",
    "models_aae5be7f170ab14ae4df454c73a9fc63": "Then, in the Initialize method, we define the connection service for the model:",
    "models_b5ca7287e02d9aa96e5539d8c935b459": "But Phalcon offers you more flexibility, you can define the connection that must be used to 'read' and for 'write'. This is specially useful to balance the load to your databases implementing a master-slave architecture:",
    "models_d15589e70e20a93dc6fcba29c1570a2c": "The ORM also provides Horizontal Sharding facilities, by allowing you to implement a 'shard' selection according to the current query conditions:",
    "models_a6f9cb1ddd0720ae9f587d9b54ea9893": "Check if there is a 'where' clause in the select",
    "models_3d0deca9ed049c11d36dc2c657e59e57": "Choose the possible shard according to the conditions",
    "models_d7b311d89d5329dc2b956e8084f7e704": "Use a default shard",
    "models_6d5fa925b83f6aa8e7a9f922539e963e": "The method 'selectReadConnection' is called to choose the right connection, this method intercepts any new query executed:",
    "models_97bf04884de98c0f2516aba8c1820c0a": "Logging Low-Level SQL Statements",
    "models_b2e5d8f0af6d33cc287434310bacbfd3": "When using high-level abstraction components such as :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` to access a database, it is difficult to understand which statements are finally sent to the database system. :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` is supported internally by :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>`. :doc:`Phalcon\\\\Logger <..\/api\/Phalcon_Logger>` interacts with :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>`, providing logging capabilities on the database abstraction layer, thus allowing us to log SQL statements as they happen.",
    "models_d15114be04209e5fae3b603ffbbf13b1": "Listen all the database events",
    "models_b7efb4940856cd2cf63a1277b1523399": "Assign the eventsManager to the db adapter instance",
    "models_c98b4e61c4cf65ed96146755ecde763b": "As models access the default database connection, all SQL statements that are sent to the database system will be logged in the file:",
    "models_0088d92ba0746f6ca32168e18b0acd69": "As above, the file *app\/logs\/db.log* will contain something like this:",
    "models_f7dc7675831e283edd54b6e7e3501a7e": "Profiling SQL Statements",
    "models_8897cc2c3e448f5e8a8702db423ee722": "Thanks to :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>`, the underlying component of :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>`, it's possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. With this you can diagnose performance problems and to discover bottlenecks.",
    "models_ddf27bc91efad33c6b4ffec992cb261b": "Get a shared instance of the DbProfiler",
    "models_41c61785167c1dcf8f87ed63af11cddc": "Profiling some queries:",
    "models_7a89bc08139ccf8e34cdd183e25474ee": "Send some SQL statements to the database",
    "models_f0d818119815d52445837e3e63169003": "Get the generated profiles from the profiler",
    "models_6c6b6fc7cddd80dc56fd5605ee79726d": "Each generated profile contains the duration in milliseconds that each instruction takes to complete as well as the generated SQL statement.",
    "models_bf20ac68334be437956a656824fc4005": "Injecting services into Models",
    "models_4b0148a30c76d202c67e8fd1fd0e8642": "You may be required to access the application services within a model, the following example explains how to do that:",
    "models_208f521f101d584f8d276e843032b6c2": "Obtain the flash service from the DI container",
    "models_b15e59a4e29ae0f51c934d824558da35": "Show validation messages",
    "models_f651a3f30dbfb9e7186a28cc284e8ce5": "The \"notSave\" event is triggered every time that a \"create\" or \"update\" action fails. So we're flashing the validation messages obtaining the \"flash\" service from the DI container. By doing this, we don't have to print messages after each save.",
    "models_6b15f5193c9dc33fd43d3c2de2f7a3fe": "Disabling\/Enabling Features",
    "models_e90dafd6a6d737e3f11771c9e2615633": "In the ORM we have implemented a mechanism that allow you to enable\/disable specific features or options globally on the fly. According to how you use the ORM you can disable that you aren't using. These options can also be temporarily disabled if required:",
    "models_4a145c294a5e052cf51f7f37bac8dcc7": "The available options are:",
    "models_d3e54f7c04408d6d1a884897bca4169e": "Stand-Alone component",
    "models_4066bb86ebbf825c613167cf60cdd5bf": "Using :doc:`Phalcon\\\\Mvc\\\\Model <models>` in a stand-alone mode can be demonstrated below:"
}