{
    "odm_48cb4cd9833b519dd8ca15aa818b67a3": "ODM (Object-Document Mapper)",
    "odm_5cd77d38a46eb510f58924bb82a2a03b": "In addition to its ability to :doc:`map tables <models>` in relational databases, Phalcon can map documents from NoSQL databases. The ODM offers a CRUD functionality, events, validations among other services.",
    "odm_2643e1e9a609735194337259764e21a5": "Due to the absence of SQL queries and planners, NoSQL databases can see real improvements in performance using the Phalcon approach. Additionally, there are no SQL building reducing the possibility of SQL injections.",
    "odm_3d5d84c358d390d9d3d3e0fb17408a3a": "The following NoSQL databases are supported:",
    "odm_6fe6eff5591f581f3c7a8b8db8748e2d": "Creating Models",
    "odm_f27c3435f5c49bb60b13469960aad742": "A model is a class that extends from :doc:`Phalcon\\\\Mvc\\\\Collection <..\/api\/Phalcon_Mvc_Collection>`. It must be placed in the models directory. A model file must contain a single class; its class name should be in camel case notation:",
    "odm_711543eda4f95a18fd009d91e6579757": "By default model \"Robots\" will refer to the collection \"robots\". If you want to manually specify another name for the mapping collection, you can use the getSource() method:",
    "odm_c0d736e3c6dc4ae7feeaca79f5a3119c": "Understanding Documents To Objects",
    "odm_cef9c90442496b28c2daa4792f41dffe": "Every instance of a model represents a document in the collection. You can easily access collection data by reading object properties. For example, for a collection \"robots\" with the documents:",
    "odm_edc8f4356afdd63c106c2e25e75e3a4a": "Models in Namespaces",
    "odm_9438dc6649ff6249a00b13fcc1e94764": "Namespaces can be used to avoid class name collision. In this case it is necessary to indicate the name of the related collection using getSource:",
    "odm_a5e5e27596c85370e46e013c6edb33cd": "You could find a certain document by its id and then print its name:",
    "odm_a8dde2fd8d68b987095ea611515887ae": "Find record with _id = \"5087358f2d42b8c3d15ec4e2\"",
    "odm_b7bf91428c8ca18fb00a45b797a06be6": "Prints \"Bender\"",
    "odm_5593dab00434cec6bd7ff9eb6a5e4fa8": "Once the record is in memory, you can make modifications to its data and then save changes:",
    "odm_c2ebf821b71d105eb45a15fb41e418a2": "Setting a Connection",
    "odm_d4babb87a5be4b7ee76640eab4290f07": "Connections are retrieved from the services container. By default, Phalcon tries to find the connection in a service called \"mongo\":",
    "odm_8f607121278f2c25aae4f33cdcdb34b1": "Simple database connection to localhost",
    "odm_fb044871c011d2b2fd2a8988073dbb20": "Connecting to a domain socket, falling back to localhost connection",
    "odm_28b96daa6e0a3860a9649b6ab553ffbb": "\/tmp\/mongodb-27017.sock,localhost:27017\");",
    "odm_c395e1e396d378f13260b962ebc4d212": "Finding Documents",
    "odm_2b8c5d301342701b5cd4ff179ae6e9fd": "As :doc:`Phalcon\\\\Mvc\\\\Collection <..\/api\/Phalcon_Mvc_Collection>` relies on the Mongo PHP extension you have the same facilities to query documents and convert them transparently to model instances:",
    "odm_1499c1af63a87b3cd78713aeabe53fc5": "How many robots are there?",
    "odm_87078387b9e7d1df974b6134db85d304": "How many mechanical robots are there?",
    "odm_374f2d32d70da2192748c10713fd747c": "Get and print mechanical robots ordered by name upward",
    "odm_cdd7f2c6e82f62f45ef918ef6fbd7c85": "Get first 100 mechanical robots ordered by name",
    "odm_dca37eac806548a6c68a838011d99538": "You could also use the findFirst() method to get only the first record matching the given criteria:",
    "odm_2ccf3ab58d817b1f80e6e0471dc7c44b": "What's the first robot in robots collection?",
    "odm_ce2141ebed99ef973b51d2858b4cc2fb": "What's the first mechanical robot in robots collection?",
    "odm_1c335b086c81eff06a897a5fbfa8161e": "Both find() and findFirst() methods accept an associative array specifying the search criteria:",
    "odm_f6e55c84bc61550224f8718ddb8901aa": "First robot where type = \"mechanical\" and year = \"1999\"",
    "odm_3478af64cc93c0cbb71db7996450e769": "All virtual robots ordered by name downward",
    "odm_2b5aacc034cc35eb04d354e3f362416d": "The available query options are:",
    "odm_22afe60a1f96737ce439e64ec9eb6978": "If you have experience with SQL databases, you may want to check the `SQL to Mongo Mapping Chart`_.",
    "odm_0c496866e3b7ef5ccb7d7b86d29300ac": "Aggregations",
    "odm_3caf9d464b54373a7674873bd5475df2": "A model can return calculations using `aggregation framework`_ provided by Mongo. The aggregated values are calculate without having to use MapReduce. With this option is easy perform tasks such as totaling or averaging field values:",
    "odm_a7f6efdf628627cbfb0183f461cfcd29": "Creating Updating\/Records",
    "odm_3b001039ec2a5a2213110c9fac9e57a5": "The method Phalcon\\\\Mvc\\\\Collection::save() allows you to create\/update documents according to whether they already exist in the collection associated with a model. The 'save' method is called internally by the create and update methods of :doc:`Phalcon\\\\Mvc\\\\Collection <..\/api\/Phalcon_Mvc_Collection>`.",
    "odm_3985ac741064a84b198fbfb559b38e0a": "Also the method executes associated validators and events that are defined in the model:",
    "odm_e27841ee99e14fc6519e0db9d17c2333": "The \"_id\" property is automatically updated with the MongoId_ object created by the driver:",
    "odm_39d425478bbbd8c190c1571d56968719": "Validation Messages",
    "odm_6f54fffd794d508feef234f7f943ce91": ":doc:`Phalcon\\\\Mvc\\\\Collection <..\/api\/Phalcon_Mvc_Collection>` has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert\/update processes.",
    "odm_7c9973d06444177ad84e1c25a39a6b63": "Each message consists of an instance of the class :doc:`Phalcon\\\\Mvc\\\\Model\\\\Message <..\/api\/Phalcon_Mvc_Model_Message>`. The set of messages generated can be retrieved with the method getMessages(). Each message provides extended information like the field name that generated the message or the message type:",
    "odm_291df405bc7e94cd5137b3f35777fe55": "Validation Events and Events Manager",
    "odm_b82342dd6696ebd5e04869ea5399cf89": "Models allow you to implement events that will be thrown when performing an insert or update. They help define business rules for a certain model. The following are the events supported by :doc:`Phalcon\\\\Mvc\\\\Collection <..\/api\/Phalcon_Mvc_Collection>` and their order of execution:",
    "odm_8634db265f5cadee561f9981abadd4a3": "To make a model to react to an event, we must to implement a method with the same name of the event:",
    "odm_3fa8d189cbd898ffa9232f5519462f06": "Events can be useful to assign values before performing an operation, for example:",
    "odm_49f3de45257d0e5b7096556a30c385cb": "Set the creation date",
    "odm_f74e28161b504a419d70d64f43d969de": "Set the modification date",
    "odm_2556c223454d29db0e8dd8f903b797bf": "Additionally, this component is integrated with :doc:`Phalcon\\\\Events\\\\Manager <events>`, this means we can create listeners that run when an event is triggered.",
    "odm_7b4ffbc5f44152ae745312315447e233": "Attach an anonymous function as a listener for \"model\" events",
    "odm_f9081cbced23976e340a4dd7d1c9137a": "In the example given above the EventsManager only acted as a bridge between an object and a listener (the anonymous function). If we want all objects created in our application use the same EventsManager, then we need to assign this to the Models Manager:",
    "odm_32c6165efcca9e50e36b5db22a9cf784": "Registering the collectionManager service",
    "odm_c106c4e52bc599f6fe8708497906c4aa": "Setting a default EventsManager",
    "odm_a2333fe1d4949c60e0ffa88a36ec8b24": "Implementing a Business Rule",
    "odm_55a005b019c6e5cffa73b951673ab855": "When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.",
    "odm_58acea561b884f8775c83234389a6c67": "We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.",
    "odm_cca1ae2eb8ed215dc1a1202d65c9abf9": "The following example implements an event that validates the year cannot be smaller than 0 on update or insert:",
    "odm_ea5b9392a3d91ff90e9edf5c28e6b3b9": "Some events return false as an indication to stop the current operation. If an event doesn't return anything, :doc:`Phalcon\\\\Mvc\\\\Collection <..\/api\/Phalcon_Mvc_Collection>` will assume a true value.",
    "odm_53c9ef435efdc751976636021ca78ae8": "Validating Data Integrity",
    "odm_c3dc434cabb06d604424dcc15b04874e": ":doc:`Phalcon\\\\Mvc\\\\Collection <..\/api\/Phalcon_Mvc_Collection>` provides several events to validate data and implement business rules. The special \"validation\" event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.",
    "odm_1cc9ab87bdb41eb59d0ed209160c60d8": "The following example shows how to use it:",
    "odm_6fc5673ab45b31b06590374c8a04678a": "The example given above performs a validation using the built-in validator \"InclusionIn\". It checks the value of the field \"type\" in a domain list. If the value is not included in the method, then the validator will fail and return false. The following built-in validators are available:",
    "odm_84bbc78bf253737de49fbc641775a65f": "In addition to the built-in validators, you can create your own validators:",
    "odm_52bc5373d71ac2fdd32cbb2d8ab1facd": "Adding the validator to a model:",
    "odm_54b18d3c6c9a0bde772d9da50d583189": "The idea of creating validators is make them reusable across several models. A validator can also be as simple as:",
    "odm_0dcecd441d09452dc45fa5fb8fdf84c9": "Deleting Records",
    "odm_40af205b9a04743ad351275a69f4b65a": "The method Phalcon\\\\Mvc\\\\Collection::delete() allows to delete a document. You can use it as follows:",
    "odm_99549cf17570de7a53de04a9b45de1bc": "You can also delete many documents by traversing a resultset with a foreach:",
    "odm_1754d4c775f9d294061fd18347afd1a0": "The following events are available to define custom business rules that can be executed when a delete operation is performed:",
    "odm_9b8dadaae5e0186045cc25e173cc28e3": "Validation Failed Events",
    "odm_e5566c1a40baf6c9892dc4174579074f": "Another type of events is available when the data validation process finds any inconsistency:",
    "odm_8198f64c5bcb74146e7192fa3f9a5a40": "Implicit Ids vs. User Primary Keys",
    "odm_bc3fa5701dfa4336c5777693f4cfb7c6": "By default Phalcon\\\\Mvc\\\\Collection assumes that the _id attribute is automatically generated using MongoIds_. If a model uses custom primary keys this behavior can be overridden:",
    "odm_78d81576bf0a8efea929a760098c2829": "Setting multiple databases",
    "odm_ca96fd64131e176aed89c1b30c2e062e": "In Phalcon, all models can belong to the same database connection or have an individual one. Actually, when :doc:`Phalcon\\\\Mvc\\\\Collection <..\/api\/Phalcon_Mvc_Collection>` needs to connect to the database it requests the \"mongo\" service in the application's services container. You can overwrite this service setting it in the initialize method:",
    "odm_30cd4ac5551309dc7c0bc54a17b89201": "This service returns a mongo database at 192.168.1.100",
    "odm_cd6caf91a67feb30bef84aceec28f05c": "scott:nekhen@192.168.1.100\");",
    "odm_d196fbb3e7afe012a3c3eae42ad22c26": "This service returns a mongo database at localhost",
    "odm_45be5a774ce4af6706f11107de0776ce": "localhost\");",
    "odm_aae5be7f170ab14ae4df454c73a9fc63": "Then, in the Initialize method, we define the connection service for the model:",
    "odm_bf20ac68334be437956a656824fc4005": "Injecting services into Models",
    "odm_4b0148a30c76d202c67e8fd1fd0e8642": "You may be required to access the application services within a model, the following example explains how to do that:",
    "odm_208f521f101d584f8d276e843032b6c2": "Obtain the flash service from the DI container",
    "odm_b15e59a4e29ae0f51c934d824558da35": "Show validation messages",
    "odm_7b6fb7c569102e80d110f55f0042fe72": "The \"notSave\" event is triggered whenever a \"creating\" or \"updating\" action fails. We're flashing the validation messages obtaining the \"flash\" service from the DI container. By doing this, we don't have to print messages after each saving."
}