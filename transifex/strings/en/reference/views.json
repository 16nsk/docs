{
    "views_7a9935583e6231cd508cd510f32d5668": "Using Views",
    "views_ef03b15f3a9b49a6b4bb80a813368996": "Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.",
    "views_17d77a719ddbd45d2f4bbc7715716450": "The :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` and :doc:`Phalcon\\\\Mvc\\\\View\\\\Simple <..\/api\/Phalcon_Mvc_View_Simple>` are responsible for the managing the view layer of your MVC application.",
    "views_003b14d6a910d6e7ddfee381215bb477": "Integrating Views with Controllers",
    "views_dab1c1ef07dda71358c3a6ef720f6bd3": "Phalcon automatically passes the execution to the view component as soon as a particular controller has completed its cycle. The view component will look in the views folder for a folder named as the same name of the last controller executed and then for a file named as the last action executed. For instance, if a request is made to the URL *http:\/\/127.0.0.1\/blog\/posts\/show\/301*, Phalcon will parse the URL as follows:",
    "views_1c93242edb5cbc8541a88534f9e9af2b": "The dispatcher will look for a \"PostsController\" and its action \"showAction\". A simple controller file for this example:",
    "views_9470bcb7969c37437876c883f4ccbf2e": "Pass the $postId parameter to the view",
    "views_13c164b379d9671d82a101615ab15151": "The setVar allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the $postId parameter to the respective view template.",
    "views_f529f7a38f66822c201c7a2c549408ec": "Hierarchical Rendering",
    "views_2f21f1561bbd4020a45d46f76fefd9aa": ":doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` supports a hierarchy of files and is the default component for view rendering in Phalcon. This hierarchy allows for common layout points (commonly used views), as well as controller named folders defining respective view templates.",
    "views_177194bd199b8ca419afc6285ed8638b": "This component uses by default PHP itself as the template engine, therefore views should have the .phtml extension. If the views directory is  *app\/views* then view component will find automatically for these 3 view files.",
    "views_40c229f1a7c8b8128422cb417c95ca94": "You are not required to implement all of the files mentioned above. :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` will simply move to the next view level in the hierarchy of files. If all three view files are implemented, they will be processed as follows:",
    "views_b321993985d76a08d546f9a7901b3c6d": "Note the lines where the method *$this->getContent()* was called. This method instructs :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` on where to inject the contents of the previous view executed in the hierarchy. For the example above, the output will be:",
    "views_700f6830c6aa8391f780e3bcb9dae968": "The generated HTML by the request will be:",
    "views_10b460a3de8edd71111332979572dd63": "Using Templates",
    "views_702573dde40111cb422cdded5cac3d40": "Templates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.",
    "views_898645782f156716701c064f59d9f5d9": "The final output will be the following:",
    "views_a4fd48f24a2c518d5b180c6a6d4a79d1": "Control Rendering Levels",
    "views_21a08cde76073183153e0c02dc43cf90": "As seen above, :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` supports a view hierarchy. You might need to control the level of rendering produced by the view component. The method Phalcon\\Mvc\\\\View::setRenderLevel() offers this functionality.",
    "views_d356d43561f53deaf77231c50250ff8d": "This method can be invoked from the controller or from a superior view layer to interfere with the rendering process.",
    "views_69556848484583057eaea03c03fb80ad": "This is an Ajax response so it doesn't generate any kind of view",
    "views_ccd904c46c82c80680ca9c9d083b2c26": "Shows only the view related to the action",
    "views_0b574a66e81e62ab465902f178ed6a92": "The available render levels are:",
    "views_9ff639be8370b38960cba777a5babc2e": "Disabling render levels",
    "views_31dd34b13e62e822e96a8dc3d89402f7": "You can permanently or temporarily disable render levels. A level could be permanently disabled if it isn't used at all in the whole application:",
    "views_8a19e228d9648c03f52e155849ccb474": "Disable several levels",
    "views_c857045014ddf4562dba50c87b7c7389": "Or disable temporarily in some part of the application:",
    "views_086c3b4119cecbc37ccd78bb3629dd47": "Picking Views",
    "views_c6e2d02b8e6136be2851ff89c37f992a": "As mentioned above, when :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` is managed by :doc:`Phalcon\\\\Mvc\\\\Application <..\/api\/Phalcon_Mvc_Application>` the view rendered is the one related with the last controller and action executed. You could override this by using the Phalcon\\\\Mvc\\\\View::pick() method:",
    "views_6be201e49f95681b28b4b8caebe8039d": "Pick \"views-dir\/products\/search\" as view to render",
    "views_3027740efabd889a595106ce8345eb46": "Pick \"views-dir\/products\/list\" as view to render",
    "views_0efce5c37e4d187ce85e1c900ab2b4ab": "Disabling the view",
    "views_29f0d82a073cc35519b6e8961d07c490": "If your controller doesn't produce any output in the view (or not even have one) you may disable the view component avoiding unnecessary processing:",
    "views_71390553b9d22d273547f8c8bd331230": "Close session",
    "views_ba4993bcf124a622dbc56d4ec4e985c1": "An HTTP Redirect",
    "views_5cd03e89f27efcddc38775afcc436058": "Disable the view to avoid rendering",
    "views_3cb08bf1a7d4bac0f47363c79fa3be2c": "You can return a 'response' object to avoid disable the view manually:",
    "views_e3a9349e409d158182f3e861c8e8e012": "Simple Rendering",
    "views_f35015ff07641703b167a1739b147a02": ":doc:`Phalcon\\\\Mvc\\\\View\\\\Simple <..\/api\/Phalcon_Mvc_View_Simple>` is an alternative component to :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>`. It keeps most of the philosophy of :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` but lacks of a hierarchy of files which is, in fact, the main feature of its counterpart.",
    "views_c914389eac07b146045365bfe9b43ae6": "This component allows the developer to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as :doc:`Volt <volt>` and others.",
    "views_abf8ed7d7ae41822d01a13c9c81be2da": "The default component must be replaced in the service container:",
    "views_ebd95f0288cd6070a75a3a30a7dec279": "Automatic rendering must be disabled in :doc:`Phalcon\\\\Mvc\\\\Application <applications>` (if needed):",
    "views_256b39b2ea54d89f31a0cd758b713df6": "To render a view is necessary to call the render method explicitly indicating the relative path to the view you want to display:",
    "views_5c4407c96cb0f2eecce688cab8d1ca03": "Render 'views-dir\/index.phtml'",
    "views_0f7b4bbca2c93378a1aa7cf98e9b2cf7": "Render 'views-dir\/posts\/show.phtml'",
    "views_79265c8524e7b5114cd5e687af08b4d0": "Render 'views-dir\/index.phtml' passing variables",
    "views_89c608e63ddbc3945c96da96dc91d96b": "Render 'views-dir\/posts\/show.phtml' passing variables",
    "views_83809746bd6d1d7960195e86f68c8da8": "Using Partials",
    "views_75f86de4abb898efbb5e31d807256244": "Partial templates are another way of breaking the rendering process into simpler more manageable chunks that can be reused by different parts of the application. With a partial, you can move the code for rendering a particular piece of a response to its own file.",
    "views_f71fd72a447e6a2ffb2643169ff2ecfb": "One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that your code can be more easily understood. For example, you might have a view that looks like this:",
    "views_67c57e6e7f34e628e2f23b32b066d174": "Method partial() does accept a second parameter as an array of variables\/parameters that only will exists in the scope of the partial:",
    "views_fbe970c3f88ead32c74db6ae1f24455c": "Transfer values from the controller to views",
    "views_11f4881c15938974d44b6e7514313340": ":doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` is available in each controller using the view variable ($this->view). You can use that object to set variables directly to the view from a controller action by using the setVar() method.",
    "views_65b786df8771cf9936638d9359806813": "Pass all the posts to the views",
    "views_d00977d07ccc6a00491968a1b998ed50": "Using the magic setter",
    "views_ba577bfcc4105ad93b10817126a7fce8": "Passing more than one variable at the same time",
    "views_5b0db7a17988863f0629d6ef359a5120": "A variable with the name of the first parameter of setVar() will be created in the view, ready to be used. The variable can be of any type, from a simple string, integer etc. variable to a more complex structure such as array, collection etc.",
    "views_9b5dfc6e03f2e4c7ce50d991756ca24f": "Using models in the view layer",
    "views_712a47a1ca2d73af8f82fe973cc57808": "Application models are always available at the view layer. The :doc:`Phalcon\\\\Loader <..\/api\/Phalcon_Loader>` will instantiate them at runtime automatically:",
    "views_32d287c9930a183a4f900372280abba6": "Although you may perform model manipulation operations such as insert() or update() in the view layer, it is not recommended since it is not possible to forward the execution flow to another controller in the case of an error or an exception.",
    "views_e2809b8367f23b279052a0c57a34b5ac": "Caching View Fragments",
    "views_b2c5981e85b422752e6f5a8234e49b37": "Sometimes when you develop dynamic websites and some areas of them are not updated very often, the output is exactly the same between requests. :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` offers caching a part or the whole rendered output to increase performance.",
    "views_a18793af605d23cb8e61ce44de8f6524": ":doc:`Phalcon\\\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` integrates with :doc:`Phalcon\\\\Cache <cache>` to provide an easier way to cache output fragments. You could manually set the cache handler or set a global handler:",
    "views_9aae4a6bf5e94dfa08a45a805e449b34": "Cache the view using the default settings",
    "views_3f06ec587eeeb185b749837fa4e46e18": "Cache this view for 1 hour",
    "views_78ca43a465c9e94695d57562ffb8c505": "Cache this view for 1 day with the key \"resume-cache\"",
    "views_38213376f90ef4d88c04f2ac0c0edc5f": "Passing a custom service",
    "views_f090ddab8a4c1433924b1b348ef399d1": "When we do not define a key to the cache, the component automatically creates one doing a md5_ to view name is currently rendered. It is a good practice to define a key for each action so you can easily identify the cache associated with each view.",
    "views_f888bb1a09ced9103b2fa1bf171f4eeb": "When the View component needs to cache something it will request a cache service to the services container. The service name convention for this service is \"viewCache\":",
    "views_fa2501fd9d459e571d983c8ef7bb5457": "Set the views cache service",
    "views_83b746e3e149c65f5d387ee018ce18e1": "Cache data for one day by default",
    "views_27c9c860a0e993fc9cd8fe1f98c2dd13": "Memcached connection settings",
    "views_5594ea8d99fb14da5c5c94f61150a4f0": "When using view caching is also useful to prevent that controllers perform the processes that produce the data to be displayed in the views.",
    "views_789fb11f699927f5cbb50cddddfc9227": "To achieve this we must identify uniquely each cache with a key. First we verify that the cache does not exist or has expired to make the calculations\/queries to display data in the view:",
    "views_f4122bc44873ef6d1c814a89bb4e7875": "Check whether the cache with key \"downloads\" exists or has expired",
    "views_01427910082957d63f852a031133d0e4": "Query the latest downloads",
    "views_f800c653d3ea4100de3ff811ebeea38e": "Enable the cache with the same key \"downloads\"",
    "views_9d7f5c5fad64a539b7d9e2f14b189916": "The `PHP alternative site`_ is an example of implementing the caching of fragments.",
    "views_6e5a69a8dd70f8d2cd5e2ae15b313263": "Template Engines",
    "views_8436fbc2a35e8ace44ce7683ffff75cb": "Template Engines helps designers to create views without use a complicated syntax. Phalcon includes a powerful and fast templating engine called :doc:`Volt <volt>`.",
    "views_4889731af0682a0ff001941c53287b7f": "Additionally, :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` allows you to use other template engines instead of plain PHP or Volt.",
    "views_d30b9918e0dd94497b8f8e10fa02a03e": "Using a different template engine, usually requires complex text parsing using external PHP libraries in order to generate the final output for the user. This usually increases the number of resources that your application are using.",
    "views_033f4b37a8ab437c02d21fb2b200c4d9": "If an external template engine is used, :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` provides exactly the same view hierarchy and it's still possible to access the API inside these templates with a little more effort.",
    "views_36a82d83487a4e3f40f2064c8ea7324f": "This component uses adapters, these help Phalcon to speak with those external template engines in a unified way, let's see how to do that integration.",
    "views_39112bd6a8127139d0a52a91360e0188": "Creating your own Template Engine Adapter",
    "views_51eeef9ead467502cae8fc7f197f246a": "There are many template engines, which you might want to integrate or create one of your own. The first step to start using an external template engine is create an adapter for it.",
    "views_06f80f0eb563b269df8884b213cd7994": "A template engine adapter is a class that acts as bridge between :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` and the template engine itself. Usually it only needs two methods implemented: __construct() and render(). The first one receives the :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` instance that creates the engine adapter and the DI container used by the application.",
    "views_3e008dba1ca8514936e032d7fada3007": "The method render() accepts an absolute path to the view file and the view parameters set using $this->view->setVar(). You could read or require it when it's necessary.",
    "views_553f0c688023f26caf45bf60b1e83a13": "Initialize here the adapter",
    "views_4170a1870bc2b6a842ac64d63e928050": "Access view",
    "views_4d5b9ed94de45affdd2318cf390fed58": "Access options",
    "views_3ab78eb524cbb6e088e6865f6b3e2729": "Render the view",
    "views_cfdbf34effaf9927896f7e8da605aba4": "Changing the Template Engine",
    "views_1979a43a78910f5cc07142f4eed9a1bd": "You can replace or add more a template engine from the controller as follows:",
    "views_9b9d2cb5832b0ac2b118526529c296a7": "Set the engine",
    "views_a70af6f6b3d19f6e1544ec417a5394bf": "Using more than one template engine",
    "views_474201dbdde6d46b8d104b4ed325697e": "You can replace the template engine completely or use more than one template engine at the same time. The method \\Phalcon\\\\Mvc\\\\View::registerEngines() accepts an array containing data that define the template engines. The key of each engine is an extension that aids in distinguishing one from another. Template files related to the particular engine must have those extensions.",
    "views_0cc44f316c50b5aed136241cb094037e": "The order that the template engines are defined with \\Phalcon\\\\Mvc\\\\View::registerEngines() defines the relevance of execution. If :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` finds two views with the same name but different extensions, it will only render the first one.",
    "views_eed56c16c3fd884a52e645a2764469d8": "If you want to register a template engine or a set of them for each request in the application. You could register it when the view service is created:",
    "views_c9c2415fac9c89e078730c5f75953e9b": "Setting up the view component",
    "views_dc195d80c7c8b4f181529b79237443e5": "A trailing directory separator is required",
    "views_7649f99d9c471d16ff7db8f1c71fd7c0": "There are adapters available for several template engines on the `Phalcon Incubator <https:\/\/github.com\/phalcon\/incubator\/tree\/master\/Library\/Phalcon\/Mvc\/View\/Engine>`_",
    "views_c7ee7944a5606c39612539a861cac009": "Injecting services in View",
    "views_2ec521a259f67d7ede50c9df2312ec77": "Every view executed is included inside a :doc:`Phalcon\\\\DI\\\\Injectable <..\/api\/Phalcon_DI_Injectable>` instance, providing easy access to the application's service container.",
    "views_d0a80f72e3b2fa16960b55573362eb7d": "The following example shows how to write a jQuery `ajax request`_ using a url with the framework conventions. The service \"url\" (usually :doc:`Phalcon\\\\Mvc\\\\Url <url>`) is injected in the view by accessing a property with the same name:",
    "views_d3e54f7c04408d6d1a884897bca4169e": "Stand-Alone Component",
    "views_3d46da924d710a41a1e398ffcde2234c": "All the components in Phalcon can be used as *glue* components individually because they are loosely coupled to each other:",
    "views_55c38e733242b57b98320ed2e01d60ed": "Using :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` in a stand-alone mode can be demonstrated below",
    "views_486255d3cb9e7c09557cb1337a0b2d33": "Passing variables to the views, these will be created as local variables",
    "views_59ce96966e8ea7b3f1e65bfb4395322a": "Start the output buffering",
    "views_171c6f9e1616223878805d804ea397f3": "Render all the view hierarchy related to the view products\/list.phtml",
    "views_84a791cb36fb4c7899a1a066d193b292": "Finish the output buffering",
    "views_f13eba0f4918c9a0bca147e70fe0279c": "A short syntax is also available:",
    "views_c1ca4e716d9a88ebcca8f7db7cdd0933": "Set any extra options here",
    "views_34a10d520dd11d9adf54cd9c921f0964": "Using :doc:`Phalcon\\\\Mvc\\\\View\\\\Simple <..\/api\/Phalcon_Mvc_View_Simple>` in a stand-alone mode can be demonstrated below:",
    "views_e46d27df223d959f57061b90fcdefdca": "Render a view and return its contents as a string",
    "views_d4ed850f254501a2e7c4eacdb100f76d": "Render a view passing parameters",
    "views_296b9f4f4f7b51885c71b3592af71235": "View Events",
    "views_c6a4ae6de7ed5a14215f3044e885e5dd": ":doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>` and :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View_Simple>` are able to send events to an :doc:`EventsManager <events>` if it is present. Events are triggered using the type \"view\". Some events when returning boolean false could stop the active operation. The following events are supported:",
    "views_4eb434eb37be7b4a57c178fa4af88c76": "The following example demonstrates how to attach listeners to this component:",
    "views_1d55db2b24319ae2941d54d5b8d5d4a5": "Create an events manager",
    "views_188200bd4a772c505a84a79b119226ca": "Attach a listener for type \"view\"",
    "views_bda634f6269a3a06dd0a40fb4d7ae993": "Bind the eventsManager to the view component",
    "views_1ca1a71f4f5f276064f24f98f4bbcd2e": "The following example shows how to create a plugin that clean\/repair the HTML produced by the render process using Tidy_:"
}