{
    "controllers_25b1751e51f4db9e5adb7a2a78f803ca": "Using Controllers",
    "controllers_bf4b085e9456222c0343205ea7a36664": "The controllers provide a number of methods that are called actions. Actions are methods on a controller that handle requests. By default all public methods on a controller map to actions and are accessible by an URL. Actions are responsible for interpreting the request and creating the response. Usually responses are in the form of a rendered view, but there are other ways to create responses as well.",
    "controllers_ed9480fd88e3f7f8cb2bba7f34ebb212": "For instance, when you access an URL like this: http:\/\/localhost\/blog\/posts\/show\/2012\/the-post-title Phalcon by default will decompose each part like this:",
    "controllers_e367e952dc3cb43e7fc9fe886a1ddb50": "In this case, the PostsController will handle this request. There is no a special location to put controllers in an application, they could be loaded using :doc:`autoloaders <loader>`, so you're free to organize your controllers as you need.",
    "controllers_5459cfd2ccc38bd6690cb33742588851": "Controllers must have the suffix \"Controller\" while actions the suffix \"Action\". A sample of a controller is as follows:",
    "controllers_b22bf738f3e4113b72498abf8df6a355": "Additional URI parameters are defined as action parameters, so that they can be easily accessed using local variables. A controller can optionally extend :doc:`Phalcon\\\\Mvc\\\\Controller <..\/api\/Phalcon_Mvc_Controller>`. By doing this, the controller can have easy access to the application services.",
    "controllers_02d3b405399bc826fc484d3addd149f3": "Parameters without a default value are handled as required. Setting optional values for parameters is done as usual in PHP:",
    "controllers_2c21b67becef8f013925ae48e42ab023": "Parameters are assigned in the same order as they were passed in the route. You can get an arbitrary parameter from its name in the following way:",
    "controllers_19a6c1d67b16bca3fdadab09b2393db7": "Dispatch Loop",
    "controllers_e91e55a308d6c96d2b485677dcd94a5c": "The dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the above example only one action was executed. Now we'll see how \"forward\" can provide a more complex flow of operation in the dispatch loop, by forwarding execution to a different controller\/action.",
    "controllers_cc817334bbec5ea9ce6dbef2709beeaf": "Forward flow to another action",
    "controllers_6ff855eda40562b45266d5cca8c4304b": "If users don't have permissions to access a certain action then will be forwarded to the Users controller, signin action.",
    "controllers_3691a17f2697dcb44b08c104f391dda6": "There is no limit on the \"forwards\" you can have in your application, so long as they do not result in circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by :doc:`Phalcon\\\\Mvc\\\\View <..\/api\/Phalcon_Mvc_View>`.",
    "controllers_fccdec87b5a034198b1461f90176d44d": "Initializing Controllers",
    "controllers_d34f232d22a05969120164f8a0929b27": ":doc:`Phalcon\\\\Mvc\\\\Controller <..\/api\/Phalcon_Mvc_Controller>` offers the initialize method, which is executed first, before any action is executed on a controller. The use of the \"__construct\" method is not recommended.",
    "controllers_6b19a0bf2864067a1e6a0085e7052eec": "If you want to execute some initialization logic just after build the controller object you can implement the method 'onConstruct':",
    "controllers_411652177b013fea3c5a63ab616d098f": "Injecting Services",
    "controllers_c79117ca927b44a5930b2df6b750ddeb": "If a controller extends :doc:`Phalcon\\\\Mvc\\\\Controller <..\/api\/Phalcon_Mvc_Controller>` then it has easy access to the service container in application. For example, if we have registered a service like this:",
    "controllers_94459506819f88b2a2ac838eba03c79d": "Then, we can access to that service in several ways:",
    "controllers_b2208cf876b040c0187766d57bfc1255": "Injecting the service by just accessing the property with the same name",
    "controllers_181d6542bb8f71757774650a3b5f8ebe": "Accessing the service from the DI",
    "controllers_2e08bddf2d28443f6981d0ebac2e1933": "Another way to access the service using the magic getter",
    "controllers_5d153ad04010e51b3b558a93314486c4": "Using the array-syntax",
    "controllers_aac2efc260d88f42bec7fa4d3c0cf2d0": "If you're using Phalcon as a full-stack framework, you can read the services provided :doc:`by default <di>` in the framework.",
    "controllers_feb531e6a51594e44fe697f022410250": "Request and Response",
    "controllers_78b818902e26bdd57e13cdd9f1c27419": "Assuming that the framework provides a set of pre-registered services. We explain how to interact with the HTTP environment. The \"request\" service contains an instance of :doc:`Phalcon\\\\Http\\\\Request <..\/api\/Phalcon_Http_Request>` and the \"response\" contains a :doc:`Phalcon\\\\Http\\\\Response <..\/api\/Phalcon_Http_Response>` representing what is going to be sent back to the client.",
    "controllers_eeef46c52d2f8fda1b6593681b414c9f": "Check if request has made with POST",
    "controllers_7bc4b7c3a07971acba3c23c3ae0de905": "Access POST data",
    "controllers_576579805e31f7288878eba1be8ac44c": "The response object is not usually used directly, but is built up before the execution of the action, sometimes - like in an afterDispatch event - it can be useful to access the response directly:",
    "controllers_c749472b7adc3814922c76d471990109": "Send a HTTP 404 response header",
    "controllers_1723e79963b9d5cbfdb220ead5c2ff5f": "Learn more about the HTTP environment in their dedicated articles :doc:`request <request>` and :doc:`response <response>`.",
    "controllers_0e5d8f24b3a76c0a332a39078578993b": "Session Data",
    "controllers_9af1ea6757c3ffe81059d7807e7aff96": "Sessions help us maintain persistent data between requests. You could access a :doc:`Phalcon\\\\Session\\\\Bag <..\/api\/Phalcon_Session_Bag>` from any controller to encapsulate data that need to be persistent.",
    "controllers_289076e758f9ec58874175d1848fef0a": "Using Services as Controllers",
    "controllers_383734707de80ee854c1540332570694": "Services may act as controllers, controllers classes are always requested from the services container. Accordingly, any other class registered with its name can easily replace a controller:",
    "controllers_488248aa224f04bf34e44796a2a8c3f9": "Register a controller as a service",
    "controllers_75c4233f2ddc0eea12e9d70201865ffa": "Register a namespaced controller as a service",
    "controllers_95181cdd38a7d3718cd1ea894b8ea8ba": "Creating a Base Controller",
    "controllers_51fedd99fe59a5bf8cac3855adce33cc": "Some application features like access control lists, translation, cache, and template engines are often common to many controllers. In cases like these the creation of a \"base controller\" is encouraged to ensure your code stays DRY_. A base controller is simply a class that extends the :doc:`Phalcon\\\\Mvc\\\\Controller <..\/api\/Phalcon_Mvc_Controller>` and encapsulates the common functionality that all controllers must have. In turn, your controllers extend the \"base controller\" and have access to the common functionality.",
    "controllers_277976e04abafe373f2f0cd83bc81a1f": "This class could be located anywhere, but for organizational conventions we recommend it to be in the controllers folder, e.g. apps\/controllers\/ControllerBase.php. We may require this file directly in the bootstrap file or cause to be loaded using any autoloader:",
    "controllers_439861a197b139299f3790be82d52147": "The implementation of common components (actions, methods, properties etc.) resides in this file:",
    "controllers_f81751d69164a318d542be4710e6541e": "Any other controller now inherits from ControllerBase, automatically gaining access to the common components (discussed above):",
    "controllers_281b6889c8920b0f05e770706f719a10": "Events in Controllers",
    "controllers_37e837df535716a756662358b9e8f390": "Controllers automatically act as listeners for :doc:`dispatcher <dispatching>` events, implementing methods with those event names allow you to implement hook points before\/after the actions are executed:"
}