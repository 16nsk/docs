{
    "phql_5386430706e3d70dcd6721cfffc4e04d": "Phalcon Query Language (PHQL)",
    "phql_b876fbd21078f3f503088a28152f5c24": "Phalcon Query Language, PhalconQL or simply PHQL is a high-level, object-oriented SQL dialect that allows to write queries using a standardized SQL-like language. PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS.",
    "phql_770e44dedceb2f0e5f5b89dbad1cae91": "To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as SQLite_. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.",
    "phql_7befb3258cfb156f4f2a5ad9fad387a6": "The parser first checks the syntax of the pass PHQL statement, then builds an intermediate representation of the statement and finally it converts it to the respective SQL dialect of the target RDBMS.",
    "phql_a7c2ad8614a5f3c85370ac420ac4f2de": "In PHQL, we've implemented a set of features to make your access to databases more secure:",
    "phql_04a340ea6f68d77f12989beba2458a04": "* Bound parameters are part of the PHQL language helping you to secure your code * PHQL only allows one SQL statement to be executed per call preventing injections * PHQL ignores all SQL comments which are often used in SQL injections * PHQL only allows data manipulation statements, avoiding altering or dropping tables\/databases by mistake or externally without authorization * PHQL implements a high-level abstraction allowing you to handle tables as models and fields as class attributes",
    "phql_b2923a136099a523e93b60cda2e7677e": "Usage Example",
    "phql_d22afdc2a2ef5fa71cb68ec9cee108e3": "To better explain how PHQL works consider the following example. We have two models \u201cCars\u201d and \u201cBrands\u201d:",
    "phql_a1b67fe5a612a433c7b35828bbc11a19": "And every Car has a Brand, so a Brand has many Cars:",
    "phql_99e03f118557b526d8879d653323d7e0": "Creating PHQL Queries",
    "phql_fbd53b85ed0193a035d9a2e10e612704": "PHQL queries can be created just by instantiating the class :doc:`Phalcon\\\\Mvc\\\\Model\\\\Query <..\/api\/Phalcon_Mvc_Model_Query>`:",
    "phql_96b97a7069cbf855c8b71352e096c536": "Instantiate the Query",
    "phql_3ddf5c225412a7acb145b96766a5d0b7": "Execute the query returning a result if any",
    "phql_0080a39b5259541169eff46ea9c5ea5c": "From a controller or a view, it's easy to create\/execute them using an injected :doc:`models manager <..\/api\/Phalcon_Mvc_Model_Manager>`:",
    "phql_5ce486f3c35ba7079a88a64cafcc6a29": "Executing a simple query",
    "phql_ec4a20140e92c98c7367b42fb86fcf5d": "With bound parameters",
    "phql_eb08feb94389f4e5366ba4264095493f": "Or simply execute it:",
    "phql_1a92af3c6a25bedc035a9bd3d94cafc2": "Executing with bound parameters",
    "phql_0afa7a4c7c005ec76d601567c48161aa": "Selecting Records",
    "phql_e893a9b9e54a8e1c795bb12607cc5d30": "As the familiar SQL, PHQL allows querying of records using the SELECT statement we know, except that instead of specifying tables, we use the models classes:",
    "phql_0c20a135c062e555fe12e8c814499f4b": "Classes in namespaces are also allowed:",
    "phql_ffc487d3932c4ba21aba660d1dd667d3": "Most of the SQL standard is supported by PHQL, even nonstandard directives as LIMIT:",
    "phql_916cd70dd9c9093314fa736afb3fa271": "Result Types",
    "phql_bc4220d30d228afa326f33c7a14e364b": "Depending on the type of columns we query, the result type will vary. If you retrieve a single whole object, then the object returned is a :doc:`Phalcon\\\\Mvc\\\\Model\\\\Resultset\\\\Simple <..\/api\/Phalcon_Mvc_Model_Resultset_Simple>`. This kind of resultset is a set of complete model objects:",
    "phql_218768eb16a53531d34ee07eb961bf54": "This is exactly the same as:",
    "phql_f4ae99b03590be12389bbabf4251f7eb": "Complete objects can be modified and re-saved in the database because they represent a complete record of the associated table. There are other types of queries that do not return complete objects, for example:",
    "phql_f5d0f1eb448afd6d210e17c26cb318a1": "We are only requesting some fields in the table, therefore those cannot be considered an entire object, so the returned object is still a resulset of type :doc:`Phalcon\\\\Mvc\\\\Model\\\\Resultset\\\\Simple <..\/api\/Phalcon_Mvc_Model_Resultset_Simple>`. However, each element is a standard object that only contain the two columns that were requested.",
    "phql_78dcbe0c98269dba3f1d5ed10a082def": "These values that don't represent complete objects we call them scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:",
    "phql_94f09089ff33f445caba711f4f2097fc": "As we can query complete objects or scalars, we can also query both at once:",
    "phql_dbdab4ba0af00fb264476765639c133f": "The result in this case is an object :doc:`Phalcon\\\\Mvc\\\\Model\\\\Resultset\\\\Complex <..\/api\/Phalcon_Mvc_Model_Resultset_Complex>`. This allows access to both complete objects and scalars at once:",
    "phql_c0989395fd723b460ecba688406c428f": "Scalars are mapped as properties of each \"row\", while complete objects are mapped as properties with the name of its related model.",
    "phql_949a9ea10ee823acc28ef307f9bca73c": "Joins",
    "phql_f8d1d2d3bb81b845d9ea4aa7975d2fa3": "It's easy to request records from multiple models using PHQL. Most kinds of Joins are supported. As we defined relationships in the models, PHQL adds these conditions automatically:",
    "phql_c1a585f858c40fc2f0d6b434f6a02bf4": "By default, an INNER JOIN is assumed. You can specify the type of JOIN in the query:",
    "phql_e3447c732565d148d43c0879a9e4dee4": "Also is possible set manually the conditions of the JOIN:",
    "phql_3bf6a4bfa18e0de13229380cef912515": "Also, the joins can be created using multiple tables in the FROM clause:",
    "phql_9a4aaaeb812b9935609f9041f47b04df": "If an alias is used to rename the models in the query, those will be used to name the attributes in the every row of the result:",
    "phql_2e5cafc991790cd62cbd6dfcaed033a4": "When the joined model has a many-to-many relation to the 'from' model, the intermediate model is implicitly added to the generated query:",
    "phql_17534ddfe740a0ccb36157f6d52484c1": "This code produces the following SQL in MySQL:",
    "phql_0c496866e3b7ef5ccb7d7b86d29300ac": "Aggregations",
    "phql_46101d69c165924fce0b932d0b0548ba": "The following examples show how to use aggregations in PHQL:",
    "phql_da101dffc8bf2fe5d404bc86a3d5a3c8": "How much are the prices of all the cars?",
    "phql_79449ef9cedde3a7d5cfb29d813baf4d": "How many cars are by each brand?",
    "phql_4c177f8dae8049f5081efe9068def226": "Count distinct used brands",
    "phql_ec9a533445b22960d8dee63554092547": "Conditions",
    "phql_d3190497c5ffa0d31b5787a970b17b92": "Conditions allow us to filter the set of records we want to query. The WHERE clause allows to do that:",
    "phql_fa566cbb733c476d210a11ffb47e71f6": "Simple conditions",
    "phql_081927ac33f9f150d6cba295931352d2": "Also, as part of PHQL, prepared parameters automatically escape the input data, introducing more security:",
    "phql_d70f9732a93804895552d4041ad92122": "Inserting Data",
    "phql_a7834c88201ad71e5c5127802aad3100": "With PHQL it's possible to insert data using the familiar INSERT statement:",
    "phql_339142904822f30efbe178bc1b91f24c": "Inserting without columns",
    "phql_1e867d775737fee641d19fdde4f6b32f": "Specifying columns to insert",
    "phql_e78dba49a628db072a3b6d3899d71510": "Inserting using placeholders",
    "phql_ae74d4ec26f07635bb94fe0da8e72228": "Phalcon not just only transform the PHQL statements into SQL. All events and business rules defined in the model are executed as if we created individual objects manually. Let's add a business rule on the model cars. A car cannot cost less than $ 10,000:",
    "phql_a8d62b862354f089a65b6cbe59b30486": "If we made the following INSERT in the models Cars, the operation will not be successful because the price does not meet the business rule that we implemented:",
    "phql_7e95ceac582a15ef3f27c690a4862c5a": "Updating Data",
    "phql_596650f1fbee737a2e58cffc3309beb2": "Updating rows is very similar than inserting rows. As you may know, the instruction to update records is UPDATE. When a record is updated the events related to the update operation will be executed for each row.",
    "phql_cb7cdc9ff650fd9ee33c32456a68aa30": "Updating a single column",
    "phql_2f2b6de24506145eebe079fdc7de25ce": "Updating multiples columns",
    "phql_729b62ead26f158b5b215693a4fbe495": "Updating multiples rows",
    "phql_a4249c82cce91f8052a47c301a8b9d78": "Using placeholders",
    "phql_0979c3765dec192eaa96d839b8f054d7": "An UPDATE statement performs the update in two phases:",
    "phql_da66af554b6721e9f08884a18d5d6205": "* First, if the UPDATE has a WHERE clause it retrieves all the objects that match these criteria, * Second, based on the queried objects it updates\/changes the requested attributes storing them to the relational database",
    "phql_69ef98663df382b084d84d6fd923f0dd": "This way of operation allows that events, virtual foreign keys and validations take part of the updating process. In summary, the following code:",
    "phql_b4a5b5bc261949098989806892c8d360": "is somewhat equivalent to:",
    "phql_12f49100cf21592b1bed0daa5b42bcd9": "Deleting Data",
    "phql_d901c3161bdaf00898323fc337f3bc75": "When a record is deleted the events related to the delete operation will be executed for each row:",
    "phql_d3745656787965ae2c701756124845b8": "Deleting a single row",
    "phql_6a51fd768ce8d80ccf5b2c080e22f694": "Deleting multiple rows",
    "phql_ce996524e4b2ec0b5dfd262e78b54e70": "DELETE operations are also executed in two phases like UPDATEs.",
    "phql_c45f0d6895e27b7d482aae69f4248daa": "Creating queries using the Query Builder",
    "phql_9ec79915f86b984af84bfed7258f981f": "A builder is available to create PHQL queries without the need to write PHQL statements, also providing IDE facilities:",
    "phql_ec957aedb592e4673349ba1d2eb417a8": "Getting a whole set",
    "phql_9a25ed76d4f7a3538d2d4b0cecf4e538": "Getting the first row",
    "phql_5622680411b3dd3c93fe1bb97610f387": "That is the same as:",
    "phql_d2d5790eccbd79c211951e7466073c59": "More examples of the builder:",
    "phql_e15039f1506a3887ee6b4cc8e9d981ae": "'SELECT Robots.* FROM Robots'",
    "phql_20f6e89ae1605c474b1bdf4f348c0e3f": "'SELECT Robots.*, RobotsParts.* FROM Robots, RobotsParts'",
    "phql_af53245b61726ce1668350e8996512ec": "'SELECT * FROM Robots'",
    "phql_dc3b25c74d1d52aa7b41eb971377afa4": "'SELECT id FROM Robots'",
    "phql_d6f670dcd706e4056a4da1ec932e59f1": "'SELECT id, name FROM Robots'",
    "phql_9329a68010530916297b3f2b3ece4d42": "'SELECT Robots.* FROM Robots WHERE Robots.name = \"Voltron\"'",
    "phql_8da471cd465e657cc08124c1f6a6ac95": "'SELECT Robots.* FROM Robots WHERE Robots.id = 100'",
    "phql_6cc5b0aa1a0612309db44c82eea3351e": "'SELECT Robots.* FROM Robots WHERE Robots.type = \"virtual\" AND Robots.id > 50'",
    "phql_5d27ba7b0a29ca36b05d9b309310d86b": "'SELECT Robots.* FROM Robots WHERE Robots.type = \"virtual\" OR Robots.id > 50'",
    "phql_6662333080838eed57803c08328e1922": "'SELECT Robots.* FROM Robots GROUP BY Robots.name'",
    "phql_da92cd12bb42686676e03e53bc5a139e": "'SELECT Robots.* FROM Robots GROUP BY Robots.name, Robots.id'",
    "phql_2ce16c057afc6fa1003b45a4960ed794": "'SELECT Robots.name, SUM(Robots.price) FROM Robots GROUP BY Robots.name'",
    "phql_0c0aa0abaee7932a42fc197ee28483ed": "'SELECT Robots.name, SUM(Robots.price) FROM Robots",
    "phql_63e577abfff56abdc1383a0f0ac6f5b2": "GROUP BY Robots.name HAVING SUM(Robots.price) > 1000'",
    "phql_8ca1e9142db3eaf1e88b194ffdb11ba1": "'SELECT Robots.* FROM Robots",
    "phql_a48121f81382426930e308a767a23043": "JOIN RobotsParts ON Robots.id = RobotsParts.robots_id AS p",
    "phql_9c8c7391fd547833b2cb5b50dc90b8be": "JOIN Parts ON Parts.id = RobotsParts.parts_id AS t'",
    "phql_55d77f6abb24fbb75a8ff1eacf58317f": "'SELECT r.* FROM Robots AS r'",
    "phql_6461d845432152c5ec03bfdacb6a9a40": "'SELECT Robots.*, p.* FROM Robots, Parts AS p'",
    "phql_304b126b96d6181360a1e3dac62239c3": "'SELECT r.*, p.* FROM Robots AS r, Parts AS p'",
    "phql_d735d0422f7fe369654371b441a5a1ac": "'SELECT Robots.* FROM Robots LIMIT 10'",
    "phql_4b4441be78e65f787ef0555baddf9590": "'SELECT Robots.* FROM Robots LIMIT 10 OFFSET 5'",
    "phql_d6b4bb901824d0216f9c921ca5265e13": "'SELECT Robots.* FROM Robots WHERE id BETWEEN 1 AND 100'",
    "phql_2fee32c64e8ce8d67581419394e66371": "'SELECT Robots.* FROM Robots WHERE id IN (1, 2, 3)'",
    "phql_d1e8269e51134b1e31fbf0121de5b13d": "'SELECT Robots.* FROM Robots WHERE id NOT IN (1, 2, 3)'",
    "phql_cdfaef016e255b490c19a83546a6c9f8": "'SELECT Robots.* FROM Robots WHERE name LIKE '%Art%'",
    "phql_e8e8a863132d9d19cb8d6f6e1d65164e": "'SELECT r.* FROM Store\\Robots WHERE r.name LIKE '%Art%'",
    "phql_1f784a870292bdaabbe7fc60b31ed9fd": "Bound Parameters",
    "phql_e390c52bab27bb0f6db5df479386930e": "Bound parameters in the query builder can be set as the query is constructed or past all at once when executing:",
    "phql_01f8500886a672440ad7fc7034ebdb11": "Passing parameters in the query construction",
    "phql_d7706a31e381b4c891339311dfba09bf": "Passing parameters in query execution",
    "phql_a134584ccac2fddfcf5b203f45920a47": "Disallow literals in PHQL",
    "phql_95562861ff6ac47d167e77c98715380c": "Literals can be disabled in PHQL, this means that directly using strings, numbers and boolean values in PHQL strings will be disallowed. If PHQL statements are created embedding external data on them, this could open the application to potential SQL injections:",
    "phql_773e416c79c434f2c5f22029dc850d62": "If $login is changed to ' OR '' = ', the produced PHQL is:",
    "phql_f06b05c12d90f04b3a5b708f0054c863": "Which is always true no matter what the login stored in the database is.",
    "phql_d74e9e775e3f0555e8d4801bdc57cba1": "If literals are disallowed strings can be used as part of a PHQL statement, thus an exception will be thrown forcing the developer to use bound parameters. The same query can be written in a secure way like this:",
    "phql_fa72ca62b13daccc542cb8fa8c2ac158": "You can disallow literals in the following way:",
    "phql_40a67d40a5341adea99c58b52c7b3cd0": "Bound parameters can be used even if literals are allowed or not. Disallowing them is just another security decision a developer could take in web applications.",
    "phql_10a77d4c1d136c3f869772725d0dd66f": "Escaping Reserved Words",
    "phql_82759b93009043bc9741c004abc098cb": "PHQL has a few reserved words, if you want to use any of them as attributes or models names, you need to escape those words using the cross-database escaping delimiters '[' and ']':",
    "phql_80b58ea91a646d68e6caf9009bceec79": "The delimiters are dynamically translated to valid delimiters depending on the database system where the application is currently running on.",
    "phql_c69f6d0581529e1032622e5cbdfe36d4": "PHQL Lifecycle",
    "phql_861e30126232847422608f9c138961de": "Being a high-level language, PHQL gives developers the ability to personalize and customize different aspects in order to suit their needs. The following is the life cycle of each PHQL statement executed:",
    "phql_322e30a4dae62dcfd552a024d89ef7b0": "* The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system * The IR is converted to valid SQL according to the database system associated to the model * PHQL statements are parsed once and cached in memory. Further executions of the same statement result in a slightly faster execution",
    "phql_49c62a60348782860b0968b26fbc1d74": "Using Raw SQL",
    "phql_5cac6cfb9413d2ca60be37b78373e5ef": "A database system could offer specific SQL extensions that aren't supported by PHQL, in this case, a raw SQL can be appropriate:",
    "phql_526648eefa48ae4fc46e912e0ba3b02a": "A raw SQL statement",
    "phql_bcd0bbc0f07716044bbe40aa8894896e": "Base model",
    "phql_d24ba4a062f845a259f6bd1397452bdd": "Execute the query",
    "phql_2a6e6ccb82a04bd0b277a8af40196603": "If Raw SQL queries are common in your application a generic method could be added to your model:",
    "phql_e7641f4f450d4d75e3cdcf49a66b1143": "The above findByRawSql could be used as follows:",
    "phql_f07747c719e154f6ba1384e010ddc59e": "Troubleshooting",
    "phql_acfbc5f424a4b0cc8fbc9c7662993076": "Some things to keep in mind when using PHQL:",
    "phql_89addad6c504712029f8c60a192ef518": "* Classes are case-sensitive, if a class is not defined with the same name as it was created this could lead to an unexpected behavior in operating systems with case-sensitive file systems such as Linux. * Correct charset must be defined in the connection to bind parameters with success * Aliased classes aren't replaced by full namespaced classes since this only occurs in PHP code and not inside strings * If column renaming is enabled avoid using column aliases with the same name as columns to be renamed, this may confuse the query resolver"
}