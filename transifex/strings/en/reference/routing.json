{
    "routing_476a8980062af9e778f675c1bc4f73ef": "Routing",
    "routing_80737ee348be4a387eda622d15b10c75": "The router component allows defining routes that are mapped to controllers or handlers that should receive the request. A router simply parses a URI to determine this information. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.",
    "routing_a8a25f2aac05af019b129455c8d4e2eb": "Defining Routes",
    "routing_9dcf17896733a4c6184918c1fe10972e": ":doc:`Phalcon\\\\Mvc\\\\Router <..\/api\/Phalcon_Mvc_Router>` provides advanced routing capabilities. In MVC mode, you can define routes and map them to controllers\/actions that you require. A route is defined as follows:",
    "routing_e438afb7b123fb30fd783c39fe3c0d64": "Create the router",
    "routing_36675dba0f45d3bd219c6fb8053e6597": "Define a route",
    "routing_f538757510169716dd05ec2568e198ce": "Another route",
    "routing_af70bfef086f9becd40e8868981bfbc4": "The method add() receives as first parameter a pattern and optionally a set of paths as second parameter. In this case, if the URI is exactly: \/admin\/users\/my-profile, then the \"users\" controller with its action \"profile\" will be executed. Currently, the router does not execute the controller and action, it only collects this information to inform the correct component (ie. :doc:`Phalcon\\\\Mvc\\\\Dispatcher <..\/api\/Phalcon_Mvc_Dispatcher>`) that this is controller\/action it should to execute.",
    "routing_e337359c3e1a34b84cd25564e88c6b8f": "An application can have many paths, define routes one by one can be a cumbersome task. In these cases we can create more flexible routes:",
    "routing_8cd210a54ff282e87a6ed0f7f1494972": "In the example above, using wildcards we make a route valid for many URIs. For example, by accessing the following URL (\/admin\/users\/a\/delete\/dave\/301) then:",
    "routing_0208788d55bbb89d8d903679f676ad94": "The method add() receives a pattern that optionally could have predefined placeholders and regular expression modifiers. All the routing patterns must start with a slash character (\/). The regular expression syntax used is the same as the `PCRE regular expressions`_. Note that, it is not necessary to add regular expression delimiters. All routes patterns are case-insensitive.",
    "routing_bd30a2c3f46b46c876a14459bb37cb3f": "The second parameter defines how the matched parts should bind to the controller\/action\/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (:controller) is the controller part of the route, the second the action and so on.",
    "routing_9eca21e6ab3780f7e55f26df9d3bb9f9": "These placeholders help writing regular expressions that are more readable for developers and easier to understand. The following placeholders are supported:",
    "routing_7eb946b0fa36e208b3b987f9503af17e": "Controller names are camelized, this means that characters (-) and (_) are removed and the next character is uppercased. For instance, some_controller is converted to SomeController.",
    "routing_463cf83ff1da5fa1aead4c5adc6d8870": "Since you can add many routes as you need using add(), the order in which routes are added indicate their relevance, latest routes added have more relevance than first added. Internally, all defined routes are traversed in reverse order until :doc:`Phalcon\\\\Mvc\\\\Router <..\/api\/Phalcon_Mvc_Router>` finds the one that matches the given URI and processes it, while ignoring the rest.",
    "routing_3540d24c854e30bda17e43acc7db78b9": "Parameters with Names",
    "routing_acae6bad7acef0f5d14865c3b631c44e": "The example below demonstrates how to define names to route parameters:",
    "routing_f5cd639e60abaf5c70770f2193039edd": "([0-9]{4})",
    "routing_e7d05a2cd2e98588676c451035df748b": "([0-9]{2})",
    "routing_c8faf368354ddcf09a540ed33a5078be": ":params",
    "routing_5d916475254ea486a884d1f6046ae413": "In the above example, the route doesn't define a \"controller\" or \"action\" part. These parts are replaced with fixed values (\"posts\" and \"show\"). The user will not know the controller that is really dispatched by the request. Inside the controller, those named parameters can be accessed as follows:",
    "routing_988f54d638ea3c28b4dcd672d992a39e": "Return \"year\" parameter",
    "routing_7bc6d7d26fb4625b3c367d05cbecb6f3": "Return \"month\" parameter",
    "routing_19dc82172aefe683b521b7932ce43432": "Return \"day\" parameter",
    "routing_3b64696f43025f9debdd28b92dcc3d55": "Note that the values of the parameters are obtained from the dispatcher. This happens because it is the component that finally interacts with the drivers of your application. Moreover, there is also another way to create named parameters as part of the pattern:",
    "routing_478aded91934b807494433f5e157b553": "You can access their values in the same way as before:",
    "routing_996e65daa812df4b6a59f6ca18e6d5e5": "Returns \"name\" parameter",
    "routing_e1c87a801511011720872a707a895b74": "Returns \"type\" parameter",
    "routing_40d3496dd82862acf7fa645cf5843ca9": "Short Syntax",
    "routing_21979d3e12775abb02b191341aff60c1": "If you don't like using an array to define the route paths, an alternative syntax is also available. The following examples produce the same result:",
    "routing_5808d93b5a62a02626e69461545b42c9": "Short form",
    "routing_ac5a335ee540c64c78ddf133ca4e11f4": "Array form",
    "routing_f3080b2f6ccf5d03da8f1da2560e2d1a": "Mixing Array and Short Syntax",
    "routing_ad3d45d5acd8299cd58843284585bf79": "Array and short syntax can be mixed to define a route, in this case note that named parameters automatically are added to the route paths according to the position on which they were defined:",
    "routing_afbe3625aff91a4008df9b8e148191ee": "First position must be skipped because it is used for",
    "routing_0199201654ca4047c6811d3ae92f2f4c": "the named parameter 'country'",
    "routing_e072558226ceb8372cf5c7434ae277d6": "Positions start with 2",
    "routing_ab5679a42afac0c7b0181219d03ba29b": "Routing to Modules",
    "routing_9add85d11b871eaff3e948f9c4c4b82d": "You can define routes whose paths include modules. This is specially suitable to multi-module applications. It's possible define a default route that includes a module wildcard:",
    "routing_7a02084b284a14555e834818e8512471": "In this case, the route always must have the module name as part of the URL. For example, the following URL: \/admin\/users\/edit\/sonny, will be processed as:",
    "routing_b75389cde16eadf81bfc0a68ff6150b9": "Or you can bind specific routes to specific modules:",
    "routing_6a0fab83164f4079d3ab6ddd5b16264d": "Or bind them to specific namespaces:",
    "routing_a9e57af3ec6ccf5159eeaa8524c3259b": "Namespaces\/class names must be passed separated:",
    "routing_453efd9a5cf676ae2ae88a43c16a616b": "HTTP Method Restrictions",
    "routing_1477452518ac56e7c127ba9b933bf10e": "When you add a route using simply add(), the route will be enabled for any HTTP method. Sometimes we can restrict a route to a specific method, this is especially useful when creating RESTful applications:",
    "routing_7272c11d5377d57012f4df49534d1ead": "This route only will be matched if the HTTP method is GET",
    "routing_2f6bc0fd4cacf07a48d67d8311c9dd5c": "This route only will be matched if the HTTP method is POST",
    "routing_c2eafcef2064372c43e67d99455710c0": "This route will be matched if the HTTP method is POST or PUT",
    "routing_cf90cec6f911c38eece8ebb5aa3b4b23": "Using convertions",
    "routing_8f5321b91956f88f2b4d583c0f1e846b": "Convertions allow to freely transform the route's parameters before passing them to the dispatcher, the following examples show how to use them:",
    "routing_04d68506c522a4896657a897a9cba94c": "The action name allows dashes, an action can be: \/products\/new-ipod-nano-4-generation",
    "routing_085f85bc9842588f9ab10a2733d9fd68": "Transform the slug removing the dashes",
    "routing_89645649e65162817ae5591359c8a198": "Groups of Routes",
    "routing_9ed218f28edb65d2e1ce51f6ce34c1ec": "If a set of routes have common paths they can be grouped to easily maintain them:",
    "routing_d3dbf364456e79dff31c012172d8aa25": "Create a group with a common module and controller",
    "routing_43735061c13b24a7f591a1c8b8137f0e": "All the routes start with \/blog",
    "routing_5a86a91ac4dd449f3cc00d7b3f775ec4": "Add a route to the group",
    "routing_7aa3c893d6c37ebe73797b11b3af0e1d": "Add another route to the group",
    "routing_82fc3962e12dabb102c57c8fab55dc3f": "This route maps to a controller different than the default",
    "routing_cf0d7a079879f96295a227eb381c89f0": "Add the group to the router",
    "routing_d18d7dd959e51180c33e8fe7efd1adbe": "You can move groups of routes to separate files in order to improve the organization and code reusing in the application:",
    "routing_5431d95786f0749df40cb772cb0a299f": "Default paths",
    "routing_b1851b1c2fa5c5307d595bfaaff976ac": "Then mount the group in the router:",
    "routing_87641826c33ca36481c575395f04a269": "Matching Routes",
    "routing_c9305535339c97f0535de63c1c82b540": "A valid URI must be passed to Router in order to let it checks the route that matches that given URI. By default, the routing URI is taken from the $_GET['_url'] variable that is created by the rewrite engine module. A couple of rewrite rules that work very well with Phalcon are:",
    "routing_57b493be47ed19be107d98ad207df3e6": "The following example shows how to use this component in stand-alone mode:",
    "routing_5b470d05b5291e2e87fb259d20aecc64": "Creating a router",
    "routing_54a213830db9190215d220cee8eabbc8": "Define routes here if any",
    "routing_d9ec1142c3f874114cbdca3f614f5e2b": "Taking URI from $_GET[\"_url\"]",
    "routing_d4e886c0e6bef2a13fd1e4c362ec0492": "or Setting the URI value directly",
    "routing_d35b79aa0c8abf254abb62fc4c778f1d": "Getting the processed controller",
    "routing_7573649970696f9e238184c76d5505b6": "Getting the processed action",
    "routing_407e0df96b74082fe285eb53fafb7028": "Get the matched route",
    "routing_7ff55897ca1eac97569667483eccf29c": "Naming Routes",
    "routing_87997b24529888023044e0ac18a908b6": "Each route that is added to the router is stored internally as an object :doc:`Phalcon\\\\Mvc\\\\Router\\\\Route <..\/api\/Phalcon_Mvc_Router_Route>`. That class encapsulates all the details of each route. For instance, we can give a name to a path to identify it uniquely in our application. This is especially useful if you want to create URLs from it.",
    "routing_db357fb8b3bf605ae3443a085fd2ae31": "or just",
    "routing_99826062e7ee46bb65b29bd1bdc47f6c": "Then, using for example the component :doc:`Phalcon\\\\Mvc\\\\Url <..\/api\/Phalcon_Mvc_Url>` we can build routes from its name:",
    "routing_4374667393d71c92776bc6ca2ba8a756": "returns \/posts\/2012\/phalcon-1-0-released",
    "routing_33df0f1f046d5ea7d528ae7e04b5b00f": "Usage Examples",
    "routing_7d3cc177511a959a88a38ebc77f371bc": "The following are examples of custom routes:",
    "routing_c2cc5818f72720cf5db29c705f87230e": "matches \"\/system\/admin\/a\/edit\/7001\"",
    "routing_3bc55ac109f7512abc97d69edfb95c44": "matches \"\/es\/news\"",
    "routing_8adc7a12513b80e1ef71a38992a26d81": "matches \"\/admin\/posts\/edit\/100\"",
    "routing_57cffdf1c525d359d4056155dbd687df": "matches \"\/posts\/2010\/02\/some-cool-content\"",
    "routing_bc95ef7ead0f90292bb09f73c0e2aa7e": "matches \"\/manual\/en\/translate.adapter.html\"",
    "routing_5ae86815d99a6284b10996cf6a15afae": "matches \/feed\/fr\/le-robots-hot-news.atom",
    "routing_a74af9f2887a549af527cf5c6816171e": "matches \/api\/v1\/users\/peter.json",
    "routing_455c64f03d8a2db20778f630271ab7eb": "Default Behavior",
    "routing_12b50c61cc98da6d971a5884a6f36ea2": ":doc:`Phalcon\\\\Mvc\\\\Router <..\/api\/Phalcon_Mvc_Router>` has a default behavior providing a very simple routing that always expects a URI that matches the following pattern: \/:controller\/:action\/:params",
    "routing_d6b9352467b77e061070a12d9d8b2d6c": "For example, for a URL like this *http:\/\/phalconphp.com\/documentation\/show\/about.html*, this router will translate it as follows:",
    "routing_64e1f6d7e8bd1348c4afc274d26d571a": "If you don't want use this routes as default in your application, you must create the router passing false as parameter:",
    "routing_8c0d2307d542718a5f44f362bc75a0e6": "Create the router without default routes",
    "routing_5aef7c16fc00974efa801f11d5ab1674": "Setting the default route",
    "routing_f263d36de6652a9b4a6d419ea3dc8359": "When your application is accessed without any route, the '\/' route is used to determine what paths must be used to show the initial page in your website\/application:",
    "routing_b09e95ff2020febabcc69da62f468438": "Not Found Paths",
    "routing_b1656daeb0be1c3b453eed446ec80368": "If none of the routes specified in the router are matched, you can define a group of paths to be used in this scenario:",
    "routing_0afb82ff58fddb0c28885460b76288dc": "Set 404 paths",
    "routing_33a1d5e7ebac5b03e011b0a0f5ef8c27": "Setting default paths",
    "routing_4e85ee960ebc91e99e100ebc61abfceb": "It's possible to define default values for common paths like module, controller or action. When a route is missing any of those paths they can be automatically filled by the router:",
    "routing_f1a2dc7a4a6a3a08ece6672cae6bbd56": "Setting a specific default",
    "routing_b95bdc68566652e92902b5a4d919035c": "Using an array",
    "routing_45a6a55a7d1f271400e66f477bc919c8": "Dealing with extra\/trailing slashes",
    "routing_84eb8a6b4c6bfbdc6313b9fae680e929": "Sometimes a route could be accessed with extra\/trailing slashes and the end of the route, those extra slashes would lead to produce a not-found status in the dispatcher. You can set up the router to automatically remove the slashes from the end of handled route:",
    "routing_4c419e391a1a280d8cdef97f61e105d8": "Remove trailing slashes automatically",
    "routing_cb88012b458e6b55753d6ab71de09ed4": "Or, you can modify specific routes to optionally accept trailing slashes:",
    "routing_2617728469525c66288abb69d182cb15": "Match Callbacks",
    "routing_eeec2b22d72619afda05414dbc3c90ff": "Sometimes, routes must be matched if they meet specific conditions, you can add arbitrary conditions to routes using the 'beforeMatch' callback, if this function return false, the route will be treaded as non-matched:",
    "routing_807bbe76d40d1fa78e437c5c686c7eca": "Check if the request was made with Ajax",
    "routing_e2baf3be5f2a60d1ec516e51de94661d": "You can re-use these extra conditions in classes:",
    "routing_dbdc46e51cbe0f58cb90ef9001dab2a7": "And use this class instead of the anonymous function:",
    "routing_700fdbb69619d592622aa670b3e4aaa2": "Hostname Constraints",
    "routing_f5bb43969cf1dfaf2ed5786dcfbcb3b1": "The router allow to set hostname constraints, this means that specific routes or a group of routes can be restricted to only match if the route also meets the hostname constraint:",
    "routing_3b6265dc31b17ad6d85aa03a282ad603": "Hostname can also be regular expressions:",
    "routing_358162dafe136cd0f52ead45bf46f6fa": "In groups of routes you can set up a hostname constraint that apply for every route in the group:",
    "routing_765ae5df8f323f1106da26fef964c21d": "Hostname restriction",
    "routing_1e80b472e30224022737c22cc9d6532a": "Default route",
    "routing_d95c9cb668c864c98ce0f13b7cfbb094": "URI Sources",
    "routing_fe0a2ee2c90f9752b2a978bfd4b55d83": "By default the URI information is obtained from the $_GET['_url'] variable, this is passed by the Rewrite-Engine to Phalcon, you can also use $_SERVER['REQUEST_URI'] if required:",
    "routing_18c5a9d018efa117de87ba83036d7d8f": "use $_GET['_url'] (default)",
    "routing_c464d18bc721cb189482c8a99bec39b0": "use $_SERVER['REQUEST_URI'] (default)",
    "routing_af97ddd2a6081ddf9a013328616ad06e": "Or you can manually pass a URI to the 'handle' method:",
    "routing_4336bee9ffb2243f3e531eee35935fc2": "Testing your routes",
    "routing_b8b538e16c15ca88ca07203a60c075e5": "Since this component has no dependencies, you can create a file as shown below to test your routes:",
    "routing_59e8834cf2165c2b6e5f2f1b520ed01c": "These routes simulate real URIs",
    "routing_bca1dc0f79cc18ea5d3dfed1135a3cff": "Add here your custom routes",
    "routing_209f4427a0e381c51b1d73f897704d79": "Testing each route",
    "routing_bc7914700c0a9e19a85b9b37f683a9c7": "Handle the route",
    "routing_14ffb2211d7c0485944a73776865eca6": "Check if some route was matched",
    "routing_3b78bfeabfbeef7d8e6fdb177e468dbe": "Annotations Router",
    "routing_9efa5035be571cb114e90dfd1d23d7ca": "This component provides a variant that's integrated with the :doc:`annotations <annotations>` service. Using this strategy you can write the routes directly in the controllers instead of adding them in the service registration:",
    "routing_b9d666c79f94f3cfada1ecd17e50f52d": "Use the annotations router",
    "routing_42ad74eedd24d64a34e68882a101f024": "Read the annotations from ProductsController if the uri starts with \/api\/products",
    "routing_f6932f89eb45ce7de0ead2fd92c7c9a7": "The annotations can be defined in the following way:",
    "routing_e8d954fb39fefaf42280b0ba17212b1e": "Only methods marked with valid annotations are used as routes. List of annotations supported:",
    "routing_ef6ddf2ec08b278c4cae5d3de4ecc4bd": "For annotations that add routes, the following parameters are supported:",
    "routing_2a8d24e00c808b565546152a64c186d3": "If routes map to controllers in modules is better use the addModuleResource method:",
    "routing_cbebe00549b82fb07298ec65494d85ca": "Read the annotations from Backend\\Controllers\\ProductsController if the uri starts with \/api\/products",
    "routing_ac44f232dbf5ec48d8c0868482c9ff0d": "Registering Router instance",
    "routing_d41d8cd98f00b204e9800998ecf8427e": "",
    "routing_ac9e9e05ba519f705c4df55d20b55ac7": "You can register router during service registration with Phalcon dependency injector to make it available inside controller. You need to add code below in your bootstrap file (for example index.php or app\/config\/services.php if you use `Phalcon Developer Tools <http:\/\/phalconphp.com\/en\/download\/tools>`_)",
    "routing_76c01d03be138f0ca89687a425f32b0d": "You need to create app\/config\/routes.php and add router initialization code, for example:",
    "routing_6946292c838dafe294782c973703999a": "Implementing your own Router",
    "routing_de0764d78260a6bae6b3dc64f4b95bd7": "The :doc:`Phalcon\\\\Mvc\\\\RouterInterface <..\/api\/Phalcon_Mvc_RouterInterface>` interface must be implemented to create your own router replacing the one provided by Phalcon."
}