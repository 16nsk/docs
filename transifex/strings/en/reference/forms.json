{
    "forms_268d46b16a1976672dfca0eb3004a1c6": "Forms",
    "forms_c8d311b9dc231bba212a1daa1a334929": "Phalcon\\\\Forms is a component that aid the developer in the creation and maintenance of forms in web applications.",
    "forms_09046bd05925c7ff83bddee4094d745a": "The following example shows its basic usage:",
    "forms_893e7de61da03f27bf81496bea047a78": "Forms can be rendered based on the form definition:",
    "forms_e2b94867ac1d9e19c574de4ca3f94731": "Each element in the form can be rendered as required by the developer. Internally, :doc:`Phalcon\\\\Tag <..\/api\/Phalcon_Tag>` is used to produce the right HTML for each element, you can pass additional html attributes as second parameter for render:",
    "forms_ae156d94a8f7c96ac0e8477e37df4225": "HTML Attributes also can be set in the element's definition:",
    "forms_b6a77d0fb8bf4d24a2041c6dc533b9c9": "Initializing forms",
    "forms_46118ce7551fd5b99ce1494d067d7e35": "As seen before, forms can be initialized outside the form class by adding elements to it. You can re-use code or organize your form classes implementing the form in a separated file:",
    "forms_b66e4848b3bda7c0e8df7255d7a1d005": "so you have access to the application services if needed:",
    "forms_3d8efd11b40598f9eda1d29b58b8dbc6": "Set the same form as entity",
    "forms_4ee594653745ac582ff5c9a44298e2bc": "Add a text element to capture the 'email'",
    "forms_8349f54e05d647e20b8c77ee17f5cfd4": "Add a text element to put a hidden csrf",
    "forms_69a37c891f1c62b554a342c50a6a3cf8": "The associated entity added to the form in the initialization and custom user options are passed to the form constructor:",
    "forms_1829d8e5d10a665bd39d5dc5b4696b02": "In the form's instantiation you must use:",
    "forms_c81f893f5539efed7a6b2aae2d783e35": "Validation",
    "forms_39b4103e3d92d2c731cbba3666242870": "Phalcon forms are integrated with the :doc:`validation <validation>` component to offer instant validation. Built-in or custom validators could be set to each element:",
    "forms_a7fe5ae6c44cbf9fe34b36a02be1be0e": "Then you can validate the form according to the input entered by the user:",
    "forms_8cfec398b55e710d9604a7c436050be6": "Validators are executed in the same order as they were registered.",
    "forms_587c4ff197b622b3c1ed93b253343404": "By default messages generated by all the elements in the form are joined so they can be traversed using a single foreach, you can change this behavior to get the messages separated by the field:",
    "forms_3fb3ea3db05b9e1080de859d46f0b814": "Or get specific messages for an element:",
    "forms_6cfe651493a752780c8fa48b71bdc818": "Filtering",
    "forms_d52da57fff163b8d574cc0bb032dfd7d": "A form is also able to filter data before be validated, you can set filters in each element:",
    "forms_b2030575ebc9fde0b4c6ea3a4625fbd6": "Setting User Options",
    "forms_b91be4cb2b5626cabb9965b2a0858548": "Forms + Entities ---------------- An entity such as a model\/collection\/plain instance or just a plain PHP class can be linked to the form in order to set default values in the form's elements or assign the values from the form to the entity easily:",
    "forms_b28bcc0439b5154f7ed057f8489f90e5": "Once the form is rendered if there is no default values assigned to the elements it will use the ones provided by the entity:",
    "forms_6da412a2f660aebd78578e72791688d0": "You can validate the form and assign the values from the user input in the following way:",
    "forms_1af24ac4da1919c6fede2e6146c56fdc": "Check if the form is valid",
    "forms_0e4c7d0119ba09c444ac1079f86cc679": "Save the entity",
    "forms_d30a6b17040285931e0f8c947d33cfa3": "Setting up a plain class as entity also is possible:",
    "forms_97eb3ee480823a9a95735e9608c7a797": "Using this class as entity, allows the form to take the default values from it:",
    "forms_baf2a1f8830086140eebac87fdb93e9c": "Entities can implement getters, which have more precedence than public properties, these methods give you more free to produce values:",
    "forms_267733a64ba9eb261ead15feedb03145": "Form Elements",
    "forms_955db7b1fad92c1ef8cecdf5046a7e4b": "Phalcon provides a set of built-in elements to use in your forms, all these elements are located in the Phalcon\\\\Forms\\\\Element namespace:",
    "forms_e645d2a669a3a9bcdd068f9166964e8c": "Event Callbacks",
    "forms_19c30705d1c08473182f5ca8868cb348": "Whenever forms are implemented as classes, the callbacks: beforeValidation and afterValidation can be implemented in the form's class to perform pre-validations and post-validations:",
    "forms_eb42718fc9fd2cd9c708358693722c8f": "Rendering Forms",
    "forms_4604a283537fa2bcbe51f858027d2fc8": "You can render the form with total flexibility, the following example shows how to render each element using an standard procedure:",
    "forms_d2e174e2f09ade4279de5d7701ed3131": "Traverse the form",
    "forms_ab27bfb50aa900c676b49acb9ed5bfe7": "Get any generated messages for the current element",
    "forms_945d58b527860c5a740921dd3d689c0e": "Print each element",
    "forms_e996858ec164c2b15da16cb43a8ad731": "Or reuse the logic in your form class:",
    "forms_65089c75f285a799c01cf5255970f306": "In the view:",
    "forms_99367eefd1b35e19421d526542d01dc9": "Creating Form Elements",
    "forms_e75214c5550dd80b0ed2d3cb0d17fad5": "In addition to the form elements provided by Phalcon you can create your own custom elements:",
    "forms_49e9eeca1ccfd6d04a641dce3a4b8956": "... produce some html",
    "forms_f44949bed8f1275638b7022df8e51ed7": "Forms Manager",
    "forms_f0111160333068fb652bd469bd43a195": "This component provides a forms manager that can be used by the developer to register forms and access them via the service locator:",
    "forms_3ad2f73417ccd3fdc7714a4f13f3f4c5": "Forms are added to the forms manager and referenced by a unique name:",
    "forms_04054dc72bd09b7854bfcdbf3be94cd4": "Using the unique name, forms can be accessed in any part of the application:"
}