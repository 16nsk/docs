{
    "security_e0ef2e95a1440df19d63e9e955ae6abf": "Security",
    "security_559a9f19f25768b1c7d3fd048bb1440b": "This component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF).",
    "security_964a2cfc27d9a6128aded38b913c6f1b": "Password Hashing",
    "security_c4051b348232ee1179906b7dfa5cb325": "Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods \u201cmd5_\u201d and \u201csha1_\u201d. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as `rainbow tables`_.",
    "security_97e50a912d71f47c3fc9a4d2d602e559": "To solve this problem we can use hash algorithms as bcrypt_. Why bcrypt? Thanks to its \u201cEksblowfish_\u201d key setup algorithm we can make the password encryption as \u201cslow\u201d as we want. Slow algorithms make the process to calculate the real password behind a hash extremely difficult if not impossible. This will protect your for a long time from a possible attack using rainbow tables.",
    "security_5a90a95f09c27a892b48f618ca39e207": "This component gives you the ability to use this algorithm in a simple way:",
    "security_0ab97edf50fd5ec2569aa910deba8f89": "Store the password hashed",
    "security_c517b7bfa84e40c992a4c1cfa12d83a8": "We saved the password hashed with a default work factor. A higher work factor will make the password less vulnerable as its encryption will be slow. We can check if the password is correct as follows:",
    "security_d6c5533d83067194760edb4307f97b3d": "The password is valid",
    "security_7f3aba84d7bd4d1a7655091b43a9cda6": "The validation has failed",
    "security_bd4619c4495c0a9ae0993f0c89a3a4ee": "The salt is generated using pseudo-random bytes with the PHP's function openssl_random_pseudo_bytes_ so is required to have the openssl_ extension loaded.",
    "security_e7b1ff65893c115cca3b6108c16ccc9c": "Cross-Site Request Forgery (CSRF) protection",
    "security_d22af5e2a1eeba75c4b48781faf0085d": "This is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.",
    "security_b7e8084b42539d7c45ad1acb575cf3ef": "The idea is to prevent the form values from being sent outside our application. To fix this, we generate a `random nonce`_ (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:",
    "security_8217074a00f1ee08b580e160acd002b9": "Then in the controller's action you can check if the CSRF token is valid:",
    "security_d18843843677d4214d39430e547164b0": "The token is ok",
    "security_a9096615e5d0b316628d6d46d809dc17": "Remember to add a session adapter to your Dependency Injector, otherwise the token check won't work:",
    "security_d389e6c51ec7250e99f9bd4004f0e8d4": "Adding a captcha_ to the form is also recommended to completely avoid the risks of this attack.",
    "security_09fcbfa5b4310f13bfd02a2a7730defa": "Setting up the component",
    "security_9457196fa73d45bf471dcfe6ab181165": "This component is automatically registered in the services container as 'security', you can re-register it to setup it's options:",
    "security_655fb53228f3035a6214d0c03ff391f7": "Set the password hashing factor to 12 rounds",
    "security_b0492394b589b5ff8f6fb98048d65d8f": "External Resources",
    "security_c63788fe8e20ca97fa57decd8be99ded": "* `V\u00f6kur\u00f3 <http:\/\/vokuro.phalconphp.com>`_, is a sample application that uses the Security component for avoid CSRF and password hashing, [`Github <https:\/\/github.com\/phalcon\/vokuro>`_]",
    "security_53c525ce454ebba9887fc2e265a32e9f": ".. _sha1 : http:\/\/php.net\/manual\/en\/function.sha1.php .. _md5 : http:\/\/php.net\/manual\/en\/function.md5.php .. _openssl_random_pseudo_bytes : http:\/\/php.net\/manual\/en\/function.openssl-random-pseudo-bytes.php .. _openssl : http:\/\/php.net\/manual\/en\/book.openssl.php .. _captcha : http:\/\/www.google.com\/recaptcha .. _`random nonce`: http:\/\/en.wikipedia.org\/wiki\/Cryptographic_nonce .. _bcrypt : http:\/\/en.wikipedia.org\/wiki\/Bcrypt .. _Eksblowfish : http:\/\/en.wikipedia.org\/wiki\/Bcrypt#Algorithm"
}