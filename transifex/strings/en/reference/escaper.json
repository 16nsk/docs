{
    "escaper_de8049e2b4f8854b235a1e7a22dfbaa2": "Contextual Escaping",
    "escaper_4ac20f61e26bc5c1fb7aee9b14e2a6ca": "Websites and Web applications are vulnerable to XSS_ attacks, despite PHP provides escaping functionality, in some contexts those are not sufficient\/appropriate. :doc:`Phalcon\\\\Escaper <..\/api\/Phalcon_Escaper>` provides contextual escaping, this component is written in C providing the minimal overhead when escaping different kinds of texts.",
    "escaper_719863172fd23c83a6bbcb76c7e8894d": "We designed this component based on the `XSS (Cross Site Scripting) Prevention Cheat Sheet`_ created by the OWASP_",
    "escaper_08393e32d6104e8736ab5e0d3ee9aaea": "Additionally, this component relies on mbstring_ to support almost any charset.",
    "escaper_728347a820344a7ff74bc9b0ae25e678": "To illustrate how this component works and why it is important, consider the following example:",
    "escaper_fb033002084e4fb9302c7210a668ad3a": "Document title with malicious extra HTML tags",
    "escaper_cf6109a346c45d45b177223d0df2bc6f": "Malicious CSS class name",
    "escaper_ce0b3c63223063a5edb0a1456200c46d": "Malicious CSS font name",
    "escaper_1ff2721b1bbbf23e07dc268591b01e9f": "Malicious Javascript text",
    "escaper_08e6b5c589201a50bbeeeb8cfeb2f11f": "Create an escaper",
    "escaper_c1e7387e17b71462fbf37bf19d1ebe7d": "Which produces the following:",
    "escaper_df58314dce8aa78978d3dd9d394a2cf8": "Every text was escaped according to its context. Use the appropriate context is important to avoid XSS attacks.",
    "escaper_3c421fe61d042d8a313e7f283fcb029e": "Escaping HTML",
    "escaper_f790a86819ff16026454e841b7c630fa": "The most common situation when inserting unsafe data is between HTML tags:",
    "escaper_453ec58c3b8e94c062611d4ac8d95370": "You can escape those data using the escapeHtml method:",
    "escaper_823d563bfe5fbbb4610153ba6b66d847": "Which produces:",
    "escaper_f42f900384c47be51538fd470d563966": "Escaping HTML Attributes",
    "escaper_6cdd64981a967a030d37d6e4c4c3a323": "Escape HTML attributes is different from escape a full HTML content. The escape works by changing every non-alphanumeric character to the form. This kind of escaping is intended to most simpler attributes excluding complex ones like 'href' or 'url':",
    "escaper_303acdc2804c0b90eeda8e10f3bf6d3d": "You can escape an HTML attribute by using the escapeHtmlAttr method:",
    "escaper_e419c2cf096225f2fc480b112f27843b": "Escaping URLs",
    "escaper_1d8024733f3d40e69701e669f9b269ff": "Some HTML attributes like 'href' or 'url' need to be escaped differently:",
    "escaper_1b965025fba3ac113dbff5a8832299e3": "You can escape an HTML attribute by using the escapeUrl method:",
    "escaper_d2c884d94f0259be48956dba248a17bb": "Escaping CSS",
    "escaper_b7f186024e49c2f227a7f08d30e150dd": "CSS identifiers\/values can be escaped too:",
    "escaper_1a4284c5e36261902ab8d5d69532ecf8": "You can escape an HTML attribute by using the escapeCss method:",
    "escaper_efd514d03a900c8d6b17fc477111718e": "Escaping Javascript",
    "escaper_15e2319e6ab4aef1b6e849669c613e4c": "Strings to be inserted into javascript code also must be properly escaped:",
    "escaper_ed5d4b6ecc85f27e025028b109548085": "You can escape an HTML attribute by using the escapeJs method:"
}