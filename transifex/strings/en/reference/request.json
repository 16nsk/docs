{
    "request_a50294fe0538101f2bfedce1815453aa": "Request Environment",
    "request_2f435d803fad403c05876324d0a7b6ec": "Every HTTP request (usually originated by a browser) contains additional information regarding the request such as header data, files, variables, etc. A web based application needs to parse that information so as to provide the correct response back to the requester. :doc:`Phalcon\\\\Http\\\\Request <..\/api\/Phalcon_Http_Request>` encapsulates the information of the request, allowing you to access it in an object-oriented way.",
    "request_19eb4b9c4e266a3822f3d8083911f599": "Getting a request instance",
    "request_c9e98245beed95fd652a2682b771cd56": "Check whether the request was made with method POST",
    "request_4e019698bb9685f8beb2a830672970e7": "Check whether the request was made with Ajax",
    "request_899ae8c8c6f297e6f17a0e342ee1c8d7": "Getting Values",
    "request_37e9f6d7a2193eea17a3a32a85db4be8": "PHP automatically fills the superglobal arrays $_GET and $_POST depending on the type of the request. These arrays contain the values present in forms submitted or the parameters sent via the URL. The variables in the arrays are never sanitized and can contain illegal characters or even malicious code, which can lead to `SQL injection`_ or `Cross Site Scripting (XSS)`_ attacks.",
    "request_d461eeca6203f16ba181388e0ea3b83f": ":doc:`Phalcon\\\\Http\\\\Request <..\/api\/Phalcon_Http_Request>` allows you to access the values stored in the $_REQUEST, $_GET and $_POST arrays and sanitize or filter them with the 'filter' service, (by default :doc:`Phalcon\\\\Filter <filter>`). The following examples offer the same behavior:",
    "request_4afe48265ac499e0f703be47c118db15": "Manually applying the filter",
    "request_fa7737760531508cb38f1218b2781e3e": "Manually applying the filter to the value",
    "request_9025fdaefa38abc33dc58eaef7aa7136": "Automatically applying the filter",
    "request_b1cd4d7a0c707635d3398a4e5d43928f": "Setting a default value if the param is null",
    "request_8d04f54895c220dcfbb08e37558197af": "Setting a default value if the param is null without filtering",
    "request_1f06d150904fb2ba123010b2372d8c20": "Accessing the Request from Controllers",
    "request_cc550a9c713528ac1964917901bd9c8d": "The most common place to access the request environment is in an action of a controller. To access the :doc:`Phalcon\\\\Http\\\\Request <..\/api\/Phalcon_Http_Request>` object from a controller you will need to use the $this->request public property of the controller:",
    "request_eeef46c52d2f8fda1b6593681b414c9f": "Check if request has made with POST",
    "request_7bc4b7c3a07971acba3c23c3ae0de905": "Access POST data",
    "request_07281573ecd855c65543d67cc8843963": "Uploading Files",
    "request_b8e048181f6b8dd735e39dc704871d5f": "Another common task is file uploading. :doc:`Phalcon\\\\Http\\\\Request <..\/api\/Phalcon_Http_Request>` offers an object-oriented way to achieve this task:",
    "request_22c08743ae48bdf32897571caee40414": "Check if the user has uploaded files",
    "request_ec560cec4db2cb9ab9f57c78dcf221d7": "Print the real file names and sizes",
    "request_84ef21579fd9fb268ff0067e2b735725": "Print file details",
    "request_27ad6dac0ad15d19643a05ed6f81e5b7": "Move the file into the application",
    "request_e4e08fd578ce1f71a6312ddda25b1e8f": "Each object returned by Phalcon\\\\Http\\\\Request::getUploadedFiles() is an instance of the :doc:`Phalcon\\\\Http\\\\Request\\\\File <..\/api\/Phalcon_Http_Request_File>` class. Using the $_FILES superglobal array offers the same behavior. :doc:`Phalcon\\\\Http\\\\Request\\\\File <..\/api\/Phalcon_Http_Request_File>` encapsulates only the information related to each file uploaded with the request.",
    "request_58c353e11cfea9c1d6ef0400e69c35a4": "Working with Headers",
    "request_37f5d0719b1f0054959ab5fc7b6ea44a": "As mentioned above, request headers contain useful information that allow us to send the proper response back to the user. The following examples show usages of that information:"
}