{
    "annotations_5b62537b970942c6e74522a9bac0a813": "Annotations Parser",
    "annotations_4ef47a1e29a366b28e661d3c01e53776": "It is the first time that an annotations parser component is written in C for the PHP world. Phalcon\\\\Annotations is a general purpose component that provides ease of parsing and caching annotations in PHP classes to be used in applications.",
    "annotations_8607b4bddce7429b9836a05cfb049643": "Annotations are read from docblocks in classes, methods and properties. An annotation can be placed at any position in the docblock:",
    "annotations_1640a00bae6064c54622a8c414788eb9": "In the above example we find some annotations in the comments, an annotation has the following syntax:",
    "annotations_7b5f373263440d6b00cce66ed3897f02": "@Annotation-Name[(param1, param2, ...)]",
    "annotations_4b9121a1cbe03e1b28131cc09ab82e2d": "Also, an annotation could be placed at any part of a docblock:",
    "annotations_f051f2cd8c32af61006b6b26a6b4a8a3": "The parser is highly flexible, the following docblock is valid:",
    "annotations_f1a303ea08e74cc1885c31781c219e97": "However, to make the code more maintainable and understandable it is recommended to place annotations at the end of the docblock:",
    "annotations_b0492c4b8c8a5c0bd1cf3a5eac65be4e": "Reading Annotations",
    "annotations_0bba117ba59bca6990078d40b48dd353": "A reflector is implemented to easily get the annotations defined on a class using an object-oriented interface:",
    "annotations_47438a527756cefbc23d7adedb0aadc8": "Reflect the annotations in the class Example",
    "annotations_42b762d20b4b6d4bfe9cfb054dcbf0f3": "Read the annotations in the class' docblock",
    "annotations_4876b30905b09010b76d07e95898722e": "Traverse the annotations",
    "annotations_00db140955ee87d7d6ce351ad9172c5c": "Print the annotation name",
    "annotations_d7223e046bc5cb1bdf3065fede6c74d3": "Print the number of arguments",
    "annotations_2fe3777bb9cdf2d8fddc2bb932133741": "Print the arguments",
    "annotations_b1925be3e508ddb8090cc414e067aa72": "The annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter. Adapters cache the processed annotations avoiding the need of parse the annotations again and again.",
    "annotations_9ed946ff0c5927c807433adb7b0e9ee5": ":doc:`Phalcon\\\\Annotations\\\\Adapter\\\\Memory <..\/api\/Phalcon_Annotations_Adapter_Memory>` was used in the above example. This adapter only caches the annotations while the request is running, for this reason th adapter is more suitable for development. There are other adapters to swap out when the application is in production stage.",
    "annotations_f83a38934b334d779a6d91747f24f234": "Types of Annotations",
    "annotations_b8c4f164280d0ea40ee09419ba061366": "Annotations may have parameters or not. A parameter could be a simple literal (strings, number, boolean, null), an array, a hashed list or other annotation:",
    "annotations_f741bc8c97ddb297fa5f31c8f98de0cd": "Practical Usage",
    "annotations_919fb667c7546ab25b626125b6d77168": "Next we will explain some practical examples of annotations in PHP applications:",
    "annotations_7d283320fd7531d8889253f5ed266522": "Cache Enabler with Annotations",
    "annotations_a249273e53dbceb5deef37d790f32ad3": "Let's pretend we've the following controller and the developer wants to create a plugin that automatically start the cache if the latest action executed is marked as cacheable. First off all we register a plugin in the Dispatcher service to be notified when a route is executed:",
    "annotations_96d197a2fdcf7ba6f393dcc89284cc0a": "Attach the plugin to 'dispatch' events",
    "annotations_588799c77202b2d2d4748719bf70bc6a": "CacheEnablerPlugin is a plugin that intercept every action executed in the dispatcher enabling the cache if needed:",
    "annotations_c96cb68af4e76b1173ebbd86dcbbce5a": "Parse the annotations in the method currently executed",
    "annotations_afdd7046862b7a53c6c0de785c4ef771": "Check if the method has an annotation 'Cache'",
    "annotations_c8e8e44bdbdba89aeed039e5953e4191": "The method has the annotation 'Cache'",
    "annotations_a1311b1392ee702730c71383a4635db0": "Get the lifetime",
    "annotations_83aa4f69e139473dc062b50930961e43": "Check if there is an user defined cache key",
    "annotations_61036bedcdbfdbc453e22acd4d1e42c9": "Enable the cache for the current method",
    "annotations_414a26b582c57683e19a2b00bbdbbb40": "Now, we can use the annotation in a controller:",
    "annotations_501e20ab8ddd3a4cd24d4deac6beeb64": "Choose template to render",
    "annotations_7e9e9df1430b63f01627c6ba13a1cfb3": "In this example we're going to use annotations to tell :doc:`Phalcon\\\\Mvc\\\\View\\\\Simple <views>` what template must me rendered once the action has been executed:",
    "annotations_d53799f5a2fb02e1152ac8e975d07526": "Annotations Adapters",
    "annotations_1f3c5fb9054e5de8b9e981068a4db586": "This component makes use of adapters to cache or no cache the parsed and processed annotations thus improving the performance or providing facilities to development\/testing:",
    "annotations_206bd6266ccc781d8844f3db2de5d557": "Implementing your own adapters",
    "annotations_4a796a3923bf7a5469b0cf40f2ec3e01": "The :doc:`Phalcon\\\\Annotations\\\\AdapterInterface <..\/api\/Phalcon_Annotations_AdapterInterface>` interface must be implemented in order to create your own annotations adapters or extend the existing ones."
}