{
    "micro_788ba238448c0f22d9c254a70b84065b": "Micro Applications",
    "micro_648846d5e9eabd0bf02300f083324c8f": "With Phalcon you can create \"Micro-Framework like\" applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to implement small applications, APIs and prototypes in a practical way.",
    "micro_e31cd488f01b9bb2939d662e1188325b": "Creating a Micro Application",
    "micro_c3f8dc443c133feb69f8ff42aa51af6a": ":doc:`Phalcon\\\\Mvc\\\\Micro <..\/api\/Phalcon_Mvc_Micro>` is the class responsible for implementing a micro application.",
    "micro_a8a25f2aac05af019b129455c8d4e2eb": "Defining routes",
    "micro_2d41046e7fd9f64847471e5ceb7029b0": "After instantiating the object, you will need to add some routes. :doc:`Phalcon\\\\Mvc\\\\Router <..\/api\/Phalcon_Mvc_Router>` manages routing internally. Routes must always start with \/. A HTTP method constraint is optionally required when defining routes, so as to instruct the router to match only if the request also matches the HTTP methods. The following example shows how to define a route for the method GET:",
    "micro_8a2607a1b3d9c1e7d4c6aa7b1cc42166": "The \"get\" method indicates that the associated HTTP method is GET. The route \/say\/hello\/{name} also has a parameter {$name} that is passed directly to the route handler (the anonymous function). Handlers are executed when a route is matched. A handler could be any callable item in the PHP userland. The following example shows how to define different types of handlers:",
    "micro_7498d8df6b27d927a87b057af1aebf65": "With a function",
    "micro_01da912e811a33919d47c8a74ddfd861": "With a static method",
    "micro_bf0bdbca721b0c4962c839806d309ccb": "With a method in an object",
    "micro_9c35a54a2808945a495840b422be844c": "Anonymous function",
    "micro_316bd31a828df167d7d72ed74c55ead7": "which the route is constrained for:",
    "micro_0acdc84f01c3de1996d30eb564480858": "Matches if the HTTP method is GET",
    "micro_a5f97bf5b879d03818789362e62f6cbe": "Matches if the HTTP method is POST",
    "micro_9685de3866b5e3626a73be2839aef956": "Matches if the HTTP method is PUT",
    "micro_d3e1d13f48d2e7cb88aede1b28427da6": "Matches if the HTTP method is DELETE",
    "micro_363822d61f231b2b8acf67bdbd1dce45": "Matches if the HTTP method is OPTIONS",
    "micro_cfe365e9b04bf44e504d0472f5325182": "Matches if the HTTP method is PATCH",
    "micro_5330c1b15d6f52715e45f926d68be6fc": "Matches if the HTTP method is GET or POST",
    "micro_4a215d25b41d831f94fd7b60c56823b3": "Routes with Parameters",
    "micro_384b68c39a5ef3f758b2911215ecab48": "Defining parameters in routes is very easy as demonstrated above. The name of the parameter has to be enclosed in brackets. Parameter formatting is also available using regular expressions to ensure consistency of data. This is demonstrated in the example below:",
    "micro_34f4f4ed3bc000637cc93e5f7e8260ad": "This route have two parameters and each of them have a format",
    "micro_796c0bcf8150277f840e5a6d386a47de": "Starting Route",
    "micro_a7fdbf88ca37d62f53e85d18ae5798ef": "Normally, the starting route in an application is the route \/, and it will more frequent to be accessed by the method GET. This scenario is coded as follows:",
    "micro_7c335adb80c521502006bc733ed871b0": "This is the start route",
    "micro_06227ff2f8829cdfcedeee027ea7298b": "Rewrite Rules",
    "micro_1be14374a2c637b2bbbb4a3e44954076": "The following rules can be used together with Apache to rewrite the URis:",
    "micro_1e6e4ade63d9748952ec93d9dfac5e20": "Working with Responses",
    "micro_0ce887b41000aeeb257910c81b702ba0": "You are free to produce any kind of response in a handler: directly make an output, use a template engine, include a view, return a json, etc.:",
    "micro_a80ab8816878c89e3adc0a7cece510ec": "Direct output",
    "micro_c1eaa0b85bc04bf5960a7de81a90f98d": "Requiring another file",
    "micro_05fad9a71467b9e171ba2cff2dd29bf0": "Returning a JSON",
    "micro_078c18caff766bfd91b697a505e39f3b": "In addition to that, you have access to the service :doc:`\"response\" <response>`, with which you can manipulate better the response:",
    "micro_9dcceb5181138665045d759a481b4f30": "Set the Content-Type header",
    "micro_b19027a2de9f8ab406282531f7a2fa9e": "Print a file",
    "micro_a9e7eaad6b915f732d9afbbf789280ca": "Or create a response object and return it from the handler:",
    "micro_ea25894af54d5d28a23fb08f9f153999": "Create a response",
    "micro_360d9f80b5a733918b85c894147c64a1": "Pass the content of a file",
    "micro_0511ba07cfb3ddd1a0fced413a2fe537": "Return the response",
    "micro_85ebb8b1fe35876ecb488660ec541ddb": "Making redirections",
    "micro_5c2a4dda48773c7b7b6acea701a709ee": "Redirections could be performed to forward the execution flow to another route:",
    "micro_4e535a56cb99fc005c3d4945a41d7713": "This route makes a redirection to another route",
    "micro_9798a318dd3602294c210880870c54e0": "Generating URLs for Routes",
    "micro_fc9ada7d90a72dbea7d915962b193e3c": ":doc:`Phalcon\\\\Mvc\\\\Url <url>` can be used to produce URLs based on the defined routes. You need to set up a name for the route; by this way the \"url\" service can produce the corresponding URL:",
    "micro_1baeb154b758af70236b382c8a669750": "Set a route with the name \"show-post\"",
    "micro_1666d869e2703e08a0904736d87914a8": ".. show the post here",
    "micro_efe1f7fde2be6aff0a75f3c05941c02c": "produce an URL somewhere",
    "micro_1edd36cbfb44041b7c30b16d6c2d799a": "Interacting with the Dependency Injector",
    "micro_d6d3077e8d6cc151676e5b21b68818d8": "In the micro application, a :doc:`Phalcon\\\\DI\\\\FactoryDefault <di>` services container is created implicitly; additionally you can create outside the application a container to manipulate its services:",
    "micro_ca39bc6c921a2d9027fa80a214dfaa52": "Read a setting from the config",
    "micro_64079488a59faeb550ea2c18104673d3": "The array-syntax is allowed to easily set\/get services in the internal services container:",
    "micro_748cc1e41c403cd76458fba2c9792f85": "Setup the database service",
    "micro_dfe1468d30627f01538ae98507febc3e": "Not-Found Handler",
    "micro_3cd465e50bae5ff20846030afa6f1c91": "When an user tries to access a route that is not defined, the micro application will try to execute the \"Not-Found\" handler. An example of that behavior is below:",
    "micro_4325ce4e9847b0d604ca69b6743b6465": "Models in Micro Applications",
    "micro_be1942297beba9b13307b53413357aae": ":doc:`Models <models>` can be used transparently in Micro Applications, only is required an autoloader to load models:",
    "micro_b2f9f6b99cf3263485d410423f15bf18": "Micro Application Events",
    "micro_faad8ad5ff6758d3fb51fe5f61a6f0f7": ":doc:`Phalcon\\\\Mvc\\\\Micro <..\/api\/Phalcon_Mvc_Micro>` is able to send events to the :doc:`EventsManager <events>` (if it is present). Events are triggered using the type \"micro\". The following events are supported:",
    "micro_0f780737706f95d6efb0e43b8c5b9370": "In the following example, we explain how to control the application security using events:",
    "micro_ccea41bb95ad572b5f593c2d1852d1d4": "Create a events manager",
    "micro_39649819a509d7cf883165be8aeecce9": "Listen all the application events",
    "micro_0fbedd9204dc5db86ea0a5da97f26c15": "Return (false) stop the operation",
    "micro_5f8a807560139399123c35aaaf7132a9": "Bind the events manager to the app",
    "micro_a954117055b58c8596806ed51d04a5bc": "Middleware events",
    "micro_cd46592838085b7b4c94e18b6cca9f5f": "In addition to the events manager, events can be added using the methods 'before', 'after' and 'finish':",
    "micro_7a19577910984437f22b54c1da5b89c4": "Executed before every route is executed",
    "micro_db2cb8a8a9f51fb25719488bfcef8132": "Return false cancels the route execution",
    "micro_ad6dff7322b8f1daafebd4471d17e0d1": "This is executed after the route was executed",
    "micro_7e6106d8f1196faf1366c4a2f2c7ad4e": "This is executed when the request has been served",
    "micro_af61d0ee94d5363bff4723b20b510672": "You can call the methods several times to add more events of the same type:",
    "micro_8e6935bf018891c2e1c0d04360e78cbd": "First 'finish' middleware",
    "micro_bc7d01509c0ceb1a729f0cd93c103f61": "Second 'finish' middleware",
    "micro_91247934de46a6239a1477c5033afebc": "Code for middlewares can be reused using separate classes:",
    "micro_a91acd4a04a8d63b54eca9f777dc2f4a": "Check if the request is cached",
    "micro_d188b24bbaa8eb2535c56aa6ae8fface": "Then add the instance to the application:",
    "micro_8b6387c927d810b580482dcced74c785": "The following middleware events are available:",
    "micro_8d672192be99dfd34509f659e0938d58": "Using Controllers as Handlers",
    "micro_b88f0d3514ad22d0e9b243ac6a6790db": "Medium applications using the Micro\\\\MVC approach may require organize handlers in controllers. You can use :doc:`Phalcon\\\\Mvc\\\\Micro\\\\Collection <..\/api\/Phalcon_Mvc_Micro_Collection>` to group handlers that belongs to controllers:",
    "micro_75189147858476e97696411d319fca0b": "Set the main handler. ie. a controller instance",
    "micro_252cc4557a0572ad7e2a353bc2a19fe6": "Set a common prefix for all routes",
    "micro_8feeee82ecff4dc4ac6b094e4b583f67": "Use the method 'index' in PostsController",
    "micro_fea4f64b27da7c5c89a2d258446ee102": "Use the method 'show' in PostsController",
    "micro_0974007ee9d282272b7beb588446ad82": "The controller 'PostsController' might look like this:",
    "micro_5443e6f2efcec044c0dbcbaeb846bf40": "In the above example the controller is directly instantiated, Collection also have the ability to lazy-load controllers, this option provide better performance loading controllers only if the related routes are matched:",
    "micro_96018889300caae7d7d05f83cd8e858c": "Returning Responses",
    "micro_e11edfcd2de034201315d289420a5edd": "Handlers may return raw responses using :doc:`Phalcon\\\\Http\\\\Response <response>` or a component that implements the relevant interface. When responses are returned by handlers they are automatically sent by the application.",
    "micro_c06c8a627788b3cb7c88a7224b652b37": "Return a response",
    "micro_3eeddf70df32086a3d2bb22803b559d4": "Rendering Views",
    "micro_157185baf0db14498290e302c87df99c": ":doc:`Phalcon\\\\Mvc\\\\View\\\\Simple <views>` can be used to render views, the following example shows how to do that:",
    "micro_18c2a1c6c28339bee817691385f44cbd": "Return a rendered view",
    "micro_81c40fc338aba7ac1b81efcd965882a7": "Render app\/views\/products\/show.phtml passing some variables"
}