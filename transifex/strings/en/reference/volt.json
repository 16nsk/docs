{
    "volt_571e8bcd0fb45cbd5ba7b65afb1874a2": "Volt: Template Engine",
    "volt_602887edfcc45bcce944deb9fc2309be": "Volt is an ultra-fast and designer friendly templating language written in C for PHP. It provides you a set of helpers to write views in an easy way. Volt is highly integrated with other components of Phalcon, just as you can use it as a stand-alone component in your applications.",
    "volt_0c743e0803594efbe6ff61566b75f9ef": "Volt is inspired by Jinja_, originally created by `Armin Ronacher`_. Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt\u2019s syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.",
    "volt_c8e0e36307fcd2c5d61b48c9de3d7d94": "Introduction",
    "volt_c8992cedade57d4cdf29fc2cf9404563": "Volt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:",
    "volt_45c981f6cfc4e37497fa4e9d7a255133": "Activating Volt",
    "volt_a127ba45d4a8a8a2e9eef9430542b4fe": "As other template engines, you may register Volt in the view component, using a new extension or reusing the standard .phtml:",
    "volt_b07ce86350d76294ba3e305d1c6dbe6e": "Registering Volt as template engine",
    "volt_aa14eeb59161107bfd919103ba9240e1": "Use the standard \".phtml\" extension:",
    "volt_b0320f4a950d93f7f09a91c29ce5132b": "Basic Usage",
    "volt_2f1b5c2f3534c62a3dc3282196b93263": "A view consists of Volt code, PHP and HTML. A set of special delimiters is available to enter into Volt mode. {% ... %} is used to execute statements such as for-loops or assign values and {{ ... }}, prints the result of an expression to the template.",
    "volt_4ffce81a2b7bfd57689e79503f201ae4": "Below is a minimal template that illustrates a few basics:",
    "volt_9f7a29f9d928321ecd5a6eac0b6ba071": "Using Phalcon\\\\Mvc\\\\View you can pass variables from the controller to the views. In the above example, three variables were passed to the view: title, menu and post:",
    "volt_c9019da4d8972191e60b297477584b75": "Variables",
    "volt_96bbf01a97ca80f6c209236a02ad816c": "Object variables may have attributes which can be accessed using the syntax: foo.bar. If you are passing arrays, you have to use the square bracket syntax: foo['bar']",
    "volt_c3240673b53669364a902ccbcbbb8ad4": "Filters",
    "volt_ef577735d02c61904e0eb113bc49bcf2": "Variables can be formatted or modified using filters. The pipe operator | is used to apply filters to variables:",
    "volt_23ce658cfe3c5c78e1766cd593ec2dbc": "The following is the list of available built-in filters in Volt:",
    "volt_8ff6794184cb8a0dd75df124bfe57a9d": "Examples:",
    "volt_5c081d944e6f7f7f6c61bcc0a639b48b": "Comments",
    "volt_673b07a8a673a0b45de959a524696e33": "Comments may also be added to a template using the {# ... #} delimiters. All text inside them is just ignored in the final output:",
    "volt_9db4deeb03e5d2de7f9212d5572d19a4": "List of Control Structures",
    "volt_27cd8b5b276dd4e9a96ddeb9af448d47": "Volt provides a set of basic but powerful control structures for use in templates:",
    "volt_62fd3f87581663e4371e40eb51d66e76": "For",
    "volt_dfc11531e4c6065af6db90c0bf559a7a": "Loop over each item in a sequence. The following example shows how to traverse a set of \"robots\" and print his\/her name:",
    "volt_584c8e0a99a6c2347bd93aeca5a2f01e": "for-loops can also be nested:",
    "volt_3dad995a8e74e1a64a73ff4064626122": "You can get the element \"keys\" as in the PHP counterpart using the following syntax:",
    "volt_c979b0ff23a64c329e6020e79670ae50": "An \"if\" evaluation can be optionally set:",
    "volt_f39e582b74ae7b0fae814cf758560d1c": "If an 'else' is defined inside the 'for', it will be executed if the expression in the iterator result in zero iterations:",
    "volt_26514764d360f711f12be795a5f242c9": "Alternative syntax:",
    "volt_6e74bbba1b7f688edbce902f37ef8f5c": "Loop Controls",
    "volt_cb6f33544183d282801d26f19ccb1502": "The 'break' and 'continue' statements can be used to exit from a loop or force an iteration in the current block:",
    "volt_959076d2b0beff36ddd17662b927b4f9": "If",
    "volt_f3cbad907c4b8aee67692607530a21b2": "As PHP, an \"if\" statement checks if an expression is evaluated as true or false:",
    "volt_ff2dc016aa61ec8ac0ae29caa27a6ed5": "The else clause is also supported:",
    "volt_ebb7aa5d020ceb3e406fd124cce8637a": "The 'elseif' control flow structure can be used together with if to emulate a 'switch' block:",
    "volt_efa793b5e2da5b64c56a613af1dc1bc8": "Loop Context",
    "volt_8d914b2dc5f95fcf2fc984a83379ce92": "A special variable is available inside 'for' loops providing you information about",
    "volt_e65acd0fd0d03ec2e02d25835e130176": "Assignments",
    "volt_90654b2689e90206e2e44e780e2e7e58": "Variables may be changed in a template using the instruction \"set\":",
    "volt_77922ab3b532acd27ea1577e8fa7b1b1": "Multiple assignments are allowed in the same instruction:",
    "volt_ac7eb0e28ebbd2970e0bc5decd9b856f": "Additionally, you can use compound assignment operators:",
    "volt_b3bb52efc0f44e398f3704c2d355f296": "The following operators are available:",
    "volt_9d0fb94a51e6c917886df9148183fca6": "Expressions",
    "volt_4b639c382d4725994e39c335c6d5b213": "Volt provides a basic set of expression support, including literals and common operators.",
    "volt_ee8dd2766fcb8a457d5b26d2cd68f8a3": "A expression can be evaluated and printed using the '{{' and '}}' delimiters:",
    "volt_67bb9f27cd3e7e4de99a74c9b6b6a549": "If an expression needs to be evaluated without be printed the 'do' statement can be used:",
    "volt_c1c360db85a10f0534261b4002a0a18b": "Literals",
    "volt_8975fdee3cfb0570bd8678b75f6946e8": "The following literals are supported:",
    "volt_71eee481a6c8310dcec0dc7189151d35": "Arrays",
    "volt_6f40ab5ad99ce887bfbdee755f00a03d": "Whether you're using PHP 5.3, 5.4 or 5.5, you can create arrays by enclosing a list of values in square brackets:",
    "volt_4ca697d91e15bb1a10700cd579067f49": "Curly braces also can be used to define arrays or hashes:",
    "volt_f71cfaa0f29dcbf3329bfee182f80554": "Math",
    "volt_4608f8c719712039f57eecfdfc0ab6ad": "You may make calculations in templates using the following operators:",
    "volt_8daa7d30f3cd9a3a4f4be23c9bd7ed9a": "Comparisons",
    "volt_c22664d2a7b40f64b246cb233d00664f": "The following comparison operators are available:",
    "volt_4fe4081cffeaece4d9aecd74b4eb8914": "Logic",
    "volt_162d2ac97f013d264a84a07365114a80": "Logic operators are useful in the \"if\" expression evaluation to combine multiple tests:",
    "volt_93435309515deb73fce1c3d1b568bc92": "Other Operators",
    "volt_0b2bd9c764cd885c45e7a6c0858eb036": "Additional operators seen the following operators are available:",
    "volt_20749e95ee2310631ad2e86488a301b8": "The following example shows how to use operators:",
    "volt_6a2499b69a7e0589ed54afa226c18861": "Tests",
    "volt_b0c360ed172ceffde393b0b4988e8755": "Tests can be used to test if a variable has a valid expected value. The operator \"is\" is used to perform the tests:",
    "volt_8792d66d989effba55c2a8029f73e1ac": "The following built-in tests are available in Volt:",
    "volt_8ebd1e2cfafc15872b017437f8917eb2": "More examples:",
    "volt_83958ae729519ff5491ec0dd9fe759df": "Macros",
    "volt_9ac27aedade0d502a3d25ace895b506d": "Macros can be used to reuse logic in a template, they act as PHP functions, can receive parameters and return values:",
    "volt_96292b255db8dd893f2454d9d404d0ef": "When calling macros, parameters can be passed by name:",
    "volt_1722014db38e343cdceaa1fa29ce9a8f": "Macros can return values:",
    "volt_3efedb9100e7169c8d720e7c72d7c789": "And receive optional parameters:",
    "volt_37bc16dc011e098a69b4c1ca892ddb12": "Using Tag Helpers",
    "volt_bd9998800f9ac1269410c0b8bada309c": "Volt is highly integrated with :doc:`Phalcon\\\\Tag <tags>`, so it's easy to use the helpers provided by that component in a Volt template:",
    "volt_6d029ed559ecc66fe449e9d1476653a0": "The following PHP is generated:",
    "volt_1b3b99f66306629b2e21ef3384dec973": "To call a Phalcon\\\\Tag helper, you only need to call an uncamelized version of the method:",
    "volt_800dd778c0248873014b5d46b6bf8de9": "Functions",
    "volt_8da62e4de22c35c5145389c947a3836e": "The following built-in functions are available in Volt:",
    "volt_e06179c3e64394a27a5d1a1957a16f83": "View Integration",
    "volt_b0ca2ce1f1c6cd73aad03c81e846a485": "Also, Volt is integrated with :doc:`Phalcon\\\\Mvc\\\\View <views>`, you can play with the view hierarchy and include partials as well:",
    "volt_a53a19d535a9faa21843c6cf3748ad7d": "A partial is included in runtime, Volt also provides \"include\", this compiles the content of a view and returns its contents as part of the view which was included:",
    "volt_28a7b018cd0d249f86423536e06961c9": "Include",
    "volt_f227a9159a2de6cdf144f05ad35836f9": "'include' has a special behavior that will help us improve performance a bit when using Volt, if you specify the extension when including the file and it exists when the template is compiled, Volt can inline the contents of the template in the parent template where it's included. Templates aren't inlined if the 'include' have variables passed with 'with':",
    "volt_bf76ea164e27de7336aaa9146ea1ea05": "Template Inheritance",
    "volt_452075260d726282b3506d29ab4dc91e": "With template inheritance you can create base templates that can be extended by others templates allowing to reuse code. A base template define *blocks* than can be overridden by a child template. Let's pretend that we have the following base template:",
    "volt_e27605de512c4520ba4cff8c2360dd7c": "From other template we could extend the base template replacing the blocks:",
    "volt_bb229e12234771d6175e4c357d806936": "Not all blocks must be replaced at a child template, only those that are needed. The final output produced will be the following:",
    "volt_6be2debfc1f89c4307f563a5985f71a6": "Multiple Inheritance",
    "volt_171554bc64b2ea7ab5a3c6b34e8f10fe": "Extended templates can extend other templates. The following example illustrates this:",
    "volt_ebae95d6169b5a402e916720cfce3725": "Template \"layout.volt\" extends \"main.volt\"",
    "volt_6f881fe0de2acd261c7325233fac3e6b": "Finally a view that extends \"layout.volt\":",
    "volt_5a40902b0cbd394774f14fc165ad04a1": "Rendering \"index.volt\" produces:",
    "volt_d5ea84676990edc8a9ff87ee9616866a": "Note the call to the function \"super()\". With that function it's possible to render the contents of the parent block.",
    "volt_1530c1d48a32cccf6aee30317cb62004": "As partials, the path set to \"extends\" is a relative path under the current views directory (i.e. app\/views\/).",
    "volt_33fc9d5ccdfdac6f9b3a6b198c182701": "Autoescape mode",
    "volt_825823aba16d331414c4b6212399156d": "You can enable auto-escaping of all variables printed in a block using the autoescape mode:",
    "volt_b8c97bce4488a1fb733ae5e45de2fb72": "Setting up the Volt Engine",
    "volt_a6e9dbf514ed4b3c2091a71de327231b": "Volt can be configured to alter its default behavior, the following example explain how to do that:",
    "volt_6eb1b0275db340abd7417f83e40fece8": "Register Volt as a service",
    "volt_4cc0afe773f64be53a0dec14d4d624fd": "Register Volt as template engine",
    "volt_b7967d27f624e9c7b4b5b7b66f0cc467": "If you do not want to reuse Volt as a service you can pass an anonymous function to register the engine instead of a service name:",
    "volt_7c198915869603e8c84a190009dacfef": "Register Volt as template engine with an anonymous function",
    "volt_3df2a4fc37af7f679704f2fe71b4ebf8": "set some options here",
    "volt_ce5773f862cbab6b15b61a824f19da36": "The following options are available in Volt:",
    "volt_54ea27e9f7cbb9f7f499526bc0b33dd3": "The compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:",
    "volt_4db4ebd567bd7d18ce0179d999e588ac": "Just append the .php extension to the template path",
    "volt_8dab661ce06ac7e9d9fa79268f69238b": "leaving the compiled templates in the same directory",
    "volt_f61b07b90556714f2a151dd18c8c47cc": "\u200b\u200bRecursively create the same structure in another directory",
    "volt_c35aaed9c35a2d5e1e7949c14f87d7da": "Extending Volt",
    "volt_4f614d2e98c02937485f28e55de1ff48": "Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.",
    "volt_3d5f4485a2f56b1d388425052b976315": "The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.",
    "volt_eff81ebb2e4622502c2770ff681205ca": "Functions act as normal PHP functions, a valid string name is required as function name. Functions can be added using two strategies, returning a simple string or using an anonymous function. Always is required that the chosen strategy returns a valid PHP string expression:",
    "volt_f1a88763bba2b44f9c25a709a778aa18": "This binds the function name 'shuffle' in Volt to the PHP function 'str_shuffle'",
    "volt_fd1e231592832bc2a5107f9e237d4f61": "Register the function with an anonymous function. This case we use $resolvedArgs to pass the arguments exactly as were passed in the arguments:",
    "volt_bdb996fcd57717bf161fc97f8b78e04d": "Treat the arguments independently and unresolved:",
    "volt_382b3658a3599ee7466e05218e9ec485": "Resolve the first argument",
    "volt_1752d6ce4e2c6de86227a395c77c3fd8": "Checks if the second argument was passed",
    "volt_160a920bc4968e3cfd622231dde174bc": "Use '10' as default",
    "volt_6f0da7753f00daf5999a4495d6f86816": "Generate the code based on some function availability:",
    "volt_bb8fbd3e074da81e65b6f174515447a2": "Built-in functions can be overridden adding a function with its name:",
    "volt_72c544dbccfac5627f854622d434647a": "Replace built-in function dump",
    "volt_701b73703153b72f1241fb6f987d7971": "A filter has the following form in a template: leftExpr|name(optional-args). Adding new filters is similar as seen with the functions:",
    "volt_3c9486de45f5822473603d9b4d40a5cb": "This creates a filter 'hash' that uses the PHP function 'md5'",
    "volt_a94bf3d5a19e65a73be6d782a90bced2": "Built-in filters can be overridden adding a function with its name:",
    "volt_a7eb88ca5044727dd80b6c2c0a109680": "Replace built-in filter 'capitalize'",
    "volt_b3579f83bd62b25c9709fdbca3bf6161": "Extensions",
    "volt_7bff1818d33f6c3e4ae5bac1041258c1": "With extensions the developer has more flexibility to extend the template engine, and override the compilation of \u200ba specific instruction, change the behavior of an expression or operator, add functions\/filters, and more.",
    "volt_0a168806eb5241d25a16d987d09e9510": "An extension is a class that implements the events triggered by Volt as a method of itself.",
    "volt_b132dbd03fdf508b2f1d210f9a385708": "For example, the class below allows to use any PHP function in Volt:",
    "volt_d5a6d98c9404a6720bce0f4380ef5077": "The above class implements the method 'compileFunction' which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn't return an string the compilation is done using the default behavior provided by the engine.",
    "volt_29ef643fc01fb50deb0745843ae0df21": "The following compilation events are available to be implemented in extensions:",
    "volt_c53d1abf62ee18eb0b40402445443bb6": "Volt extensions must be in registered in the compiler making them available in compile time:",
    "volt_1716b775e668aa844892030c0180b1d2": "Register the extension in the compiler",
    "volt_e2809b8367f23b279052a0c57a34b5ac": "Caching view fragments",
    "volt_a9ac5104121ee701d914b8a21f4295e7": "With Volt it's easy cache view fragments. This caching improves performance preventing that the contents of a block from being executed by PHP each time the view is displayed:",
    "volt_b129e2652902c73176aff8e8886377b5": "Setting a specific number of seconds:",
    "volt_e9f47d31e2ad5021e1f9bca72ff49aa9": "Any valid expression can be used as cache key:",
    "volt_fa5c494d6a43bf4695d7f529ef52b144": "The caching is done by the :doc:`Phalcon\\\\Cache <cache>` component via the view component. Learn more about how this integration works in the section :doc:`\"Caching View Fragments\" <views>`.",
    "volt_c45c12e738f6cb287f117d8bac15285b": "Inject Services into a Template",
    "volt_ebd73ba8f93a225dbf5dfd764d03ba90": "If a service container (DI) is available for Volt, you can use the services by only accessing the name of the service in the template:",
    "volt_d3e54f7c04408d6d1a884897bca4169e": "Stand-alone component",
    "volt_f060f739765fe9b113aa46c2df47a2d2": "Using Volt in a stand-alone mode can be demonstrated below:",
    "volt_d35206c45f85ed1c51d60b6eeb1788c6": "Create a compiler",
    "volt_1713c75f8f2dc85950bd4f351d4c8526": "Optionally add some options",
    "volt_4036fad262b5149ba792d4e0a2fff044": "Compile a template string returning PHP code",
    "volt_ba9d724e56a24793fa15b9dda9ac73cf": "Compile a template in a file specifying the destination file",
    "volt_b6769e95cd189feb2dc467a58d4e1c5e": "Compile a template in a file based on the options passed to the compiler",
    "volt_7914c55377d1cd19e405d298b74750ed": "Require the compiled templated (optional)",
    "volt_b0492394b589b5ff8f6fb98048d65d8f": "External Resources",
    "volt_501661ad4cd8d088d545c19eed22e672": "* A bundle for Sublime\/Textmate is available `here <https:\/\/github.com\/phalcon\/volt-sublime-textmate>`_ * `Album-O-Rama <http:\/\/album-o-rama.phalconphp.com>`_ is a sample application using Volt as template engine, [`Github <https:\/\/github.com\/phalcon\/album-o-rama>`_] * `Our website <http:\/\/phalconphp.com>`_ is running using Volt as template engine, [`Github <https:\/\/github.com\/phalcon\/website>`_] * `Phosphorum <http:\/\/forum.phalconphp.com>`_, the Phalcon's forum, also uses Volt, [`Github <https:\/\/github.com\/phalcon\/forum>`_] * `V\u00f6kur\u00f3 <http:\/\/vokuro.phalconphp.com>`_, is another sample application that use Volt, [`Github <https:\/\/github.com\/phalcon\/vokuro>`_]"
}