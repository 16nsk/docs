{
    "logging_e1e77dd383c1258dad2a6817a1c6fc23": "Logging",
    "logging_41974eb84205cc83111b0fdc785027b5": ":doc:`Phalcon\\\\Logger <..\/api\/Phalcon_Logger>` is a component whose purpose is to provide logging services for applications. It offers logging to different backends using different adapters. It also offers transaction logging, configuration options, different formats and filters. You can use the :doc:`Phalcon\\\\Logger <..\/api\/Phalcon_Logger>` for every logging need your application has, from debugging processes to tracing application flow.",
    "logging_59016d3191a4f3dbf5870903d350a278": "Adapters",
    "logging_7719970f241857ca9e504df050236f81": "This component makes use of adapters to store the logged messages. The use of adapters allows for a common interface for logging while switching backends if necessary. The adapters supported are:",
    "logging_09b0ceccae27e6c1ca869a1550eedb8c": "Creating a Log",
    "logging_e63e0c079b7fee380985d6e84e61a2b6": "The example below shows how to create a log and add messages to it:",
    "logging_cb5d3142af07aef2127316bfd68d9d19": "The log generated is below:",
    "logging_70f40070204552b5f24220685f1af1d5": "Transactions",
    "logging_4fc46c960ea33af192240eab46a09109": "Logging data to an adapter i.e. File (file system) is always an expensive operation in terms of performance. To combat that, you can take advantage of logging transactions. Transactions store log data temporarily in memory and later on write the data to the relevant adapter (File in this case) in a single atomic operation.",
    "logging_2a70cdafe033470e9b3f6f78913a4f72": "Create the logger",
    "logging_a621366cd5b2907e40d03bd48faf18e5": "Start a transaction",
    "logging_f92911d145c18014b3d99deab047b7fd": "Add messages",
    "logging_3d10059e9fa0ef6e28e2c5c43d9399da": "Commit messages to file",
    "logging_56a89ee6c74eb7e75196fb76e0a4bb02": "Logging to Multiple Handlers",
    "logging_bf9c3e53094ec01daf0f9301d7a9ba1f": ":doc:`Phalcon\\\\Logger <..\/api\/Phalcon_Logger>` allows to send messages to multiple handlers with a just single call:",
    "logging_1241b25452d292af9143221031ca6dd1": "The messages are sent to the handlers in the order they where registered.",
    "logging_e878a9635e264ea1629ff323631591f3": "Message Formatting",
    "logging_a870e6e66975cb06cf0285e1c849faec": "This component makes use of 'formatters' to format messages before sent them to the backend. The formatters available are:",
    "logging_36ddd603e810700ce82861595cb6d9b7": "Line Formatter",
    "logging_aa191ace515bda8040360c2ff89b5485": "Formats the messages using a one-line string. The default logging format is:",
    "logging_de600f2e9541eff7ef136e299fe2b92b": "[%date%][%type%] %message%",
    "logging_0c68f54938d932495a36e96308128be9": "You can change the default format using setFormat(), this allows you to change the format of the logged messages by defining your own. The log format variables allowed are:",
    "logging_fe5621cbba6fdafc0fc077ca00bab123": "The example below shows how to change the log format:",
    "logging_d2677d2726b25c363b042845f08899c8": "Changing the logger format",
    "logging_45b978c53f59c4bf462869a1c482ca20": "Implementing your own formatters",
    "logging_4b040fe462407c8942f9ad3ef57a973d": "The :doc:`Phalcon\\\\Logger\\\\FormatterInterface <..\/api\/Phalcon_Logger_FormatterInterface>` interface must be implemented in order to create your own logger formatter or extend the existing ones.",
    "logging_0f7a0691a4100d4ef026cdbb15b0d517": "The following examples show the basic use of each adapter:",
    "logging_732096ca5a9f846ece0a3c3c969a6dc3": "Stream Logger",
    "logging_91d041471960997a18507b9ecc95a747": "The stream logger writes messages to a valid registered stream in PHP. A list of streams is available `here <http:\/\/php.net\/manual\/en\/wrappers.php>`_:",
    "logging_50d8004398b59f8b8cf24c2fc36723f2": "Opens a stream using zlib compression",
    "logging_c2515f4bda92df933bc062b6ae77f9c9": "Writes the logs to stderr",
    "logging_ee91c22182c28068ea54db509b31fa5a": "File Logger",
    "logging_fda2a76fe7505c9bff333c04c17070a2": "This logger uses plain files to log any kind of data. By default all logger files are open using append mode which open the files for writing only; placing the file pointer at the end of the file. If the file does not exist, attempt to create it. You can change this mode passing additional options to the constructor:",
    "logging_43103833c8e0bdad1e1a92e84a01e51f": "Create the file logger in 'w' mode",
    "logging_d7d7d7efa5d766b6f1f59b94694a31d4": "Syslog Logger",
    "logging_23e96bb8081304bbd3f86587f6c62662": "This logger sends messages to the system logger. The syslog behavior may vary from one operating system to another.",
    "logging_23cb76671b38f735ce0e4ee4e7795897": "Basic Usage",
    "logging_0a5a93c53e0f5caf32e2c3b8e1ae0782": "Setting ident\/mode\/facility",
    "logging_8b5f240b2cf1e114016ebd19135f8963": "FirePHP Logger",
    "logging_281495c2d33850fd0604677e8f37a6e8": "This logger sends messages to the FirePHP."
}