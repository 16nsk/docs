{
    "validation_c81f893f5539efed7a6b2aae2d783e35": "Validation",
    "validation_df9655796647575843a59b2aaa288feb": "Phalcon\\\\Validation is an independent validation component that validates an arbitrary set of data. This component can be used to implement validation rules on data objects that do not belong to a model or collection.",
    "validation_09046bd05925c7ff83bddee4094d745a": "The following example shows its basic usage:",
    "validation_8119eaef07bf942b708b8da28ae405ac": "The loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.",
    "validation_3093b0011464d4bd39869dbdc5a8689c": "Initializing Validation",
    "validation_d086513db60a7c3e4d84f23a05e52c24": "Validation chains can be initialized in a direct manner by just adding validators to the Phalcon\\\\Validation object. You can put your validations in a separate file for better re-use code and organization:",
    "validation_533a67e85a7f17b61b21cb88a9e1f07c": "Validators",
    "validation_1b1888abf001898488a01251b441c267": "Phalcon exposes a set of built-in validators for this component:",
    "validation_fd4983df29ddaf7800070ffeec35afe0": "Additional validators can be created by the developer. The following example explains how to create a validator for this component:",
    "validation_6fbfb65077407a190ad22e8e77664ac2": "It is important that validators return a valid boolean value indicating if the validation was successful or not.",
    "validation_39d425478bbbd8c190c1571d56968719": "Validation Messages",
    "validation_025092c74cf3eac36210de122720cf4b": ":doc:`Phalcon\\\\Validation <..\/api\/Phalcon_Validation>` has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the validation processes.",
    "validation_c2207d0096c2817a5a69f0dfb16f314f": "Each message consists of an instance of the class :doc:`Phalcon\\\\Validation\\\\Message <..\/api\/Phalcon_Mvc_Model_Message>`. The set of messages generated can be retrieved with the getMessages() method. Each message provides extended information like the attribute that generated the message or the message type:",
    "validation_aa193b670cd59296d6003822c817edba": "The getMessages() method can be overridden in a validation class to replace\/translate the default messages generated by the validators:",
    "validation_8a7d25a8a7f1e5b02b927a37b57351d9": "Or you can pass a 'message' parameter to change the default message in each validator:",
    "validation_052c3afa0415b025bc6d86d5f3490223": "By default, 'getMessages' returns all the messages generated during validation. You can filter messages for a specific field using the 'filter' method:",
    "validation_d260a18b544978c7f97b844025954db4": "Filter only the messages generated for the field 'name'",
    "validation_3d8f66bb7ca87432cb0e3125363aa301": "Filtering of Data",
    "validation_507eaf899079c0b1f652ad21b5e36385": "Data can be filtered prior to the validation ensuring that malicious or incorrect data is not validated.",
    "validation_35fa191bb4e9b7e286f1b860019edaa7": "Filter any extra space",
    "validation_839737867781eaea4b36c49d0d1641e7": "Filtering and sanitizing is performed using the :doc:`filter <filter>`: component. You can add more filters to this component or use the built-in ones.",
    "validation_ff1d08a3b2570996565ef460daea6026": "Validation Events",
    "validation_b1f211a73fad538fa52a2eabf8250f3b": "When validations are organized in classes, you can implement the 'beforeValidation' and 'afterValidation' methods to perform additional checks, filters, clean-up, etc. If 'beforeValidation' method returns false the validation is automatically cancelled:",
    "validation_cde6f56c01569b440032e464aad1e292": "... add additional messages or perform more validations",
    "validation_54e3ab73caaa54617147ed87e52d7d39": "Cancelling Validations",
    "validation_9880d3237fc267dac86acd10f9425f79": "By default all validators assigned to a field are tested regardless if one of them have failed or not. You can change this behavior by telling the validation component which validator may stop the validation:",
    "validation_467ddfc7beb4e277ae522fc4663aab79": "The first validator has the option 'cancelOnFail' with a value of true, therefore if that validator fails the remaining validators in the chain are not executed.",
    "validation_c9189a5d2d769d96466c62617e4f90d0": "If you are creating custom validators you can dynamically stop the validation chain by setting the 'cancelOnFail' option:"
}