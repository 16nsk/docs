{
    "debug_4eface2a7de663488d577e631a23894c": "Debugging Applications",
    "debug_d41d8cd98f00b204e9800998ecf8427e": "",
    "debug_c6e61d0ed51257a83ac8eaeb5f14ebff": "PHP offers tools to debug applications with notices, warnings, errors and exceptions. The `Exception class`_ offers information such as the file, line, message, numeric code, backtrace etc. on where an error occurred. OOP frameworks like Phalcon mainly use this class to encapsulate this functionality and provide information back to the developer or user.",
    "debug_210c8aebc2022b155df5c183bb5cb17f": "Despite being written in C, Phalcon executes methods in the PHP userland, providing the debug capability that any other application or framework written in PHP has.",
    "debug_73f8f95e13a4d7741a9512277b7c4d7f": "Catching Exceptions",
    "debug_523cc31a1df32a41cce5d95b2c0715e8": "Throughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try\/catch block:",
    "debug_3712839acd032789c6e0543d9ffbb3b8": "... some phalcon\/php code",
    "debug_22849b339431bce03f0835fc32fb96f2": "Any exception thrown within the block is captured in the variable $e. A :doc:`Phalcon\\\\Exception <..\/api\/Phalcon_Exception>` extends the PHP `Exception class`_ and is used to understand whether the exception came from Phalcon or PHP itself.",
    "debug_ff7c8cba77174e8b62a1422d036000c9": "All exceptions generated by PHP are based on the `Exception class`_, and have at least the following elements:",
    "debug_34812fc23abd0aa6627bef42421964f1": "Retrieving information from :doc:`Phalcon\\\\Exception <..\/api\/Phalcon_Exception>` is the same as PHP's `Exception class`_:",
    "debug_f36f4e4ca08d1a24df7acfd497195a50": "... app code ...",
    "debug_dd49308420b07ae1c4378aae66682c09": "It's therefore easy to find which file and line of the application's code generated the exception, as well as the components involved in generating the exception:",
    "debug_072141f2639a9394589c5183686392f0": "As you can see from the above output the Phalcon's classes and methods are displayed just like any other component, and even showing the parameters that were invoked in every call. The method `Exception::getTrace`_ provides additional information if needed.",
    "debug_6815edaaedecedc259ccc2bf3bc9a8ab": "Debug component",
    "debug_34bf6cfe26a83342319188f04ea2a32b": "Phalcon provides a debug component that allows the developer to easily find errors produced in an application created with the framework.",
    "debug_e5db5bbfbd5738ab0936ea57d5410a0d": "The following screencast explains how it works:",
    "debug_bf2492c60695469d81765ce32b7d132a": "To enable it, add the following to your bootstrap:",
    "debug_3f66fbeb4a21fd9a31b32e75e9a6f51b": "Any Try\/Catch blocks must be removed or disabled to make this component work properly.",
    "debug_3876e10bb15f5eb320587acd70db3601": "Reflection and Introspection",
    "debug_0a2715f107ac2b7b5c8c256d6a7384af": "Any instance of a Phalcon class offers exactly the same behavior than a PHP normal one. It's possible to use the `Reflection API`_ or simply print any object to show how is its internal state:",
    "debug_01a46a264a9d32cbe26455af4cb3f7db": "It's easy to know the internal state of any object. The above example prints the following:",
    "debug_73ed294323e5fd47b34d920d3ad4e48d": "Using XDebug",
    "debug_6f164c8227eee5c2e705532bdeea1ab4": "XDebug_ is an amazing tool that complements the debugging of PHP applications. It is also a C extension for PHP, and you can use it together with Phalcon without additional configuration or side effects.",
    "debug_3178da61cc3ae187bf088906d7a25306": "The following screencast shows a Xdebug session with Phalcon:",
    "debug_ae74bd6270e7f30b07d3ee763d6ea7e9": "Once you have xdebug installed, you can use its API to get a more detailed information about exceptions and messages.",
    "debug_0a9948cd276e0d53c835519557be16f9": "The following example implements xdebug_print_function_stack_ to stop the execution and generate a backtrace",
    "debug_5075bcdc88feaddacaeb503556b2d272": "Request variables from html form",
    "debug_5bc40121d68374829702a4cae1d6561f": "Stop execution and show a backtrace",
    "debug_165a70665697d1966f0c513b23093766": "Store and check for errors",
    "debug_6410c830e5acbec2b28846e176751584": "In this instance, Xdebug will also show us the variables in the local scope, and a backtrace as well:",
    "debug_f2d045974b2e64a0c299b91b3448ffda": "Xdebug provides several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the `XDebug documentation`_ for more information."
}