{
    "tutorial-rest_84d6814c39aad10b26d97af056279a18": "Tutorial 3: Creating a Simple REST API",
    "tutorial-rest_26bb72e995bd5df1986ace55a4facb04": "In this tutorial, we will explain how to create a simple application that provides a RESTful_ API using the different HTTP methods:",
    "tutorial-rest_f48638df470566c3fa766d84abd13fb2": "* GET to retrieve and search data * POST to add data * PUT to update data * DELETE to delete data",
    "tutorial-rest_de7a3eed9a59d47b9d09135314d297b0": "Defining the API",
    "tutorial-rest_dc2ae90fdb0e1a1b5ed87ba88e60d3d6": "The API consists of the following methods:",
    "tutorial-rest_5c324116ca038c813884951ceaef82a6": "Creating the Application",
    "tutorial-rest_832519444cf8cf8cfddf582691cb6002": "As the application is so simple, we will not implement any full MVC environment to develop it. In this case, we will use a :doc:`micro application <micro>` to meet our goal.",
    "tutorial-rest_3de37a33c247c456a388861f2bdcc755": "The following file structure is more than enough:",
    "tutorial-rest_b52d147d1fe56301a39815a548fa9c8c": "First, we need an .htaccess file that contains all the rules to rewrite the URIs to the index.php file, that is our application:",
    "tutorial-rest_2de10b838279f7a1b98fbf81f84c855e": "Then, in the index.php file we create the following:",
    "tutorial-rest_539b3e63c25aa801f010dbc03afd004b": "define the routes here",
    "tutorial-rest_c5bdd1dcaebc8333b5ee2aa4fdf59edb": "Now we will create the routes as we defined above:",
    "tutorial-rest_19ff92d2013609de09201b6a1442d60c": "Retrieves all robots",
    "tutorial-rest_fcccedd69d1b9bb08f7c0bc6ce78ff8e": "Searches for robots with $name in their name",
    "tutorial-rest_2ecc05873abdbd9f5c2f34228b8a100f": "Retrieves robots based on primary key",
    "tutorial-rest_ba09a4f2dfcf0f791aa6a30cbda7f65a": "Adds a new robot",
    "tutorial-rest_9f4ce8962a6eb3d3e4f77eb498535139": "Updates robots based on primary key",
    "tutorial-rest_b9c7c89947c393f32a8ae30e2606925f": "Deletes robots based on primary key",
    "tutorial-rest_190c1cf65b799928f06a3169276c224a": "Each route is defined with a method with the same name as the HTTP method, as first parameter we pass a route pattern, followed by a handler. In this case, the handler is an anonymous function. The following route: '\/api\/robots\/{id:[0-9]+}', by example, explicitly sets that the \"id\" parameter must have a numeric format.",
    "tutorial-rest_aff08db4a501b540bbefb8d4a7d06a4b": "When a defined route matches the requested URI then the application executes the corresponding handler.",
    "tutorial-rest_0199fa0781bc2af2736301fc88a34dff": "Creating a Model",
    "tutorial-rest_248a5b13f805b6df66e79e4a4a6a80bb": "Our API provides information about 'robots', these data are stored in a database. The following model allows us to access that table in an object-oriented way. We have implemented some business rules using built-in validators and simple validations. Doing this will give us the peace of mind that saved data meet the requirements of our application:",
    "tutorial-rest_5e65e76efd7358de97543f933cccef32": "Type must be: droid, mechanical or virtual",
    "tutorial-rest_c096a65878ddaac4ce0b5ffc8753aa76": "Robot name must be unique",
    "tutorial-rest_5a50ccbf7dc2a5082848a95ef3713649": "Year cannot be less than zero",
    "tutorial-rest_76db80d81b38e1a1ddb78641d3191f9f": "Check if any messages have been produced",
    "tutorial-rest_27aad3837a5f3a11f2ca1050a32c6680": "Now, we must set up a connection to be used by this model and load it within our app:",
    "tutorial-rest_9c0e7e2aff8e1bbecc3e75d851f8c89b": "Use Loader() to autoload our model",
    "tutorial-rest_d4fdac308ee18799a8777c00c85cffcd": "Set up the database service",
    "tutorial-rest_cb96f1919ab7315846cc2ad0249ddcac": "Create and bind the DI to the application",
    "tutorial-rest_afcfb569def26d4afb31ed1fd293b041": "Retrieving Data",
    "tutorial-rest_e8decbd7ff3d33202bfa8c228b44d4b3": "The first \"handler\" that we will implement is which by method GET returns all available robots. Let's use PHQL to perform this simple query returning the results as JSON:",
    "tutorial-rest_c7b41850d249a062e80610b6dcca6b07": "translates to the right SQL statements depending on the database system we are using. The clause \"use\" in the anonymous function allows us to pass some variables from the global to local scope easily.",
    "tutorial-rest_5d05802c2034051acc6e92d4c60d9413": "The searching by name handler would look like:",
    "tutorial-rest_12e76a2b259ba344f07fbe50be73c2e6": "Searching by the field \"id\" it's quite similar, in this case, we're also notifying if the robot was found or not:",
    "tutorial-rest_ea25894af54d5d28a23fb08f9f153999": "Create a response",
    "tutorial-rest_d70f9732a93804895552d4041ad92122": "Inserting Data",
    "tutorial-rest_ea7792bcb128f13873a0b38875008365": "Taking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion:",
    "tutorial-rest_f5c14028b1e679c69928688cc85a571c": "Check if the insertion was successful",
    "tutorial-rest_119ca4b05ef54588a2c7015f0293e6e1": "Change the HTTP status",
    "tutorial-rest_9b9c03a98a2fcb2d04f11a1d6ec7584c": "Send errors to the client",
    "tutorial-rest_7e95ceac582a15ef3f27c690a4862c5a": "Updating Data",
    "tutorial-rest_7ee3d9762d971ea9098b67c73223862a": "The data update is similar to insertion. The \"id\" passed as parameter indicates what robot must be updated:",
    "tutorial-rest_12f49100cf21592b1bed0daa5b42bcd9": "Deleting Data",
    "tutorial-rest_a22e0afc3c116152d64bb2ffd8f8e2be": "The data delete is similar to update. The \"id\" passed as parameter indicates what robot must be deleted:",
    "tutorial-rest_51eee60ebdb66fb5770c4b406440fa69": "Testing our Application",
    "tutorial-rest_a444b76b57459a80926fdb40855d43a2": "Using curl_ we'll test every route in our application verifying its proper operation:",
    "tutorial-rest_3d2d6a49b68a620826b98699fcf385c7": "Obtain all the robots:",
    "tutorial-rest_41285e4a0ec6a25351e2d5edc06f7314": "localhost\/my-rest-api\/api\/robots",
    "tutorial-rest_bf489f2e18b48c2f62bc412fafde1f6e": "Search a robot by its name:",
    "tutorial-rest_b6f9a34fc994c4ceb77dbc8ec3a3c2c0": "localhost\/my-rest-api\/api\/robots\/search\/Astro",
    "tutorial-rest_b9dffca52615184a38ea1e4489835f73": "Obtain a robot by its id:",
    "tutorial-rest_9d198cf3c21c49511427348e222c8873": "localhost\/my-rest-api\/api\/robots\/3",
    "tutorial-rest_65b7312d59b7814f9bfa796c27ab68b6": "Insert a new robot:",
    "tutorial-rest_d4a9e00a9a3acabf59087aa2cf8fadba": "Try to insert a new robot with the name of an existing robot:",
    "tutorial-rest_f92c146e69ddce8c07d9e73c23321f2a": "Or update a robot with an unknown type:",
    "tutorial-rest_76e5a40776e0a1197e6a888715e1a49d": "localhost\/my-rest-api\/api\/robots\/4",
    "tutorial-rest_b66492ddc59541e4dd170275cf479f68": "Finally, delete a robot:",
    "tutorial-rest_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "tutorial-rest_dfa8686bc5cdfc90ec5aea91e2f73291": "As we have seen, develop a RESTful API with Phalcon is easy. Later in the documentation we'll explain in detail how to use micro applications and the :doc:`PHQL <phql>` language."
}