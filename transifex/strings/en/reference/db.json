{
    "db_9aa0bb0b13e498761331dad3fb71c147": "Database Abstraction Layer",
    "db_c56879b8ed347ed1ba9bd4090926fe2a": ":doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>` is the component behind :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` that powers the model layer in the framework. It consists of an independent high-level abstraction layer for database systems completely written in C.",
    "db_57a3a9bee3091b994011058761abea1e": "This component allows for a lower level database manipulation than using traditional models.",
    "db_16b634f6806e7bef1eb15a9c2d7e5fef": "Database Adapters",
    "db_7152b235e4d2ec36da8551669390c6f5": "This component makes use of adapters to encapsulate specific database system details. Phalcon uses PDO_ to connect to databases. The following database engines are supported:",
    "db_206bd6266ccc781d8844f3db2de5d557": "Implementing your own adapters",
    "db_cd9e7a9ee60d9ba1a2514d90d735c5e2": "The :doc:`Phalcon\\\\Db\\\\AdapterInterface <..\/api\/Phalcon_Db_AdapterInterface>` interface must be implemented in order to create your own database adapters or extend the existing ones.",
    "db_1c404351c1ded3af7104b1367eca2298": "Database Dialects",
    "db_e39afb69212957a158e65726002b28ea": "Phalcon encapsulates the specific details of each database engine in dialects. Those provide common functions and SQL generator to the adapters.",
    "db_4cab8540827f652e67fdeca3664ad02d": "Implementing your own dialects",
    "db_4c59c53a42f9ff7526ba048854fd8666": "The :doc:`Phalcon\\\\Db\\\\DialectInterface <..\/api\/Phalcon_Db_DialectInterface>` interface must be implemented in order to create your own database dialects or extend the existing ones.",
    "db_1e84f34a1540652f1d97e6e1b494eaba": "Connecting to Databases",
    "db_324740fa028cb8a427a50099a1748b93": "To create a connection it's necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:",
    "db_b651efdb98a5d6bd2b3935d0c3f4a5e2": "Required",
    "db_ebb061953c0454b2c8ee7b0ac615ebcd": "Optional",
    "db_90a4e8d1f7195a0627f7cb0d3e84e07d": "Create a connection",
    "db_416206518e27ed2ec8b8e0876078af35": "Basic configuration",
    "db_119dd5a342e981b13bf0024d5c6a6933": "Advanced configuration",
    "db_85263fa8f55a37fb6480fae562eb5aea": "Setting up additional PDO options",
    "db_9e0763da7d3608a50dff7cd06c825ea1": "You can set PDO options at connection time by passing the parameters 'options':",
    "db_9f33abf7dcaa4e905ce41ecacf2c7a29": "Create a connection with PDO options",
    "db_9e5e34140a91e9ba6f06e56f6ed231fc": "Finding Rows",
    "db_bf772b6dc335f562852b638549526151": ":doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>` provides several methods to query rows from tables. The specific SQL syntax of the target database engine is required in this case:",
    "db_7c889393a45250b4a18cc765867592a2": "Send a SQL statement to the database system",
    "db_e7a99d8dacb8802c4ac0d05fa390d4e6": "Print each robot name",
    "db_171109a2bee03ae4b02ac4e497ad9f0f": "Get all rows in an array",
    "db_37eda58e4837344d3c8d9df286369018": "Get only the first row",
    "db_606a77912ac91d380adb17023e52c0b5": "By default these calls create arrays with both associative and numeric indexes. You can change this behavior by using Phalcon\\\\Db\\\\Result::setFetchMode(). This method receives a constant, defining which kind of index is required.",
    "db_7c13e5e14c2516b4682395562588620f": "The Phalcon\\\\Db::query() returns an instance of :doc:`Phalcon\\\\Db\\\\Result\\\\Pdo <..\/api\/Phalcon_Db_Result_Pdo>`. These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.",
    "db_7163cbb0d7cbeb83bc60daf2a5d87930": "Traverse the resultset",
    "db_4c37f51054e57a9531894d6f4898346d": "Seek to the third row",
    "db_2c4f0d3e50ef2ca74fe3702595b073ba": "Count the resultset",
    "db_822e9e4f30d1487b43dff638b7288be9": "Binding Parameters",
    "db_20fba1c0ff797b4571fcf2e266e43c1e": "Bound parameters is also supported in :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>`. Although there is a minimal performance impact by using bound parameters, you are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and positional placeholders are supported. Binding parameters can simply be achieved as follows:",
    "db_cb1410d1919176851f1aaab1e732cd03": "Binding with numeric placeholders",
    "db_273054477dbe7d2473f58eafd0b12342": "Binding with named placeholders",
    "db_775f4a7962f7f6a09e70cb9b792ce716": "Inserting\/Updating\/Deleting Rows",
    "db_7f858ef35a717f24acb02ed361b1fa11": "To insert, update or delete rows, you can use raw SQL or use the preset functions provided by the class:",
    "db_47ce7f6122d68b95ce5fab9371a4b4a7": "Inserting data with a raw SQL statement",
    "db_0ed322ecf9a2b51f516dfe73c3cbd3a1": "With placeholders",
    "db_180c84f251a905b2b85b4d0284f00e37": "Generating dynamically the necessary SQL",
    "db_f217522b307007d854a97b06c22e04b4": "Updating data with a raw SQL statement",
    "db_8f2a0a63995fbd12c166eae55a8afd40": "Deleting data with a raw SQL statement",
    "db_51d4553ed9785f47259855221036781b": "Transactions and Nested Transactions",
    "db_34f0e922f688cb71302678a3fe494a24": "Working with transactions is supported as it is with PDO. Perform data manipulation inside transactions often increase the performance on most database systems:",
    "db_a621366cd5b2907e40d03bd48faf18e5": "Start a transaction",
    "db_8c75c6f808c534d604cb02396b4edd55": "Execute some SQL statements",
    "db_d3a6e14ca6fc2d35e9b4be410148fca1": "Commit if everything goes well",
    "db_42dd6f60e2943d2018d338f688dc3893": "An exception has occurred rollback the transaction",
    "db_3b8eafd4e241b95551713b224b483665": "In addition to standard transactions, Phalcon\\\\Db provides built-in support for `nested transactions`_ (if the database system used supports them). When you call begin() for a second time a nested transaction is created:",
    "db_7541179d7363e6364fe5952627e41383": "Start a nested transaction",
    "db_ab5dd438a9f5b8f0820cfe4652a1e9ad": "Execute these SQL statements into the nested transaction",
    "db_c5a4e9142b804454038d6dd0da2f71cc": "Create a save point",
    "db_644ad7bbb7a3ae57fd16f35c4cd6c35d": "An error has occurred, release the nested transaction",
    "db_77ee981b5ddc409abb1c251be1e92335": "Continue, executing more SQL statements",
    "db_754a52a77d610f44a39532d53dcc379c": "Database Events",
    "db_92349b2878385d609e923e4f9828453a": ":doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>` is able to send events to a :doc:`EventsManager <events>` if it's present. Some events when returning boolean false could stop the active operation. The following events are supported:",
    "db_c5d4c5c6f3320fdd992a9f9b94902b4f": "Bind an EventsManager to a connection is simple, Phalcon\\\\Db will trigger the events with the type \"db\":",
    "db_d15114be04209e5fae3b603ffbbf13b1": "Listen all the database events",
    "db_b7efb4940856cd2cf63a1277b1523399": "Assign the eventsManager to the db adapter instance",
    "db_ab3820428eeff2b86851ff180213b216": "Stop SQL operations are very useful if for example you want to implement some last-resource SQL injector checker:",
    "db_b1e59687f407cc13f1dc50e9867784cc": "Check for malicious words in SQL statements",
    "db_859fcc416794bb30a4d0d3374fcb0545": "DROP\/ALTER operations aren't allowed in the application,",
    "db_96f892897bac78f7d2dfb9923df31886": "this must be a SQL injection!",
    "db_4cad94196049561a3ac77c303b7784a7": "It's ok",
    "db_f7dc7675831e283edd54b6e7e3501a7e": "Profiling SQL Statements",
    "db_46e98951d10febc90834515008579195": ":doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>` includes a profiling component called :doc:`Phalcon\\\\Db\\\\Profiler <..\/api\/Phalcon_Db_Profiler>`, that is used to analyze the performance of database operations so as to diagnose performance problems and discover bottlenecks.",
    "db_a3df99eff2894edce98fa52a5fb22368": "Database profiling is really easy With :doc:`Phalcon\\\\Db\\\\Profiler <..\/api\/Phalcon_Db_Profiler>`:",
    "db_fd266170f19ec5af140246474a9051c8": "Start a profile with the active connection",
    "db_14b126c32b3a245e43c622cc25799b45": "Stop the active profile",
    "db_c0ab6b1fa0211ff19b29a5c704e2104f": "Assign the events manager to the connection",
    "db_81e9bd0aa2782b740c867d02541c0325": "Execute a SQL statement",
    "db_82d803f6fb4acc664e98cd0e54612fe1": "Get the last profile in the profiler",
    "db_455bb6bd87e31bb960b18a325c1857f9": "You can also create your own profile class based on :doc:`Phalcon\\\\Db\\\\Profiler <..\/api\/Phalcon_Db_Profiler>` to record real time statistics of the statements sent to the database system:",
    "db_cc3bf7e319d25db079b9a1ecb4d7d832": "Create an EventsManager",
    "db_082d4b9f7128345ba1fb10ccead89d38": "Create a listener",
    "db_eb84e69d88b2666742c4434b5795b5e8": "Attach the listener listening for all database events",
    "db_e88928f2fded39f58528a121fb3de45c": "Logging SQL Statements",
    "db_a7114da51552b196b64a17bf1631aefd": "Using high-level abstraction components such as :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>` to access a database, it is difficult to understand which statements are sent to the database system. :doc:`Phalcon\\\\Logger <..\/api\/Phalcon_Logger>` interacts with :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>`, providing logging capabilities on the database abstraction layer.",
    "db_38bc855579b34e310ac96a45fa71af28": "Execute some SQL statement",
    "db_0088d92ba0746f6ca32168e18b0acd69": "As above, the file *app\/logs\/db.log* will contain something like this:",
    "db_3343eea266e593d47673c1c99603e34c": "Implementing your own Logger",
    "db_06e4bba9bd86a521f5b444fdb93fe6d2": "You can implement your own logger class for database queries, by creating a class that implements a single method called \"log\". The method needs to accept a string as the first argument. You can then pass your logging object to Phalcon\\\\Db::setLogger(), and from then on any SQL statement executed will call that method to log the results.",
    "db_ecd1c68e16f252c70d68cfe1e6e0dcc1": "Describing Tables\/Views",
    "db_1f5f5c687a00cec49123314bc85a2042": ":doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>` also provides methods to retrieve detailed information about tables and views:",
    "db_52e8a97a6e0b563e4c1997d149c13265": "Get tables on the test_db database",
    "db_b3bc60ae7041df3b70812c18a455b060": "Is there a table 'robots' in the database?",
    "db_5edef158abf6024e9f9883ffa43e9567": "Get name, data types and special features of 'robots' fields",
    "db_11eafb2689069f958bc03ecbfc4ba10a": "Get indexes on the 'robots' table",
    "db_1b88a6c6d62f909680fccc9200463104": "Get foreign keys on the 'robots' table",
    "db_f724f5600166de46ea1be17d62d392a1": "Print referenced columns",
    "db_fd4e007472fe028d0e927e9cc2f6b21c": "A table description is very similar to the MySQL describe command, it contains the following information:",
    "db_b281bcb20b9fff76eec329324fc483e6": "Methods to get information about views are also implemented for every supported database system:",
    "db_5c2f5ac613a52fb73295237c35befb7f": "Get views on the test_db database",
    "db_487d3b66ae96713415193b9a08169997": "Is there a view 'robots' in the database?",
    "db_42bc1888fdf7c5f77d9ca21f38e0ed72": "Creating\/Altering\/Dropping Tables",
    "db_3e32a6ea6f8c9617413a066ca88504a3": "Different database systems (MySQL, Postgresql etc.) offer the ability to create, alter or drop tables with the use of commands such as CREATE, ALTER or DROP. The SQL syntax differs based on which database system is used. :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>` offers a unified interface to alter tables, without the need to differentiate the SQL syntax based on the target storage system.",
    "db_5a549338622e7f241d71991a1a20c6f2": "Creating Tables",
    "db_aee25ce86c0637f8e093c3ce704e249d": "The following example shows how to create a table:",
    "db_accf3385a06a95bd8f27cae7026a5b33": "Phalcon\\\\Db::createTable() accepts an associative array describing the table. Columns are defined with the class :doc:`Phalcon\\\\Db\\\\Column <..\/api\/Phalcon_Db_Column>`. The table below shows the options available to define a column:",
    "db_dc7a84782c94708e2445f7047dac825c": "Phalcon\\\\Db supports the following database column types:",
    "db_47d26717150280ad3585faf14f7904aa": "* Phalcon\\\\Db\\\\Column::TYPE_INTEGER * Phalcon\\\\Db\\\\Column::TYPE_DATE * Phalcon\\\\Db\\\\Column::TYPE_VARCHAR * Phalcon\\\\Db\\\\Column::TYPE_DECIMAL * Phalcon\\\\Db\\\\Column::TYPE_DATETIME * Phalcon\\\\Db\\\\Column::TYPE_CHAR * Phalcon\\\\Db\\\\Column::TYPE_TEXT",
    "db_6a6f6804cf8c152946cdee5720e2d35f": "The associative array passed in Phalcon\\\\Db::createTable() can have the possible keys:",
    "db_c3ed2bc70e428245f4bdd9edcf4cd667": "Altering Tables",
    "db_7d43aa05cba8f136df19e848497ebcc4": "As your application grows, you might need to alter your database, as part of a refactoring or adding new features. Not all database systems allow to modify existing columns or add columns between two existing ones. :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>` is limited by these constraints.",
    "db_057c0c5342d6aeacfa7eaa6ac62e1f80": "Adding a new column",
    "db_58802b059e068d99af4ae86864fe1ab0": "Modifying an existing column",
    "db_3967756a7a96bc72339f90055c984041": "Deleting the column \"name\"",
    "db_cff3f5c3bc556746e03f54e9d880ab64": "Dropping Tables",
    "db_04bbf7dd1154ed612e9ab317a81a7439": "Examples on dropping tables:"
}