{
    "events_afb299ea125f4b358f027bbaeb866b2d": "Events Manager",
    "events_aac87938048f8f57d6a8477faebe84e6": "The purpose of this component is to intercept the execution of most of the components of the framework by creating \u201chooks point\u201d. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component.",
    "events_b2923a136099a523e93b60cda2e7677e": "Usage Example",
    "events_8cbb9df0c416197ef9448b6764564317": "In the following example, we use the EventsManager to listen for events produced in a MySQL connection managed by :doc:`Phalcon\\\\Db <..\/api\/Phalcon_Db>`. First, we need a listener object to do this. We created a class whose methods are the events we want to listen:",
    "events_5f3235ad2fb6e8dba5ace17fd39e99f0": "This new class can be as verbose as we need it to. The EventsManager will interface between the component and our listener class, offering hook points based on the methods we defined in our listener class:",
    "events_90aa77c535449519564137eda423cd6f": "Create a database listener",
    "events_d15114be04209e5fae3b603ffbbf13b1": "Listen all the database events",
    "events_b7efb4940856cd2cf63a1277b1523399": "Assign the eventsManager to the db adapter instance",
    "events_a0ea75b3e78f593f08de2e911b50a16d": "Send a SQL command to the database server",
    "events_fd5479e2985d7c1d56a8d7c64d0f5340": "In order to log all the SQL statements executed by our application, we need to use the event \u201cafterQuery\u201d. The first parameter passed to the event listener contains contextual information about the event that is running, the second is the connection itself.",
    "events_163988a35ef91aeddfd6eaae7eaa62f7": "As part of this example, we will also implement the Phalcon\\\\Db\\\\Profiler to detect the SQL statements that are taking longer to execute than expected:",
    "events_f4ac5ffededae837cd3d46cf9f57cf0c": "The resulting profile data can be obtained from the listener:",
    "events_c15d5e6bd78d7b5876de2af36691bda1": "In a similar manner we can register an lambda function to perform the task instead of a separate listener class (as seen above):",
    "events_3b8e6a649d2826cb536fa01f0646965b": "Creating components that trigger Events",
    "events_1b4f6a3242af44a8a67fd89078e36bc0": "You can create components in your application that trigger events to an EventsManager. As a consequence, there may exist listeners that react to these events when generated. In the following example we're creating a component called \"MyComponent\". This component is EventsManager aware; when its method \"someTask\" is executed it triggers two events to any listener in the EventsManager:",
    "events_57b33ef02a4ae9378a58574fc10b6a9d": "do some task",
    "events_d55f27db8320d6582537f9bb067f83c6": "Note that events produced by this component are prefixed with \"my-component\". This is a unique word that helps us identify events that are generated from certain component. You can even generate events outside the component with the same name. Now let's create a listener to this component:",
    "events_d08664e6abf6890d19799d45df0d5277": "A listener is simply a class that implements any of all the events triggered by the component. Now let's make everything work together:",
    "events_fc4786a23c525da4add9bcc3d60f8054": "Create an Events Manager",
    "events_a3ee1df6498c28ea889b5460d103cc0c": "Create the MyComponent instance",
    "events_322cc6e93a4ae29cbfe02d8ff7753704": "Bind the eventsManager to the instance",
    "events_61dc62cc7c424897248c47a8c00ae149": "Attach the listener to the EventsManager",
    "events_7db9f2fbcc01d80b3d28204cfffba8e4": "Execute methods in the component",
    "events_bb8a89aaf595ffb10b7da5699454a29e": "As \"someTask\" is executed, the two methods in the listener will be executed, producing the following output:",
    "events_febbb228c19a2f26d17e27168fa25795": "Additional data may also passed when triggering an event using the third parameter of \"fire\":",
    "events_0b904e84f1ec1fa79efa8df387dfb9d4": "In a listener the third parameter also receives this data:",
    "events_48fd6aaddcb68b7c2560f23546d43fcf": "Receiving the data in the third parameter",
    "events_ca881428d69dabaaa5b05d9e6395829c": "Receiving the data from the event context",
    "events_14bd8a400efae29723f96be78bdb675a": "If a listener it is only interested in listening a specific type of event you can attach a listener directly:",
    "events_619561ca4aaa80cf27dde0f8ac3d7efb": "The handler will only be executed if the event triggered is \"beforeSomeTask\"",
    "events_aa0f658456ea9d7a3cd2da9a6ccaedf7": "Event Propagation\/Cancellation",
    "events_8959d6f8105504c11841abab2ab8bd84": "Many listeners may be added to the same event manager, this means that for the same type of event many listeners can be notified. The listeners are notified in the order they were registered in the EventsManager. Some events are cancelable, indicating that these may be stopped preventing other listeners are notified about the event:",
    "events_09482c6f09b220af893ba0134b0b93da": "We stop the event if it is cancelable",
    "events_f119c05ea80e3ed4ee7db2dda5946731": "Stop the event, so other listeners will not be notified about this",
    "events_4ed65d632a3128d31fa81087f63e7043": "By default events are cancelable, even most of events produced by the framework are cancelables. You can fire a not-cancelable event by passing \"false\" in the fourth parameter of fire:",
    "events_f4e32e14dcbb772d36896def5709ee7b": "Listener Priorities",
    "events_0fa41c6a956acf07a6651af119844aab": "When attaching listeners you can set a specific priority. With this feature you can attach listeners indicating the order in which they must be called:",
    "events_80405017035b0746c31b3d93adc4b60c": "More priority",
    "events_d908af86e640cf898aaf55a070a9f8a1": "Normal priority",
    "events_a32ccf656e86ac8335dc85271fd7051f": "Less priority",
    "events_be2ad66dadd0459a65075bfc2343e9d5": "Collecting Responses",
    "events_8192798658b3e74a5e39425665bffe65": "The events manager can collect every response returned by every notified listener, this example explains how it works:",
    "events_6d4fda59eb03b37047ef6f597e85a39a": "Set up the events manager to collect responses",
    "events_106eac9a28739f21d92acca480af02cc": "Attach a listener",
    "events_0b1cdf85c78347f11997406a17e7113a": "Fire the event",
    "events_33b4d38e391256eba619e73ab7c86dab": "Get all the collected responses",
    "events_347f19399137be68322d5db99c9f2d43": "The above example produces:"
}