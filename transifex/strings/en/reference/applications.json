{
    "applications_b3473fd26b7d8cc92e497638ddc6ccd3": "MVC Applications",
    "applications_bb4089f1ad71124b3a2e0585beb62d1e": "All the hard work behind orchestrating the operation of MVC in Phalcon is normally done by :doc:`Phalcon\\\\Mvc\\\\Application <..\/api\/Phalcon_Mvc_Application>`. This component encapsulates all the complex operations required in the background, instantiating every component needed and integrating it with the project, to allow the MVC pattern to operate as desired.",
    "applications_5c72b7de87d984c178bc0e685791918e": "Single or Multi Module Applications",
    "applications_30f30bef89d983b1a62c9e5ff1737a1e": "With this component you can run various types of MVC structures:",
    "applications_f097132aa35267eefdbc61076bc00ea6": "Single Module",
    "applications_416800eeb4591d20f3650afb9c5cbe71": "Single MVC applications consist of one module only. Namespaces can be used but are not necessary. An application like this would have the following file structure:",
    "applications_aeb6b481a934736a9317de8e35b816ca": "If namespaces are not used, the following bootstrap file could be used to orchestrate the MVC flow:",
    "applications_faa502b951ab798137c6cb6e31d62100": "Registering the view component",
    "applications_515ae1eb1a3c418c9df6567ee8ebc937": "If namespaces are used, the following bootstrap can be used:",
    "applications_290a704190b60c65fce3b4833c72f709": "Use autoloading with namespaces prefixes",
    "applications_ce131ddce42f7e3db591ccc00b36076c": "Register the dispatcher setting a Namespace for controllers",
    "applications_5751c2fd1cb6ec657c0ee1645cd00695": "Multi Module",
    "applications_655e8a68e201a868cce8e36a8694ab55": "A multi-module application uses the same document root for more than one module. In this case the following file structure can be used:",
    "applications_2da6e9ab0cc34715fd676223767bc44e": "Each directory in apps\/ have its own MVC structure. A Module.php is present to configure specific settings of each module like autoloaders or custom services:",
    "applications_d3477be4fcfb5b2e53eb426e85a84ad1": "Registering a dispatcher",
    "applications_44e1cebcbff50d87515a10aa14148592": "A special bootstrap file is required to load the a multi-module MVC architecture:",
    "applications_6346b563f17241e069afc0450dbf99ab": "Specify routes for modules",
    "applications_af3b0c5f3814f511560f1328c6a3e421": "Create an application",
    "applications_e09da7fe34c2e54c065067b026d5c495": "Register the installed modules",
    "applications_6e390072cbe16eea871f567953e9ed8f": "Handle the request",
    "applications_0d4cde41b79e03bb90ff94219e5b5a66": "If you want to maintain the module configuration in the bootstrap file you can use an anonymous function to register the module:",
    "applications_8faa972d61c8284d6df2e1a2a954449a": "Creating a view component",
    "applications_bf3405f13bd7a17626e69f61bce6beb1": "Set options to view component",
    "applications_284dd2a54aa8555edb3c0ff30d7b1f50": "When :doc:`Phalcon\\\\Mvc\\\\Application <..\/api\/Phalcon_Mvc_Application>` have modules registered, always is necessary that every matched route returns a valid module. Each registered module has an associated class offering functions to set the module itself up. Each module class definition must implement two methods: registerAutoloaders() and registerServices(), they will be called by :doc:`Phalcon\\\\Mvc\\\\Application <..\/api\/Phalcon_Mvc_Application>` according to the module to be executed.",
    "applications_f755654cd30447787e75f8ac4b685c21": "Understanding the default behavior",
    "applications_e6f1ffd103e3b041c357ff5924779bde": "If you've been following the :doc:`tutorial <tutorial>` or have generated the code using :doc:`Phalcon Devtools <tools>`, you may recognize the following bootstrap file:",
    "applications_4db062df9a2bcaaed11dacb62050066c": "Register autoloaders",
    "applications_b0ee5187535bf9ed0d422b1c5d468803": "Register services",
    "applications_5b7a57d61632637bde6f41d00b356952": "The core of all the work of the controller occurs when handle() is invoked:",
    "applications_5772ed72bed6d4143cdce5714eae250b": "Manual bootstrapping",
    "applications_793bb14c9ead67b9e56d7a2bc15349cc": "If you do not wish to use :doc:`Phalcon\\\\Mvc\\\\Application <..\/api\/Phalcon_Mvc_Application>`, the code above can be changed as follows:",
    "applications_5c643e5fc4e1e2b139dc49223954f07d": "Get the 'router' service",
    "applications_e9235990f60bd87dea2cd1916c5dda0b": "Pass the processed router parameters to the dispatcher",
    "applications_f65e37f68b2dad49dd4c7468e500f099": "Start the view",
    "applications_a30744e6e9ab2ec2d650bb7e14e7ee87": "Dispatch the request",
    "applications_667f3a1cf267224a9d75f89198f8785f": "Render the related views",
    "applications_daa91b7614c4e32e5dc9b94f30ad9738": "Finish the view",
    "applications_4b93c4493e563230dee6f09fbd73bd33": "Pass the output of the view to the response",
    "applications_58548ea8c5de29ab761b4099bdd8281c": "Send the request headers",
    "applications_730373716a0b13e03cde896c002673b5": "Print the response",
    "applications_0ba50b9f871396720667469306cea51a": "The following replacement of :doc:`Phalcon\\\\Mvc\\\\Application <..\/api\/Phalcon_Mvc_Application>` lacks of a view component making it suitable for Rest APIs:",
    "applications_f6f4e66567a39e1be5517eb1beada4ae": "Get the returned value by the latest executed action",
    "applications_21d70c170fa633a6f5779c5c147a153d": "Check if the action returned is a 'response' object",
    "applications_efc3bcebe3b11474027090395185edd2": "Send the request",
    "applications_a40a4e9d3dcfc83a609532a73f819a22": "Yet another alternative that catch exceptions produced in the dispatcher forwarding to other actions consequently:",
    "applications_7d5e11cb2a96eab801a42ec98443338b": "An exception has occurred, dispatch some controller\/action aimed for that",
    "applications_d7460a4ca376e9879f52661a9dc6ec36": "Although the above implementations are a lot more verbose than the code needed while using :doc:`Phalcon\\\\Mvc\\\\Application <..\/api\/Phalcon_Mvc_Application>`, it offers an alternative in bootstrapping your application. Depending on your needs, you might want to have full control of what should be instantiated or not, or replace certain components with those of your own to extend the default functionality.",
    "applications_e49f4ec3985839b3237b74a15b496e3e": "Application Events",
    "applications_78a8a05e73b3e971df42fd7dd7a6a6b0": ":doc:`Phalcon\\\\Mvc\\\\Application <..\/api\/Phalcon_Mvc_Application>` is able to send events to the :doc:`EventsManager <events>` (if it is present). Events are triggered using the type \"application\". The following events are supported:",
    "applications_4eb434eb37be7b4a57c178fa4af88c76": "The following example demonstrates how to attach listeners to this component:"
}