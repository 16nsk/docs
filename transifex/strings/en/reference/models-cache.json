{
    "models-cache_839f3f9c5311b487faa792e0587aa2c6": "Caching in the ORM",
    "models-cache_95cb61056b392ac5982d769f3a94770a": "Every application is different, we could have models whose data change frequently and others that rarely change. Accessing database systems is often one of the most common bottlenecks in terms of performance. This is due to the complex connection\/communication processes that PHP must do in each request to obtain data from the database. Therefore, if we want to achieve good performance we need to add some layers of caching where the application requires it.",
    "models-cache_e55c4c7c721ad73838373f9792e1c8c3": "This chapter explains the possible points where it is possible to implement caching to improve performance. The framework gives you the tools to implement the cache where you demand of it according to the architecture of your application.",
    "models-cache_6422e6a17a2941513403f9d3640a1c81": "Caching Resultsets",
    "models-cache_9bc17a041fe4fe724ea7d4fdbe869c0f": "A well established technique to avoid the continuous access to the database is to cache resultsets that don't change frequently using a system with faster access (usually memory).",
    "models-cache_30668f227cebea1ae50d33c013dfe0d6": "When :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>` requires a service to cache resultsets, it will request it to the Dependency Injector Container with the convention name \"modelsCache\".",
    "models-cache_2ab3778b45194507fc193d4168e9f30a": "As Phalcon provides a component to :doc:`cache <cache>` any kind of data, we'll explain how to integrate it with Models. First, you must register it as a service in the services container:",
    "models-cache_c46ec7fd0baf68b0a0398abad10d045c": "Set the models cache service",
    "models-cache_83b746e3e149c65f5d387ee018ce18e1": "Cache data for one day by default",
    "models-cache_27c9c860a0e993fc9cd8fe1f98c2dd13": "Memcached connection settings",
    "models-cache_eb40dd6627183a961e507390d965a529": "You have complete control in creating and customizing the cache before being used by registering the service as an anonymous function. Once the cache setup is properly defined you could cache resultsets as follows:",
    "models-cache_d3f37d5d77852c3754f59d5c8bc38a1c": "Get products without caching",
    "models-cache_c90421ba39563a01954c9e38a0efa33d": "Just cache the resultset. The cache will expire in 1 hour (3600 seconds)",
    "models-cache_d210140ea7a975f5af5204a35990b6c6": "Cache the resultset for only for 5 minutes",
    "models-cache_051afb10c0cf687b846f3b6897f762d4": "Using a custom cache",
    "models-cache_157e77512eaf5de628c5f6d233869c8d": "Caching could be also applied to resultsets generated using relationships:",
    "models-cache_aa2e6bcafd60883ae49cc24e0cb61605": "Query some post",
    "models-cache_3207752bc461bd9261c3a11699997cc6": "Get comments related to a post, also cache it",
    "models-cache_ef555ec89407e63d3269ccd2b15d887d": "Get comments related to a post, setting lifetime",
    "models-cache_9d4f9253bcab3867f5842dcb634dede4": "When a cached resultset needs to be invalidated, you can simply delete it from the cache using the previously specified key.",
    "models-cache_1309780b72f30496b61631983bcbdc8c": "Note that not all resultsets must be cached. Results that change very frequently should not be cached since they are invalidated very quickly and caching in that case impacts performance. Additionally, large datasets that do not change frequently could be cached, but that is a decision that the developer has to make based on the available caching mechanism and whether the performance impact to simply retrieve that data in the first place is acceptable.",
    "models-cache_3ed32570bf1cb380cb4f367cc81bb281": "Overriding find\/findFirst",
    "models-cache_3de9b13290d13e3419c6721aa9fdd48c": "As seen above, these methods are available in models that inherit :doc:`Phalcon\\\\Mvc\\\\Model <..\/api\/Phalcon_Mvc_Model>`:",
    "models-cache_373fe0ef7bf8bbc1062fa79aa92fe215": "By doing this, you're intercepting all the calls to these methods, this way, you can add a cache layer or run the query if there is no cache. For example, a very basic cache implementation, uses a static property to avoid that a record would be queried several times in a same request:",
    "models-cache_d96ab0d2abf8d06ac79f194da6dba4c9": "Create an unique key based on the parameters",
    "models-cache_119ef0030a2b09b65c226429b076f571": "Store the result in the memory cache",
    "models-cache_663cf45b9f459a24aa2ac47eaa908b67": "Return the result in the cache",
    "models-cache_af2c0186f6bd6b7836c204d7fbf89d42": "Access the database is several times slower than calculate a cache key, you're free in implement the key generation strategy you find better for your needs. Note that a good key avoids collisions as much as possible, this means that different keys returns unrelated records to the find parameters.",
    "models-cache_1684acf662dbb430e9bb369d7f6d9539": "In the above example, we used a cache in memory, it is useful as a first level cache. Once we have the memory cache, we can implement a second level cache layer like APC\/XCache or a NoSQL database:",
    "models-cache_1678a76d8468b285a88907821276306c": "We're using APC as second cache",
    "models-cache_6d53a17bb9a5ffabff2ff97b2d171752": "There are no memory or apc cache",
    "models-cache_5f532865df03a51e71ee2083bc94aa1e": "Store the result in APC",
    "models-cache_3f0550c5ba8bc66b0145c05b696ba62f": "This gives you full control on how the the caches must be implemented for each model, if this strategy is common to several models you can create a base class for all of them:",
    "models-cache_4e1375f53ef0c978cf609acea7c76b38": ".. create a cache key based on the parameters",
    "models-cache_3e18e6fd93493211f25173d06798d74b": ".. custom caching strategy",
    "models-cache_cbef6dec996aaedacb875ab47b4a478c": "Then use this class as base class for each 'Cacheable' model:",
    "models-cache_f619f9e90a14811a9326ce3d6a6e6aca": "Forcing Cache",
    "models-cache_6bbeb0f3b3dfb43ae7d746922da64e28": "Earlier we saw how Phalcon\\\\Mvc\\\\Model has a built-in integration with the caching component provided by the framework. To make a record\/resultset cacheable we pass the key 'cache' in the array of parameters:",
    "models-cache_5355522211efcea8d6cb4dddddc0d400": "This gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the find\/findFirst method to force every query to be cached:",
    "models-cache_124512375dc436ec89c8e2e17f355c43": "Convert the parameters to an array",
    "models-cache_0c9372806ffb6745c9c9adacd667b27b": "Check if a cache key wasn't passed",
    "models-cache_d983887368bc1aeeb8a7d0dbf37820a2": "and create the cache parameters",
    "models-cache_7f9169fdf457cb880ce9d25973c73f11": "Caching PHQL Queries",
    "models-cache_823b323401bce868288be958bb3ef207": "All queries in the ORM, no matter how high level syntax we used to create them are handled internally using PHQL. This language gives you much more freedom to create all kinds of queries. Of course these queries can be cached:",
    "models-cache_2dc92ee793d02090370464d78ca48dac": "If you don't want to use the implicit cache just save the resulset into your favorite cache backend:",
    "models-cache_69ebf3305cc0af755ddf55bcad46f10c": "Reusable Related Records",
    "models-cache_aca1bd8a06b637f2491038b833ca4432": "Some models may have relationships to other models. This allows us to easily check the records that relate to instances in memory:",
    "models-cache_1a35fb79d9063249f16d3ca67bead727": "Get some invoice",
    "models-cache_8a4daeca65f733dbdc9dbca6527f851d": "Get the customer related to the invoice",
    "models-cache_e16166444362b0fe474040cd3eaad5e1": "Print his\/her name",
    "models-cache_1450b2b316074644f2fd775d07035126": "This example is very simple, a customer is queried and can be used as required, for example, to show its name. This also applies if we retrieve a set of invoices to show customers that correspond to these invoices:",
    "models-cache_734229e26203c940522b7093b2cf214a": "Get a set of invoices",
    "models-cache_48ad1f5511ab1fb7b3018b95e687c51e": "SELECT * FROM invoices",
    "models-cache_b6a2e15a36c109ff8bc87e968e9c38ad": "SELECT * FROM customers WHERE id = ?",
    "models-cache_fbb8a44bfd4a304b97d2d4207789550b": "A customer may have one or more bills, this means that the customer may be unnecessarily more than once. To avoid this, we could mark the relationship as reusable, this way, we tell the ORM to automatically reuse the records instead of re-querying them again and again:",
    "models-cache_cab4981195cf8fa7422a401ca5cd521f": "This cache works in memory only, this means that cached data are released when the request is terminated. You can add a more sophisticated cache for this scenario overriding the models manager:",
    "models-cache_fc7175adef9a2ba7477f57e9ec8cb1f5": "If the model is Products use the APC cache",
    "models-cache_5b802a5671396df846d4678aa45910c2": "For the rest, use the memory cache",
    "models-cache_7029c833677ccfbe1f854bc8642b9631": "Do not forget to register the custom models manager in the DI:",
    "models-cache_efe555e4b6c2aa4b091efcfdd07feba7": "Caching Related Records",
    "models-cache_167c1bde680b7a2a0bdf02e7f6a2a846": "When a related record is queried, the ORM internally builds the appropriate condition and gets the required records using find\/findFirst in the target model according to the following table:",
    "models-cache_ae2a8ea75f237e1665de20deddd187af": "This means that when you get a related record you could intercept how these data are obtained by implementing the corresponding method:",
    "models-cache_888e73a0d05ff6c52b5d8056fcf4494a": "Invoices::findFirst('...');",
    "models-cache_95b197310c9f475e448775744fbd67db": "Same as above",
    "models-cache_1f88a87fa11cb62e4d916071b5cf0ed4": "Accordingly, we could replace the findFirst method in the model Invoices and implement the cache we consider most appropriate:",
    "models-cache_22d2fa1350f9f3ee06e9af91feb8603f": "Caching Related Records Recursively",
    "models-cache_2bd99a946141b3039b298fa5dd8015c8": "In this scenario, we assume that everytime we query a result we also retrieve their associated records. If we store the records found together with their related entities perhaps we could reduce a bit the overhead required to obtain all entities:",
    "models-cache_46d72b8da1dd6d78ff8f4a7a776363dd": "returns data from a cache",
    "models-cache_3385399d048079251dee2de3ce0933c4": "stores data in the cache",
    "models-cache_3162d85b9d80a0d6168430d6792ccb08": "Create a unique key",
    "models-cache_2098f517516d00008a3963bd44c0b7bc": "Check if there are data in the cache",
    "models-cache_b2a7f24709a2fea9345b6059afe5a32f": "Valid data is an object",
    "models-cache_d91c9ea6ee79bfd38fd16847d2c76011": "Query the related customer",
    "models-cache_d92eea8a14ab0e4d417e5cb4b407dfa6": "Assign it to the record",
    "models-cache_fcbdd942176611635b18b4a09c2c4840": "Store the invoices in the cache + their customers",
    "models-cache_89e355a6cd118fbef59f6f3851d1ac1d": "add relations and initialize other stuff",
    "models-cache_b2328f272dbe20be455b22c19b1ff9d5": "Getting the invoices from the cache already obtains the customer data in just one hit, reducing the overall overhead of the operation. Note that this process can also be performed with PHQL following an alternative solution:",
    "models-cache_6eb6ea83e4137a5f45e1ec79b91ec252": "Caching based on Conditions",
    "models-cache_5e6828717b8ad3c64fa12c43a9647bc6": "In this scenario, the cache is implemented conditionally according to current conditions received. According to the range where the primary key is located we choose a different cache backend:",
    "models-cache_165c2321d4782029a5eccc88bbbd88f7": "The easiest way is adding an static method to the model that chooses the right cache to be used:",
    "models-cache_b4eb94aa4b707ff948987f11f2495f1b": "This approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a find\/findFirst:",
    "models-cache_e4b3c844d52b969d134289d33803be79": "To achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and thus customize the cache everything possible:",
    "models-cache_49f732032f4ed83cde0f4665fd0fd0c5": "The first is create a custom builder, so we can generate a totally customized query:",
    "models-cache_272d7300204775890fec39f6cd0b2f4e": "Instead of directly returning a Phalcon\\\\Mvc\\\\Model\\\\Query, our custom builder returns a CustomQuery instance, this class looks like:",
    "models-cache_f1b035de1dc50b7dfd1086491b7ae3c8": "Parse the intermediate representation for the SELECT",
    "models-cache_ea774c2ceec533e35b2612b8ca97cc8f": "Check if the query has conditions",
    "models-cache_45aa40645c4c172881990fbb3fb9c2c3": "The fields in the conditions can have any order",
    "models-cache_84bd683466da005c46771e0f7857866a": "We need to recursively check the conditions tree",
    "models-cache_4b795271f09b698f34ca37f35a50c234": "to find the info we're looking for",
    "models-cache_ee145a2797f4511011485ecf69891e90": "Recursively visits the nodes",
    "models-cache_ad8dabad2ff8985fc4c2273aabaefe7a": "Select the cache according to the range",
    "models-cache_f161bcb6c3b55fd3a4badb79278d3c9e": "Check if the cache has data",
    "models-cache_d24ba4a062f845a259f6bd1397452bdd": "Execute the query",
    "models-cache_b5fdcd2ba8fb2872ce268fb85a100d41": "cache the result",
    "models-cache_581b25c6139a967f221c16f07b976187": "Implementing a helper (CustomNodeVisitor) that recursively checks the conditions looking for fields that tell us the possible range to be used in the cache:",
    "models-cache_054a0fc78f44ab0a1bb8c9c985de828b": "Finally, we can replace the find method in the Robots model to use the custom classes we've created:",
    "models-cache_ed63aed4efe90a846731cdb4b7dcf805": "Caching of PHQL planning",
    "models-cache_746ea0323975bebf6107bb63e8f3c362": "As well as most moderns database systems PHQL internally caches the execution plan, if the same statement is executed several times PHQL reuses the previously generated plan improving performance, for a developer to take better advantage of this is highly recommended build all your SQL statements passing variable parameters as bound parameters:",
    "models-cache_2a89882635811354d83208102969e432": "In the above example, ten plans were generated increasing the memory usage and processing in the application. Rewriting the code to take advantage of bound parameters reduces the processing by both ORM and database system:",
    "models-cache_d53e1af67acdb733459dec78b03de176": "Performance can be also improved reusing the PHQL query:",
    "models-cache_6c3362c2c834f5cd58f8d0aa52210e1c": "Execution plans for queries involving `prepared statements`_ are also cached by most database systems reducing the overall execution time, also protecting your application against `SQL Injections`_."
}