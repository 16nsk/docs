{
    "dispatching_c7e230188b6b2143ff84328e977f26e6": "Dispatching Controllers",
    "dispatching_81501364f781f7e734258d205629bc50": ":doc:`Phalcon\\\\Mvc\\\\Dispatcher <..\/api\/Phalcon_Mvc_Dispatcher>` is the component responsible for instantiating controllers and executing the required actions on them in an MVC application. Understanding its operation and capabilities helps us get more out of the services provided by the framework.",
    "dispatching_9ec793769848dd36d16bc5009d090b78": "The Dispatch Loop",
    "dispatching_3aa22fc3cb1379a87cf25f652dcc56b8": "This is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller\/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within :doc:`Phalcon\\\\Mvc\\\\Dispatcher <..\/api\/Phalcon_Mvc_Dispatcher>`:",
    "dispatching_36b5251b4f60f0e3ab4fdacb1a73e855": "Dispatch loop",
    "dispatching_bec792bcb607a469332561ea1f064cec": "Instantiating the controller class via autoloaders",
    "dispatching_55759812960b168ddd66320b5fd4cfc1": "Execute the action",
    "dispatching_6ea67765b812783b432096068579c7ac": "'$finished' should be reloaded to check if the flow",
    "dispatching_52975c12433d7743922548154537c9d4": "was forwarded to another controller",
    "dispatching_b400a4664e1eb7d407d32443a5866cbb": "The code above lacks validations, filters and additional checks, but it demonstrates the normal flow of operation in the dispatcher.",
    "dispatching_0d1e9546c8779eb28895ec882ed3d319": "Dispatch Loop Events",
    "dispatching_14eec6afae10eddb0b0e9b9376b2c5c4": ":doc:`Phalcon\\\\Mvc\\\\Dispatcher <..\/api\/Phalcon_Mvc_Dispatcher>` is able to send events to an :doc:`EventsManager <events>` if it is present. Events are triggered using the type \"dispatch\". Some events when returning boolean false could stop the active operation. The following events are supported:",
    "dispatching_69d78495a25fcaf6e4b4e9fa56d997aa": "The :doc:`INVO <tutorial-invo>` tutorial shows how to take advantage of dispatching events implementing a security filter with :doc:`Acl <acl>`",
    "dispatching_4eb434eb37be7b4a57c178fa4af88c76": "The following example demonstrates how to attach listeners to this component:",
    "dispatching_41b79f8cf8c0967be09fcf51a7674d17": "Create an event manager",
    "dispatching_848530a8762b4940d6e8097771122109": "Attach a listener for type \"dispatch\"",
    "dispatching_bda634f6269a3a06dd0a40fb4d7ae993": "Bind the eventsManager to the view component",
    "dispatching_742e12cd23609e971d9755ddafffff6e": "An instantiated controller automatically acts as a listener for dispatch events, so you can implement methods as callbacks:",
    "dispatching_1ee4fe990509813017611ecf6e305c2d": "Executed before every found action",
    "dispatching_49435565b9b3e2fa5b74074d2bb70884": "Executed after every found action",
    "dispatching_5e377a05e8ff5174b61fbdfc1b15ccb3": "Forwarding to other actions",
    "dispatching_3b9443771cbb60480ead8f8517713ac9": "The dispatch loop allows us to forward the execution flow to another controller\/action. This is very useful to check if the user can access to certain options, redirect users to other screens or simply reuse code.",
    "dispatching_a01b11a64fec929d0a6de3fb0922adcd": ".. store some product and forward the user",
    "dispatching_33c7726ef2f9bff69d1c9cb8d1389c42": "Forward flow to the index action",
    "dispatching_f3c62e174053901d1ba20264f5f6dfe9": "Keep in mind that making a \"forward\" is not the same as making an HTTP redirect. Although they apparently got the same result. The \"forward\" doesn't reload the current page, all the redirection occurs in a single request, while the HTTP redirect needs two requests to complete the process.",
    "dispatching_b42a3fb3e2bd1291604e00718ec1e87b": "More forwarding examples:",
    "dispatching_127dad3202ffec70abfe6cf2662da3e2": "Forward flow to another action in the current controller",
    "dispatching_52cf0d0467fe9114e378ef9752ff0b3b": "passing parameters",
    "dispatching_55bda9dcfe8251c072b7abb5c77efad6": "A forward action accepts the following parameters:",
    "dispatching_f639eaf462e293dac25b136e656dcbf2": "Preparing Parameters",
    "dispatching_8802f0dbd05437c34f56cb0a6b8ddf81": "Thanks to the hooks points provided by :doc:`Phalcon\\\\Mvc\\\\Dispatcher <..\/api\/Phalcon_Mvc_Dispatcher>` you can easily adapt your application to any URL schema:",
    "dispatching_b371c1705a0db0cda084736e6897724c": "For example, you want your URLs look like: http:\/\/example.com\/controller\/key1\/value1\/key2\/value",
    "dispatching_b89da8c819fb44b1e66adf6136530991": "Parameters by default are passed as they come in the URL to actions, you can transform them to the desired schema:",
    "dispatching_cc3bf7e319d25db079b9a1ecb4d7d832": "Create an EventsManager",
    "dispatching_106eac9a28739f21d92acca480af02cc": "Attach a listener",
    "dispatching_f3b6b5f59d7df27ede32c771dd40a584": "Use odd parameters as keys and even as values",
    "dispatching_0c2e39e72d43a7f83a11dae5abbd51c9": "Override parameters",
    "dispatching_cad058d0cc5381d5cc280ee62fe8253e": "If the desired schema is: http:\/\/example.com\/controller\/key1:value1\/key2:value, the following code is required:",
    "dispatching_c0605047051937a68961e4f308fe53bf": "Explode each parameter as key,value pairs",
    "dispatching_f70a4e022ddce861f63997cab3fab1e4": "Getting Parameters",
    "dispatching_dd6b7bcdbb4ce2aaeedd235abfe8c8d0": "When a route provides named parameters you can receive them in a controller, a view or any other component that extends :doc:`Phalcon\\\\DI\\\\Injectable <..\/api\/Phalcon_DI_Injectable>`.",
    "dispatching_f5c27d8b2e4c00a39131b93bed108b71": "Get the post's title passed in the URL as parameter",
    "dispatching_342886fb499713c16d477b8d2b9640ca": "or prepared in an event",
    "dispatching_d6f92b1871c4833f57c8a7c5c2fbec22": "Get the post's year passed in the URL as parameter",
    "dispatching_47ed99dbf80216b5654ff7b4046c6f91": "or prepared in an event also filtering it",
    "dispatching_14c198f6c9118247f026bc8e88fbaedf": "Preparing actions",
    "dispatching_05d8d38f4f9011a9ac4641a571f84dce": "You can also define an arbitrary schema for actions before be dispatched.",
    "dispatching_e260ea2adfcceb079d4d4b6f1b551608": "Camelize action names",
    "dispatching_67688f4ece23aa755f24f8cfb0aad718": "If the original URL is: http:\/\/example.com\/admin\/products\/show-latest-products, and for example you want to camelize 'show-latest-products' to 'ShowLatestProducts', the following code is required:",
    "dispatching_c40e2ba20afcd811261a0381a09f54d4": "Camelize actions",
    "dispatching_0a38dd3dddc99f184e2d2e489251cb10": "Remove legacy extensions",
    "dispatching_0dabb0181ae19b162bc80badf0a4b1cc": "If the original URL always contains a '.php' extension:",
    "dispatching_7572891bc5d9c53bb5cc71ddc41eb601": "http:\/\/example.com\/admin\/products\/show-latest-products.php http:\/\/example.com\/admin\/products\/index.php",
    "dispatching_70432e530ebf2544b788be9edb18bc91": "You can remove it before dispatch the controller\/action combination:",
    "dispatching_d79b636a02bc6255db99a1385ccf21b2": "Remove extension before dispatch",
    "dispatching_3158c8d8044dd5e43edabccb00528a46": "Remove extension",
    "dispatching_b527ebd2ac007b2d7e6d6639f89c29c9": "Override action",
    "dispatching_5525aa566ea8e91ed09eb57d3e25b58a": "Inject model instances",
    "dispatching_81aa760587a36f918d029250fe635836": "In this example, the developer wants to inspect the parameters that an action will receive in order to dynamically inject model instances.",
    "dispatching_713b76e5d389b872cf6b91937b9a1c59": "The controller looks like:",
    "dispatching_b08fb0962ab2d8ce37b497ca32d08713": "Method 'showAction' receives an instance of the model \\Posts, the developer could inspect this before dispatch the action preparing the parameter accordingly:",
    "dispatching_85c8e25bc56ae82ab59658b59a2a03ce": "Possible controller class name",
    "dispatching_4bca87661489db5e3089d939faf2eb58": "Possible method name",
    "dispatching_3573d5c600b4bb192b28cf2efc093b0c": "Get the reflection for the method to be executed",
    "dispatching_76d370dc5586c35d54e28967d422908c": "Check parameters",
    "dispatching_da26f5f1a8336688ebf490bf7fe60331": "Get the expected model name",
    "dispatching_0bebfc545740d36398a183720db0d4a2": "Check if the parameter expects a model instance",
    "dispatching_53cac0999d027be3b4c7e630f66e897e": "Override the parameters by the model instance",
    "dispatching_071dd72dde774dfd84ab6af90cd8ea5b": "An exception has occurred, maybe the class or action does not exist?",
    "dispatching_e4002ed174de3b9843b8d2a2f8cfbd84": "The above example has been simplified for academic purposes. A developer can improve it to inject any kind of dependency or model in actions before be executed.",
    "dispatching_a0b3073d0e9cc13f01fa8fded0cdc7ad": "Handling Not-Found Exceptions",
    "dispatching_f4582eab6580a8e3e9d783c044d1e67e": "Using the :doc:`EventsManager <events>` it's possible to insert a hook point before the dispatcher throws an exception when the controller\/action combination wasn't found:",
    "dispatching_96bb5555a4a2fd176be84f582a90d3de": "Handle 404 exceptions",
    "dispatching_2663f5f3464380864d0364daf496d4e1": "Handle other exceptions",
    "dispatching_c5b1d51f30933dfd71e8f28646329bc7": "Bind the EventsManager to the dispatcher",
    "dispatching_91daa9dae5570715c7059d0efbf5c64c": "Of course, this method can be moved onto independent plugin classes, allowing more than one class take actions when an exception is produced in the dispatch loop:"
}