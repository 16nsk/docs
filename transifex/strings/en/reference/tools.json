{
    "tools_f16ba89ee7afed1f5adf9ccfab7fc774": "Phalcon Developer Tools",
    "tools_5f86a37a76c402c9a7ef8e85ea9b8fe9": "These tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.",
    "tools_d779ffb4113a9aa6902414524b888ae6": "Download",
    "tools_e0d8720ef3987ed002683da3d43b08b9": "You can download or clone a cross platform package containing the developer tools from Github_.",
    "tools_c0277e63a218ee84b1414b2c467dfbe2": "Installation",
    "tools_618388d79fb02b4b00cdda6d5a1f4242": "These are detailed instructions on how to install the developer tools on different platforms:",
    "tools_16dcaef43f145e3d6763695db14944f3": "Getting Available Commands",
    "tools_111c7ef624beb6d4338c718ef0d22708": "You can get a list of available commands in Phalcon tools by typing: phalcon commands",
    "tools_6a9c831bc5c1ae5b32aabbc1fe4a3788": "Generating a Project Skeleton",
    "tools_6ae7fb5b78692a0f18c712f21f66682c": "You can use Phalcon tools to generate pre-defined project skeletons for your applications with Phalcon framework. By default the project skeleton generator will use mod_rewrite for Apache. Type the following command on your web server document root:",
    "tools_c1e0d3d651727e5163a3f4250dc7ff45": "The above recommended project structure was generated:",
    "tools_dd36a0f52c3ae7025e3b72d5e380e40e": "You could add the parameter *--help* to get help on the usage of a certain script:",
    "tools_f911e2ec92e2456b37496da17a606409": "Phalcon DevTools (1.2.3)",
    "tools_23ac6acc0e34590f4de7567323ba9276": "Help:   Creates a project",
    "tools_eb4f9090943e6671f13c7881aae28c56": "Usage:   project [name] [type] [directory] [enable-webtools]",
    "tools_46378e7968dc488b8ee87396d91c52ac": "Arguments:   help\tShows this help text",
    "tools_61204847703c2789b23a92c79e1833ea": "Example   phalcon project store simple",
    "tools_04f17bfd175fbc6c9ddc99f5d75fec62": "Options:  --name               Name of the new project  --enable-webtools    Determines if webtools should be enabled [optional]  --directory=s        Base path on which project will be created [optional]  --type=s             Type of the application to be generated (micro, simple, modules)  --template-path      Specify a template path [optional]  --use-config-ini     Use a ini file as configuration file [optional]  --trace              Shows the trace of the framework in case of exception. [optional]  --help               Shows this help",
    "tools_89bd1ab95dfdabc96068f90960c91a31": "Accessing the project from the web server will show you:",
    "tools_d7281d770a3c367a891c86662c961e99": "Generating Controllers",
    "tools_40d723c00197dab564136975660379ab": "The command \"create-controller\" generates controller skeleton structures. It's important to invoke this command inside a directory that already has a Phalcon project.",
    "tools_3b61a911a3744d3ff3959a2502bb4e16": "The following code is generated by the script:",
    "tools_26686a2cd6d0eae99caeca53e31c49e6": "Preparing Database Settings",
    "tools_2476ca1c4e1fdf94a9a720dd10d3cae8": "When a project is generated using developer tools. A configuration file can be found in *app\/config\/config.ini* To generate models or scaffold, you will need to change the settings used to connect to your database.",
    "tools_efc2231631071970e3c45b53b4bc2840": "Change the database section in your config.ini file:",
    "tools_103eb217645d47c61117060bf3a071b9": "Generating Models",
    "tools_bbc4c78364dd5d44f17b00b7f76a6b30": "There are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters\/getters can be used.",
    "tools_e3f69c7f20b479a18d7035ceb3674fce": "Options:  --name=s             Table name  --schema=s           Name of the schema. [optional]  --namespace=s        Model's namespace [optional]  --get-set            Attributes will be protected and have setters\/getters. [optional]  --extends=s          Model extends the class name supplied [optional]  --doc                Helps to improve code completion on IDEs [optional]  --directory=s        Base path on which project will be created [optional]  --force              Rewrite the model. [optional]  --trace              Shows the trace of the framework in case of exception. [optional]  --mapcolumn          Get some code for map columns. [optional]",
    "tools_806d1bdc5625ca89cb015ee23299a7e2": "The simplest way to generate a model is:",
    "tools_887926b8b25f33cc752b00608d55a548": "All table fields are declared public for direct access.",
    "tools_b697bd502539c77c3cb6107ecc595ce8": "By adding the *--get-set* you can generate the fields with protected variables and public setter\/getter methods. Those methods can help in business logic implementation within the setter\/getter methods.",
    "tools_d1cae8a930c6e65aab57aa3cb21832e2": "A nice feature of the model generator is that it keeps changes made by the developer between code generations. This allows the addition or removal of fields and properties, without worrying about losing changes made to the model itself. The following screencast shows you how it works:",
    "tools_444dcb6e4ab792f7a397678de08b5b12": "Scaffold a CRUD",
    "tools_dcce99b2bb012a713c31b24feddf3d1b": "Scaffolding is a quick way to generate some of the major pieces of an application. If you want to create the models, views, and controllers for a new resource in a single operation, scaffolding is the tool for the job.",
    "tools_547d2484a1540272d09dc63d614bb925": "Once the code is generated, it will have to be customized to meet your needs. Many developers avoid scaffolding entirely, opting to write all or most of their source code from scratch. The generated code can serve as a guide to better understand of how the framework works or develop prototypes. The screenshot below shows a scaffold based on the table \"products\":",
    "tools_499e3e858ae84fcd7bc4c32289d2244e": "The scaffold generator will build several files in your application, along with some folders. Here's a quick overview of what will be generated:",
    "tools_4ccaf4063adc4214d4aef23d413ac506": "When browsing the recently generated controller, you will see a search form and a link to create a new Product:",
    "tools_c15d7b85481e3cf75e363a0483bf475e": "The \"create page\" allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.",
    "tools_4ef7d998c728fa863b606b964af5285b": "After performing a search, a pager component is available to show paged results. Use the \"Edit\" or \"Delete\" links in front of each result to perform such actions.",
    "tools_45996c72348c9fda516a66dcf9992659": "Web Interface to Tools",
    "tools_eccae8f5452d061f5aa2cdbfa332b277": "Also, if you prefer, it's possible to use Phalcon Developer Tools from a web interface. Check out the following screencast to figure out how it works:",
    "tools_642c39544aab1f7c922b02712472d40a": "Integrating Tools with PhpStorm IDE",
    "tools_6ac7cfa1e44097cc1a0002e16e1746a8": "The screencast below shows how to integrate developer tools with the `PhpStorm IDE`_. The configuration steps could be easily adapted to other IDEs for PHP.",
    "tools_ee50f1d496b9cd00d5955f10f6dc7517": "Conclusion",
    "tools_c7953dac4a7034ef255b13fdac1919f3": "Phalcon Developer Tools provides an easy way to generate code for your application, reducing development time and potential coding errors."
}